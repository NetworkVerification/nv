(* vim: set syntax=ocaml: *)
(* Fully partitioned version of rand_32_0.03125.nv *)
(* Automatically generated by gen_part_nv.py *)
let dest = 0n
type attribute = option[int32]
let mapbetter = (fun f -> (fun o1 -> (fun o2 -> (match (o1,o2) with 
 | (None,x) -> x
 | (x,None) -> x
 | (Some x,Some y) -> Some f x  y 
) ) ) )
let mapo = (fun f -> (fun o -> (match o with 
 | None -> None
 | Some x -> Some f x 
) ) )
let init = (fun n -> (match n with 
 | 0n -> Some 0u32
 | _ -> None
) )
let merge = (fun n -> (fun x1 -> (fun x2 -> mapbetter (fun n1 -> (fun n2 -> if n1 <u32 n2 then 
n1 else 
n2 ) )  x1  x2  ) ) )
let trans = (fun e -> (fun x -> mapo (fun n -> n +u32 1u32 )  x  ) )
let assert_node = (fun u -> (fun x -> ! (x = None) ) )
let sol = solution { init = init; trans = trans; merge = merge; interface = interface; rtrans = trans }
assert foldNodes ((fun u -> (fun x -> (fun acc -> acc && assert_node u  x  ) ) )) sol true
let subset = (fun s -> (fun t -> combine ((fun x -> (fun y -> x && y ) )) s t (Some true) (Some false) (Some true) (Some false) = s ) )
let isSome = (fun o -> (match o with 
 | Some _ -> true
 | None -> false
) )
let flipEdge = (fun e -> (match e with 
 | a~b -> toEdge b  a 
) )
let disjoint = (fun s -> (fun t -> combine ((fun x -> (fun y -> x && y ) )) s t (Some true) (Some false) (Some true) (Some false) = createDict false ) )
let nodes = 32
let edges = {30n-23n;29n-17n;29n-4n;28n-29n;28n-3n;27n-19n;27n-17n;27n-2n;26n-8n;24n-4n;22n-26n;19n-31n;19n-11n;18n-20n;18n-12n;18n-9n;17n-1n;15n-4n;14n-19n;14n-5n;12n-3n;7n-8n;6n-10n;5n-27n;4n-12n;3n-18n;2n-12n;0n-11n;}
(* {} *)

let partition node = match node with
  | 0n -> 0
  | 11n -> 1
  | 1n -> 2
  | 2n -> 3
  | 3n -> 4
  | 4n -> 5
  | 5n -> 6
  | 6n -> 7
  | 7n -> 8
  | 8n -> 9
  | 9n -> 10
  | 10n -> 11
  | 12n -> 12
  | 13n -> 13
  | 14n -> 14
  | 15n -> 15
  | 16n -> 16
  | 17n -> 17
  | 18n -> 18
  | 19n -> 19
  | 20n -> 20
  | 21n -> 21
  | 22n -> 22
  | 23n -> 23
  | 24n -> 24
  | 25n -> 25
  | 26n -> 26
  | 27n -> 27
  | 28n -> 28
  | 29n -> 29
  | 30n -> 30
  | 31n -> 31

let interface edge a =
  match edge with
  | 0~11 -> a = None
  | 2~12 -> a = None
  | 3~18 -> a = None
  | 4~12 -> a = None
  | 5~27 -> a = None
  | 6~10 -> a = None
  | 7~8 -> a = None
  | 12~3 -> a = None
  | 14~5 -> a = None
  | 14~19 -> a = None
  | 15~4 -> a = None
  | 17~1 -> a = None
  | 18~9 -> a = None
  | 18~12 -> a = None
  | 18~20 -> a = None
  | 19~11 -> a = None
  | 19~31 -> a = None
  | 22~26 -> a = None
  | 24~4 -> a = None
  | 26~8 -> a = None
  | 27~2 -> a = None
  | 27~17 -> a = None
  | 27~19 -> a = None
  | 28~3 -> a = None
  | 28~29 -> a = None
  | 29~4 -> a = None
  | 29~17 -> a = None
  | 30~23 -> a = None
