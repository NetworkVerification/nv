(* vim: set syntax=ocaml: *)
(* hMETIS-partitioned version of rand_64_0.0625.nv with 8 partitions *)
(* Automatically generated by gen_part_nv.py *)
(* Generated by topzoo.py *)

type bgpType = {aslen: int; bgpAd: int8; comms: set[int]; lp: int; med: int;}

type attribute = option[bgpType]

let nodes = 64

let edges = {
  13-0; (* None,13 --> None,0 *)
  20-0; (* None,20 --> None,0 *)
  36-0; (* None,36 --> None,0 *)
  40-1; (* None,40 --> None,1 *)
  46-1; (* None,46 --> None,1 *)
  15-2; (* None,15 --> None,2 *)
  29-2; (* None,29 --> None,2 *)
  40-2; (* None,40 --> None,2 *)
  42-2; (* None,42 --> None,2 *)
  57-2; (* None,57 --> None,2 *)
  39-3; (* None,39 --> None,3 *)
  44-3; (* None,44 --> None,3 *)
  61-3; (* None,61 --> None,3 *)
  16-4; (* None,16 --> None,4 *)
  41-4; (* None,41 --> None,4 *)
  52-4; (* None,52 --> None,4 *)
  10-5; (* None,10 --> None,5 *)
  20-5; (* None,20 --> None,5 *)
  32-5; (* None,32 --> None,5 *)
  45-5; (* None,45 --> None,5 *)
  8-6; (* None,8 --> None,6 *)
  26-6; (* None,26 --> None,6 *)
  17-7; (* None,17 --> None,7 *)
  39-7; (* None,39 --> None,7 *)
  7-8; (* None,7 --> None,8 *)
  8-63; (* None,8 --> None,63 *)
  26-8; (* None,26 --> None,8 *)
  43-8; (* None,43 --> None,8 *)
  8-9; (* None,8 --> None,9 *)
  19-9; (* None,19 --> None,9 *)
  30-9; (* None,30 --> None,9 *)
  45-9; (* None,45 --> None,9 *)
  63-9; (* None,63 --> None,9 *)
  33-10; (* None,33 --> None,10 *)
  37-10; (* None,37 --> None,10 *)
  46-10; (* None,46 --> None,10 *)
  49-10; (* None,49 --> None,10 *)
  20-11; (* None,20 --> None,11 *)
  25-11; (* None,25 --> None,11 *)
  31-11; (* None,31 --> None,11 *)
  42-11; (* None,42 --> None,11 *)
  58-11; (* None,58 --> None,11 *)
  62-11; (* None,62 --> None,11 *)
  9-12; (* None,9 --> None,12 *)
  39-12; (* None,39 --> None,12 *)
  15-13; (* None,15 --> None,13 *)
  26-13; (* None,26 --> None,13 *)
  52-13; (* None,52 --> None,13 *)
  60-13; (* None,60 --> None,13 *)
  63-13; (* None,63 --> None,13 *)
  6-14; (* None,6 --> None,14 *)
  14-63; (* None,14 --> None,63 *)
  51-14; (* None,51 --> None,14 *)
  55-14; (* None,55 --> None,14 *)
  11-15; (* None,11 --> None,15 *)
  19-15; (* None,19 --> None,15 *)
  21-15; (* None,21 --> None,15 *)
  47-15; (* None,47 --> None,15 *)
  56-15; (* None,56 --> None,15 *)
  60-15; (* None,60 --> None,15 *)
  1-16; (* None,1 --> None,16 *)
  28-16; (* None,28 --> None,16 *)
  60-16; (* None,60 --> None,16 *)
  61-16; (* None,61 --> None,16 *)
  8-17; (* None,8 --> None,17 *)
  49-17; (* None,49 --> None,17 *)
  11-18; (* None,11 --> None,18 *)
  21-18; (* None,21 --> None,18 *)
  37-18; (* None,37 --> None,18 *)
  55-18; (* None,55 --> None,18 *)
  2-19; (* None,2 --> None,19 *)
  1-20; (* None,1 --> None,20 *)
  11-20; (* None,11 --> None,20 *)
  28-20; (* None,28 --> None,20 *)
  34-20; (* None,34 --> None,20 *)
  44-20; (* None,44 --> None,20 *)
  51-20; (* None,51 --> None,20 *)
  55-20; (* None,55 --> None,20 *)
  59-20; (* None,59 --> None,20 *)
  44-21; (* None,44 --> None,21 *)
  29-22; (* None,29 --> None,22 *)
  6-23; (* None,6 --> None,23 *)
  12-23; (* None,12 --> None,23 *)
  24-23; (* None,24 --> None,23 *)
  27-23; (* None,27 --> None,23 *)
  40-23; (* None,40 --> None,23 *)
  46-23; (* None,46 --> None,23 *)
  19-24; (* None,19 --> None,24 *)
  21-24; (* None,21 --> None,24 *)
  39-24; (* None,39 --> None,24 *)
  50-24; (* None,50 --> None,24 *)
  52-24; (* None,52 --> None,24 *)
  56-24; (* None,56 --> None,24 *)
  14-26; (* None,14 --> None,26 *)
  28-26; (* None,28 --> None,26 *)
  38-26; (* None,38 --> None,26 *)
  5-27; (* None,5 --> None,27 *)
  18-27; (* None,18 --> None,27 *)
  21-27; (* None,21 --> None,27 *)
  27-63; (* None,27 --> None,63 *)
  46-27; (* None,46 --> None,27 *)
  56-27; (* None,56 --> None,27 *)
  60-27; (* None,60 --> None,27 *)
  14-28; (* None,14 --> None,28 *)
  17-29; (* None,17 --> None,29 *)
  42-29; (* None,42 --> None,29 *)
  51-29; (* None,51 --> None,29 *)
  54-29; (* None,54 --> None,29 *)
  47-30; (* None,47 --> None,30 *)
  54-30; (* None,54 --> None,30 *)
  22-31; (* None,22 --> None,31 *)
  38-31; (* None,38 --> None,31 *)
  53-31; (* None,53 --> None,31 *)
  54-31; (* None,54 --> None,31 *)
  8-32; (* None,8 --> None,32 *)
  15-32; (* None,15 --> None,32 *)
  25-32; (* None,25 --> None,32 *)
  30-32; (* None,30 --> None,32 *)
  41-32; (* None,41 --> None,32 *)
  61-32; (* None,61 --> None,32 *)
  6-33; (* None,6 --> None,33 *)
  50-33; (* None,50 --> None,33 *)
  57-33; (* None,57 --> None,33 *)
  15-34; (* None,15 --> None,34 *)
  21-34; (* None,21 --> None,34 *)
  38-34; (* None,38 --> None,34 *)
  26-35; (* None,26 --> None,35 *)
  42-35; (* None,42 --> None,35 *)
  44-35; (* None,44 --> None,35 *)
  46-35; (* None,46 --> None,35 *)
  48-35; (* None,48 --> None,35 *)
  0-36; (* None,0 --> None,36 *)
  4-36; (* None,4 --> None,36 *)
  17-36; (* None,17 --> None,36 *)
  26-36; (* None,26 --> None,36 *)
  4-37; (* None,4 --> None,37 *)
  7-37; (* None,7 --> None,37 *)
  28-37; (* None,28 --> None,37 *)
  9-38; (* None,9 --> None,38 *)
  26-38; (* None,26 --> None,38 *)
  37-38; (* None,37 --> None,38 *)
  20-39; (* None,20 --> None,39 *)
  25-40; (* None,25 --> None,40 *)
  30-40; (* None,30 --> None,40 *)
  45-40; (* None,45 --> None,40 *)
  49-40; (* None,49 --> None,40 *)
  53-40; (* None,53 --> None,40 *)
  54-40; (* None,54 --> None,40 *)
  55-40; (* None,55 --> None,40 *)
  50-41; (* None,50 --> None,41 *)
  57-41; (* None,57 --> None,41 *)
  58-41; (* None,58 --> None,41 *)
  15-42; (* None,15 --> None,42 *)
  51-42; (* None,51 --> None,42 *)
  62-42; (* None,62 --> None,42 *)
  16-44; (* None,16 --> None,44 *)
  51-44; (* None,51 --> None,44 *)
  57-44; (* None,57 --> None,44 *)
  36-45; (* None,36 --> None,45 *)
  39-45; (* None,39 --> None,45 *)
  48-45; (* None,48 --> None,45 *)
  10-46; (* None,10 --> None,46 *)
  11-46; (* None,11 --> None,46 *)
  42-46; (* None,42 --> None,46 *)
  62-46; (* None,62 --> None,46 *)
  2-47; (* None,2 --> None,47 *)
  4-47; (* None,4 --> None,47 *)
  5-47; (* None,5 --> None,47 *)
  10-47; (* None,10 --> None,47 *)
  0-48; (* None,0 --> None,48 *)
  5-48; (* None,5 --> None,48 *)
  19-48; (* None,19 --> None,48 *)
  48-63; (* None,48 --> None,63 *)
  62-48; (* None,62 --> None,48 *)
  8-49; (* None,8 --> None,49 *)
  20-49; (* None,20 --> None,49 *)
  24-49; (* None,24 --> None,49 *)
  33-49; (* None,33 --> None,49 *)
  5-50; (* None,5 --> None,50 *)
  6-50; (* None,6 --> None,50 *)
  19-50; (* None,19 --> None,50 *)
  39-50; (* None,39 --> None,50 *)
  54-50; (* None,54 --> None,50 *)
  7-51; (* None,7 --> None,51 *)
  20-51; (* None,20 --> None,51 *)
  27-51; (* None,27 --> None,51 *)
  48-51; (* None,48 --> None,51 *)
  1-52; (* None,1 --> None,52 *)
  7-52; (* None,7 --> None,52 *)
  53-52; (* None,53 --> None,52 *)
  16-53; (* None,16 --> None,53 *)
  60-53; (* None,60 --> None,53 *)
  22-54; (* None,22 --> None,54 *)
  45-54; (* None,45 --> None,54 *)
  48-54; (* None,48 --> None,54 *)
  8-55; (* None,8 --> None,55 *)
  20-55; (* None,20 --> None,55 *)
  29-55; (* None,29 --> None,55 *)
  33-55; (* None,33 --> None,55 *)
  57-55; (* None,57 --> None,55 *)
  7-57; (* None,7 --> None,57 *)
  12-57; (* None,12 --> None,57 *)
  30-57; (* None,30 --> None,57 *)
  61-57; (* None,61 --> None,57 *)
  62-57; (* None,62 --> None,57 *)
  3-58; (* None,3 --> None,58 *)
  9-58; (* None,9 --> None,58 *)
  26-58; (* None,26 --> None,58 *)
  32-58; (* None,32 --> None,58 *)
  35-58; (* None,35 --> None,58 *)
  6-59; (* None,6 --> None,59 *)
  25-59; (* None,25 --> None,59 *)
  26-59; (* None,26 --> None,59 *)
  41-59; (* None,41 --> None,59 *)
  49-59; (* None,49 --> None,59 *)
  19-60; (* None,19 --> None,60 *)
  28-60; (* None,28 --> None,60 *)
  32-60; (* None,32 --> None,60 *)
  59-60; (* None,59 --> None,60 *)
  50-61; (* None,50 --> None,61 *)
  59-61; (* None,59 --> None,61 *)
}

let init n = if n = 0n then Some {  aslen= 0u32; bgpAd= 20u8; comms= { _ |-> false }; lp= 100u32; med= 80u32; } else None

let pickOption f x y =
  match (x,y) with
  | (None, None) -> None
  | (None, Some _) -> y  | (Some _, None) -> x
  | (Some a, Some b) -> Some (f a b)

let betterBgp b1 b2 =
  if b1.lp > b2.lp then b1
  else if b2.lp > b1.lp then b2
  else if b1.aslen < b2.aslen then b1
  else if b2.aslen < b1.aslen then b2  else if b1.med >= b2.med then b1 else b2

let mergeBgp x y = pickOption betterBgp x y

let merge n x y = mergeBgp x y

(* Simple shortest-path routing. *)
let transferBgp e x =
  match x with
  | None -> None
  | Some b -> Some {b with aslen = b.aslen + 1}

let trans e x = transferBgp e x

let assert_node u v = match v with | None -> false | _ -> true

let sol = solution { init = init; trans = trans; merge = merge; interface = interface; rtrans = trans }

(* {None,0=0, None,1=1, None,2=2, None,3=3, None,4=4, None,5=5, None,6=6, None,7=7, None,8=8, None,9=9, None,10=10, None,11=11, None,12=12, None,13=13, None,14=14, None,15=15, None,16=16, None,17=17, None,18=18, None,19=19, None,20=20, None,21=21, None,22=22, None,23=23, None,24=24, None,25=25, None,26=26, None,27=27, None,28=28, None,29=29, None,30=30, None,31=31, None,32=32, None,33=33, None,34=34, None,35=35, None,36=36, None,37=37, None,38=38, None,39=39, None,40=40, None,41=41, None,42=42, None,43=43, None,44=44, None,45=45, None,46=46, None,47=47, None,48=48, None,49=49, None,50=50, None,51=51, None,52=52, None,53=53, None,54=54, None,55=55, None,56=56, None,57=57, None,58=58, None,59=59, None,60=60, None,61=61, None,62=62, None,63=63} *)

assert foldNodes (fun u v acc -> acc && assert_node u v) sol true
let partition node = match node with
  | 2n -> 0
  | 10n -> 0
  | 22n -> 0
  | 29n -> 0
  | 30n -> 0
  | 33n -> 0
  | 40n -> 0
  | 47n -> 0
  | 49n -> 0
  | 54n -> 0
  | 55n -> 0
  | 57n -> 0
  | 5n -> 1
  | 9n -> 1
  | 12n -> 1
  | 19n -> 1
  | 23n -> 1
  | 24n -> 1
  | 39n -> 1
  | 45n -> 1
  | 48n -> 1
  | 50n -> 1
  | 1n -> 2
  | 11n -> 2
  | 35n -> 2
  | 42n -> 2
  | 46n -> 2
  | 62n -> 2
  | 15n -> 3
  | 18n -> 3
  | 20n -> 3
  | 21n -> 3
  | 27n -> 3
  | 34n -> 3
  | 44n -> 3
  | 51n -> 3
  | 56n -> 3
  | 3n -> 4
  | 25n -> 4
  | 32n -> 4
  | 41n -> 4
  | 58n -> 4
  | 59n -> 4
  | 61n -> 4
  | 6n -> 5
  | 8n -> 5
  | 14n -> 5
  | 26n -> 5
  | 43n -> 5
  | 63n -> 5
  | 4n -> 6
  | 7n -> 6
  | 13n -> 6
  | 17n -> 6
  | 36n -> 6
  | 52n -> 6
  | 0n -> 6
  | 16n -> 7
  | 28n -> 7
  | 31n -> 7
  | 37n -> 7
  | 38n -> 7
  | 53n -> 7
  | 60n -> 7

let interface edge a =
  match edge with
  | 0~48 -> a = Some {  aslen= 0u32; bgpAd= 20u8; comms= { _ |-> false }; lp= 100u32; med= 80u32; }
  | 1~16 -> a = Some {  aslen= 4u32; bgpAd= 20u8; comms= { _ |-> false }; lp= 100u32; med= 80u32; }
  | 1~20 -> a = Some {  aslen= 4u32; bgpAd= 20u8; comms= { _ |-> false }; lp= 100u32; med= 80u32; }
  | 1~52 -> a = Some {  aslen= 4u32; bgpAd= 20u8; comms= { _ |-> false }; lp= 100u32; med= 80u32; }
  | 2~19 -> a = Some {  aslen= 4u32; bgpAd= 20u8; comms= { _ |-> false }; lp= 100u32; med= 80u32; }
  | 4~37 -> a = Some {  aslen= 5u32; bgpAd= 20u8; comms= { _ |-> false }; lp= 100u32; med= 80u32; }
  | 4~47 -> a = Some {  aslen= 5u32; bgpAd= 20u8; comms= { _ |-> false }; lp= 100u32; med= 80u32; }
  | 5~27 -> a = Some {  aslen= 3u32; bgpAd= 20u8; comms= { _ |-> false }; lp= 100u32; med= 80u32; }
  | 5~47 -> a = Some {  aslen= 3u32; bgpAd= 20u8; comms= { _ |-> false }; lp= 100u32; med= 80u32; }
  | 6~23 -> a = Some {  aslen= 5u32; bgpAd= 20u8; comms= { _ |-> false }; lp= 100u32; med= 80u32; }
  | 6~33 -> a = Some {  aslen= 5u32; bgpAd= 20u8; comms= { _ |-> false }; lp= 100u32; med= 80u32; }
  | 6~50 -> a = Some {  aslen= 5u32; bgpAd= 20u8; comms= { _ |-> false }; lp= 100u32; med= 80u32; }
  | 6~59 -> a = Some {  aslen= 5u32; bgpAd= 20u8; comms= { _ |-> false }; lp= 100u32; med= 80u32; }
  | 7~8 -> a = Some {  aslen= 5u32; bgpAd= 20u8; comms= { _ |-> false }; lp= 100u32; med= 80u32; }
  | 7~37 -> a = Some {  aslen= 5u32; bgpAd= 20u8; comms= { _ |-> false }; lp= 100u32; med= 80u32; }
  | 7~51 -> a = Some {  aslen= 5u32; bgpAd= 20u8; comms= { _ |-> false }; lp= 100u32; med= 80u32; }
  | 7~57 -> a = Some {  aslen= 5u32; bgpAd= 20u8; comms= { _ |-> false }; lp= 100u32; med= 80u32; }
  | 8~9 -> a = Some {  aslen= 5u32; bgpAd= 20u8; comms= { _ |-> false }; lp= 100u32; med= 80u32; }
  | 8~17 -> a = Some {  aslen= 5u32; bgpAd= 20u8; comms= { _ |-> false }; lp= 100u32; med= 80u32; }
  | 8~32 -> a = Some {  aslen= 5u32; bgpAd= 20u8; comms= { _ |-> false }; lp= 100u32; med= 80u32; }
  | 8~49 -> a = Some {  aslen= 5u32; bgpAd= 20u8; comms= { _ |-> false }; lp= 100u32; med= 80u32; }
  | 8~55 -> a = Some {  aslen= 5u32; bgpAd= 20u8; comms= { _ |-> false }; lp= 100u32; med= 80u32; }
  | 9~38 -> a = Some {  aslen= 3u32; bgpAd= 20u8; comms= { _ |-> false }; lp= 100u32; med= 80u32; }
  | 9~58 -> a = Some {  aslen= 3u32; bgpAd= 20u8; comms= { _ |-> false }; lp= 100u32; med= 80u32; }
  | 10~5 -> a = Some {  aslen= 5u32; bgpAd= 20u8; comms= { _ |-> false }; lp= 100u32; med= 80u32; }
  | 10~46 -> a = Some {  aslen= 5u32; bgpAd= 20u8; comms= { _ |-> false }; lp= 100u32; med= 80u32; }
  | 11~15 -> a = Some {  aslen= 4u32; bgpAd= 20u8; comms= { _ |-> false }; lp= 100u32; med= 80u32; }
  | 11~18 -> a = Some {  aslen= 4u32; bgpAd= 20u8; comms= { _ |-> false }; lp= 100u32; med= 80u32; }
  | 11~20 -> a = Some {  aslen= 4u32; bgpAd= 20u8; comms= { _ |-> false }; lp= 100u32; med= 80u32; }
  | 12~57 -> a = Some {  aslen= 4u32; bgpAd= 20u8; comms= { _ |-> false }; lp= 100u32; med= 80u32; }
  | 14~28 -> a = Some {  aslen= 3u32; bgpAd= 20u8; comms= { _ |-> false }; lp= 100u32; med= 80u32; }
  | 15~2 -> a = Some {  aslen= 5u32; bgpAd= 20u8; comms= { _ |-> false }; lp= 100u32; med= 80u32; }
  | 15~13 -> a = Some {  aslen= 5u32; bgpAd= 20u8; comms= { _ |-> false }; lp= 100u32; med= 80u32; }
  | 15~32 -> a = Some {  aslen= 5u32; bgpAd= 20u8; comms= { _ |-> false }; lp= 100u32; med= 80u32; }
  | 15~42 -> a = Some {  aslen= 5u32; bgpAd= 20u8; comms= { _ |-> false }; lp= 100u32; med= 80u32; }
  | 16~4 -> a = Some {  aslen= 5u32; bgpAd= 20u8; comms= { _ |-> false }; lp= 100u32; med= 80u32; }
  | 16~44 -> a = Some {  aslen= 5u32; bgpAd= 20u8; comms= { _ |-> false }; lp= 100u32; med= 80u32; }
  | 17~29 -> a = Some {  aslen= 5u32; bgpAd= 20u8; comms= { _ |-> false }; lp= 100u32; med= 80u32; }
  | 19~15 -> a = Some {  aslen= 5u32; bgpAd= 20u8; comms= { _ |-> false }; lp= 100u32; med= 80u32; }
  | 19~60 -> a = Some {  aslen= 5u32; bgpAd= 20u8; comms= { _ |-> false }; lp= 100u32; med= 80u32; }
  | 20~0 -> a = Some {  aslen= 3u32; bgpAd= 20u8; comms= { _ |-> false }; lp= 100u32; med= 80u32; }
  | 20~5 -> a = Some {  aslen= 3u32; bgpAd= 20u8; comms= { _ |-> false }; lp= 100u32; med= 80u32; }
  | 20~11 -> a = Some {  aslen= 3u32; bgpAd= 20u8; comms= { _ |-> false }; lp= 100u32; med= 80u32; }
  | 20~39 -> a = Some {  aslen= 3u32; bgpAd= 20u8; comms= { _ |-> false }; lp= 100u32; med= 80u32; }
  | 20~49 -> a = Some {  aslen= 3u32; bgpAd= 20u8; comms= { _ |-> false }; lp= 100u32; med= 80u32; }
  | 20~55 -> a = Some {  aslen= 3u32; bgpAd= 20u8; comms= { _ |-> false }; lp= 100u32; med= 80u32; }
  | 21~24 -> a = Some {  aslen= 4u32; bgpAd= 20u8; comms= { _ |-> false }; lp= 100u32; med= 80u32; }
  | 22~31 -> a = Some {  aslen= 4u32; bgpAd= 20u8; comms= { _ |-> false }; lp= 100u32; med= 80u32; }
  | 24~49 -> a = Some {  aslen= 4u32; bgpAd= 20u8; comms= { _ |-> false }; lp= 100u32; med= 80u32; }
  | 25~11 -> a = None
  | 25~40 -> a = None
  | 26~13 -> a = Some {  aslen= 4u32; bgpAd= 20u8; comms= { _ |-> false }; lp= 100u32; med= 80u32; }
  | 26~35 -> a = Some {  aslen= 4u32; bgpAd= 20u8; comms= { _ |-> false }; lp= 100u32; med= 80u32; }
  | 26~36 -> a = Some {  aslen= 4u32; bgpAd= 20u8; comms= { _ |-> false }; lp= 100u32; med= 80u32; }
  | 26~38 -> a = Some {  aslen= 4u32; bgpAd= 20u8; comms= { _ |-> false }; lp= 100u32; med= 80u32; }
  | 26~58 -> a = Some {  aslen= 4u32; bgpAd= 20u8; comms= { _ |-> false }; lp= 100u32; med= 80u32; }
  | 26~59 -> a = Some {  aslen= 4u32; bgpAd= 20u8; comms= { _ |-> false }; lp= 100u32; med= 80u32; }
  | 27~23 -> a = Some {  aslen= 4u32; bgpAd= 20u8; comms= { _ |-> false }; lp= 100u32; med= 80u32; }
  | 27~63 -> a = Some {  aslen= 4u32; bgpAd= 20u8; comms= { _ |-> false }; lp= 100u32; med= 80u32; }
  | 28~20 -> a = Some {  aslen= 4u32; bgpAd= 20u8; comms= { _ |-> false }; lp= 100u32; med= 80u32; }
  | 28~26 -> a = Some {  aslen= 4u32; bgpAd= 20u8; comms= { _ |-> false }; lp= 100u32; med= 80u32; }
  | 30~9 -> a = Some {  aslen= 3u32; bgpAd= 20u8; comms= { _ |-> false }; lp= 100u32; med= 80u32; }
  | 30~32 -> a = Some {  aslen= 3u32; bgpAd= 20u8; comms= { _ |-> false }; lp= 100u32; med= 80u32; }
  | 31~11 -> a = Some {  aslen= 3u32; bgpAd= 20u8; comms= { _ |-> false }; lp= 100u32; med= 80u32; }
  | 32~5 -> a = Some {  aslen= 4u32; bgpAd= 20u8; comms= { _ |-> false }; lp= 100u32; med= 80u32; }
  | 32~60 -> a = Some {  aslen= 4u32; bgpAd= 20u8; comms= { _ |-> false }; lp= 100u32; med= 80u32; }
  | 35~58 -> a = Some {  aslen= 2u32; bgpAd= 20u8; comms= { _ |-> false }; lp= 100u32; med= 80u32; }
  | 36~45 -> a = Some {  aslen= 1u32; bgpAd= 20u8; comms= { _ |-> false }; lp= 100u32; med= 80u32; }
  | 37~10 -> a = Some {  aslen= 5u32; bgpAd= 20u8; comms= { _ |-> false }; lp= 100u32; med= 80u32; }
  | 37~18 -> a = Some {  aslen= 5u32; bgpAd= 20u8; comms= { _ |-> false }; lp= 100u32; med= 80u32; }
  | 38~26 -> a = Some {  aslen= 4u32; bgpAd= 20u8; comms= { _ |-> false }; lp= 100u32; med= 80u32; }
  | 38~34 -> a = Some {  aslen= 4u32; bgpAd= 20u8; comms= { _ |-> false }; lp= 100u32; med= 80u32; }
  | 39~3 -> a = Some {  aslen= 4u32; bgpAd= 20u8; comms= { _ |-> false }; lp= 100u32; med= 80u32; }
  | 39~7 -> a = Some {  aslen= 4u32; bgpAd= 20u8; comms= { _ |-> false }; lp= 100u32; med= 80u32; }
  | 40~1 -> a = Some {  aslen= 3u32; bgpAd= 20u8; comms= { _ |-> false }; lp= 100u32; med= 80u32; }
  | 40~23 -> a = Some {  aslen= 3u32; bgpAd= 20u8; comms= { _ |-> false }; lp= 100u32; med= 80u32; }
  | 41~4 -> a = Some {  aslen= 4u32; bgpAd= 20u8; comms= { _ |-> false }; lp= 100u32; med= 80u32; }
  | 42~2 -> a = Some {  aslen= 3u32; bgpAd= 20u8; comms= { _ |-> false }; lp= 100u32; med= 80u32; }
  | 42~29 -> a = Some {  aslen= 3u32; bgpAd= 20u8; comms= { _ |-> false }; lp= 100u32; med= 80u32; }
  | 44~3 -> a = Some {  aslen= 3u32; bgpAd= 20u8; comms= { _ |-> false }; lp= 100u32; med= 80u32; }
  | 44~35 -> a = Some {  aslen= 3u32; bgpAd= 20u8; comms= { _ |-> false }; lp= 100u32; med= 80u32; }
  | 45~40 -> a = Some {  aslen= 2u32; bgpAd= 20u8; comms= { _ |-> false }; lp= 100u32; med= 80u32; }
  | 45~54 -> a = Some {  aslen= 2u32; bgpAd= 20u8; comms= { _ |-> false }; lp= 100u32; med= 80u32; }
  | 46~10 -> a = Some {  aslen= 4u32; bgpAd= 20u8; comms= { _ |-> false }; lp= 100u32; med= 80u32; }
  | 46~23 -> a = Some {  aslen= 4u32; bgpAd= 20u8; comms= { _ |-> false }; lp= 100u32; med= 80u32; }
  | 46~27 -> a = Some {  aslen= 4u32; bgpAd= 20u8; comms= { _ |-> false }; lp= 100u32; med= 80u32; }
  | 47~15 -> a = Some {  aslen= 4u32; bgpAd= 20u8; comms= { _ |-> false }; lp= 100u32; med= 80u32; }
  | 48~35 -> a = Some {  aslen= 1u32; bgpAd= 20u8; comms= { _ |-> false }; lp= 100u32; med= 80u32; }
  | 48~51 -> a = Some {  aslen= 1u32; bgpAd= 20u8; comms= { _ |-> false }; lp= 100u32; med= 80u32; }
  | 48~54 -> a = Some {  aslen= 1u32; bgpAd= 20u8; comms= { _ |-> false }; lp= 100u32; med= 80u32; }
  | 48~63 -> a = Some {  aslen= 1u32; bgpAd= 20u8; comms= { _ |-> false }; lp= 100u32; med= 80u32; }
  | 49~17 -> a = Some {  aslen= 4u32; bgpAd= 20u8; comms= { _ |-> false }; lp= 100u32; med= 80u32; }
  | 49~59 -> a = Some {  aslen= 4u32; bgpAd= 20u8; comms= { _ |-> false }; lp= 100u32; med= 80u32; }
  | 50~33 -> a = Some {  aslen= 3u32; bgpAd= 20u8; comms= { _ |-> false }; lp= 100u32; med= 80u32; }
  | 50~41 -> a = Some {  aslen= 3u32; bgpAd= 20u8; comms= { _ |-> false }; lp= 100u32; med= 80u32; }
  | 50~61 -> a = Some {  aslen= 3u32; bgpAd= 20u8; comms= { _ |-> false }; lp= 100u32; med= 80u32; }
  | 51~14 -> a = Some {  aslen= 2u32; bgpAd= 20u8; comms= { _ |-> false }; lp= 100u32; med= 80u32; }
  | 51~29 -> a = Some {  aslen= 2u32; bgpAd= 20u8; comms= { _ |-> false }; lp= 100u32; med= 80u32; }
  | 51~42 -> a = Some {  aslen= 2u32; bgpAd= 20u8; comms= { _ |-> false }; lp= 100u32; med= 80u32; }
  | 52~24 -> a = Some {  aslen= 5u32; bgpAd= 20u8; comms= { _ |-> false }; lp= 100u32; med= 80u32; }
  | 53~40 -> a = Some {  aslen= 6u32; bgpAd= 20u8; comms= { _ |-> false }; lp= 100u32; med= 80u32; }
  | 53~52 -> a = Some {  aslen= 6u32; bgpAd= 20u8; comms= { _ |-> false }; lp= 100u32; med= 80u32; }
  | 54~31 -> a = Some {  aslen= 2u32; bgpAd= 20u8; comms= { _ |-> false }; lp= 100u32; med= 80u32; }
  | 54~50 -> a = Some {  aslen= 2u32; bgpAd= 20u8; comms= { _ |-> false }; lp= 100u32; med= 80u32; }
  | 55~14 -> a = Some {  aslen= 4u32; bgpAd= 20u8; comms= { _ |-> false }; lp= 100u32; med= 80u32; }
  | 55~18 -> a = Some {  aslen= 4u32; bgpAd= 20u8; comms= { _ |-> false }; lp= 100u32; med= 80u32; }
  | 55~20 -> a = Some {  aslen= 4u32; bgpAd= 20u8; comms= { _ |-> false }; lp= 100u32; med= 80u32; }
  | 56~24 -> a = None
  | 57~41 -> a = Some {  aslen= 4u32; bgpAd= 20u8; comms= { _ |-> false }; lp= 100u32; med= 80u32; }
  | 57~44 -> a = Some {  aslen= 4u32; bgpAd= 20u8; comms= { _ |-> false }; lp= 100u32; med= 80u32; }
  | 58~11 -> a = Some {  aslen= 3u32; bgpAd= 20u8; comms= { _ |-> false }; lp= 100u32; med= 80u32; }
  | 59~20 -> a = Some {  aslen= 5u32; bgpAd= 20u8; comms= { _ |-> false }; lp= 100u32; med= 80u32; }
  | 59~60 -> a = Some {  aslen= 5u32; bgpAd= 20u8; comms= { _ |-> false }; lp= 100u32; med= 80u32; }
  | 60~13 -> a = Some {  aslen= 5u32; bgpAd= 20u8; comms= { _ |-> false }; lp= 100u32; med= 80u32; }
  | 60~15 -> a = Some {  aslen= 5u32; bgpAd= 20u8; comms= { _ |-> false }; lp= 100u32; med= 80u32; }
  | 60~27 -> a = Some {  aslen= 5u32; bgpAd= 20u8; comms= { _ |-> false }; lp= 100u32; med= 80u32; }
  | 61~16 -> a = Some {  aslen= 4u32; bgpAd= 20u8; comms= { _ |-> false }; lp= 100u32; med= 80u32; }
  | 61~57 -> a = Some {  aslen= 4u32; bgpAd= 20u8; comms= { _ |-> false }; lp= 100u32; med= 80u32; }
  | 62~48 -> a = None
  | 62~57 -> a = None
  | 63~9 -> a = Some {  aslen= 2u32; bgpAd= 20u8; comms= { _ |-> false }; lp= 100u32; med= 80u32; }
  | 63~13 -> a = Some {  aslen= 2u32; bgpAd= 20u8; comms= { _ |-> false }; lp= 100u32; med= 80u32; }
