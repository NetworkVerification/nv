(* vim: set syntax=ocaml: *)
(* Fully partitioned version of rand_64_0.015625.nv *)
(* Automatically generated by gen_part_nv.py *)
let dest = 0n
type attribute = option[int32]
let mapbetter = (fun f -> (fun o1 -> (fun o2 -> (match (o1,o2) with 
 | (None,x) -> x
 | (x,None) -> x
 | (Some x,Some y) -> Some f x  y 
) ) ) )
let mapo = (fun f -> (fun o -> (match o with 
 | None -> None
 | Some x -> Some f x 
) ) )
let init = (fun n -> (match n with 
 | 0n -> Some 0u32
 | _ -> None
) )
let merge = (fun n -> (fun x1 -> (fun x2 -> mapbetter (fun n1 -> (fun n2 -> if n1 <u32 n2 then 
n1 else 
n2 ) )  x1  x2  ) ) )
let trans = (fun e -> (fun x -> mapo (fun n -> n +u32 1u32 )  x  ) )
let assert_node = (fun u -> (fun x -> ! (x = None) ) )
let sol = solution { init = init; trans = trans; merge = merge; interface = interface; rtrans = trans }
assert foldNodes ((fun u -> (fun x -> (fun acc -> acc && assert_node u  x  ) ) )) sol true
let subset = (fun s -> (fun t -> combine ((fun x -> (fun y -> x && y ) )) s t (Some true) (Some false) (Some true) (Some false) = s ) )
let isSome = (fun o -> (match o with 
 | Some _ -> true
 | None -> false
) )
let flipEdge = (fun e -> (match e with 
 | a~b -> toEdge b  a 
) )
let disjoint = (fun s -> (fun t -> combine ((fun x -> (fun y -> x && y ) )) s t (Some true) (Some false) (Some true) (Some false) = createDict false ) )
let nodes = 64
let edges = {58n-61n;57n-32n;57n-26n;56n-38n;56n-32n;55n-62n;55n-39n;55n-29n;55n-0n;54n-33n;54n-25n;53n-16n;50n-57n;50n-30n;48n-14n;47n-23n;47n-9n;45n-50n;45n-49n;45n-44n;45n-32n;42n-61n;41n-40n;40n-58n;39n-9n;35n-30n;30n-47n;30n-45n;28n-31n;27n-16n;26n-12n;25n-63n;25n-45n;24n-55n;23n-48n;23n-13n;22n-29n;19n-27n;17n-56n;17n-9n;17n-8n;16n-55n;14n-35n;13n-38n;13n-36n;12n-59n;11n-56n;11n-15n;9n-53n;9n-11n;7n-29n;5n-61n;3n-36n;3n-7n;2n-10n;1n-48n;1n-11n;0n-11n;}
(* {} *)

let partition node = match node with
  | 0n -> 0
  | 11n -> 1
  | 15n -> 2
  | 56n -> 3
  | 32n -> 4
  | 38n -> 5
  | 1n -> 6
  | 2n -> 7
  | 3n -> 8
  | 4n -> 9
  | 5n -> 10
  | 6n -> 11
  | 7n -> 12
  | 8n -> 13
  | 9n -> 14
  | 10n -> 15
  | 12n -> 16
  | 13n -> 17
  | 14n -> 18
  | 16n -> 19
  | 17n -> 20
  | 18n -> 21
  | 19n -> 22
  | 20n -> 23
  | 21n -> 24
  | 22n -> 25
  | 23n -> 26
  | 24n -> 27
  | 25n -> 28
  | 26n -> 29
  | 27n -> 30
  | 28n -> 31
  | 29n -> 32
  | 30n -> 33
  | 31n -> 34
  | 33n -> 35
  | 34n -> 36
  | 35n -> 37
  | 36n -> 38
  | 37n -> 39
  | 39n -> 40
  | 40n -> 41
  | 41n -> 42
  | 42n -> 43
  | 43n -> 44
  | 44n -> 45
  | 45n -> 46
  | 46n -> 47
  | 47n -> 48
  | 48n -> 49
  | 49n -> 50
  | 50n -> 51
  | 51n -> 52
  | 52n -> 53
  | 53n -> 54
  | 54n -> 55
  | 55n -> 56
  | 57n -> 57
  | 58n -> 58
  | 59n -> 59
  | 60n -> 60
  | 61n -> 61
  | 62n -> 62
  | 63n -> 63

let interface edge a =
  match edge with
  | 0~11 -> a = None
  | 1~11 -> a = None
  | 1~48 -> a = None
  | 2~10 -> a = None
  | 3~7 -> a = None
  | 3~36 -> a = None
  | 5~61 -> a = None
  | 7~29 -> a = None
  | 9~11 -> a = None
  | 9~53 -> a = None
  | 11~15 -> a = Some 1
  | 11~56 -> a = Some 1
  | 12~59 -> a = None
  | 13~36 -> a = None
  | 13~38 -> a = None
  | 14~35 -> a = None
  | 16~55 -> a = None
  | 17~8 -> a = None
  | 17~9 -> a = None
  | 17~56 -> a = None
  | 19~27 -> a = None
  | 22~29 -> a = None
  | 23~13 -> a = None
  | 23~48 -> a = None
  | 24~55 -> a = None
  | 25~45 -> a = None
  | 25~63 -> a = None
  | 26~12 -> a = None
  | 27~16 -> a = None
  | 28~31 -> a = None
  | 30~45 -> a = None
  | 30~47 -> a = None
  | 35~30 -> a = None
  | 39~9 -> a = None
  | 40~58 -> a = None
  | 41~40 -> a = None
  | 42~61 -> a = None
  | 45~32 -> a = None
  | 45~44 -> a = None
  | 45~49 -> a = None
  | 45~50 -> a = None
  | 47~9 -> a = None
  | 47~23 -> a = None
  | 48~14 -> a = None
  | 50~30 -> a = None
  | 50~57 -> a = None
  | 53~16 -> a = None
  | 54~25 -> a = None
  | 54~33 -> a = None
  | 55~0 -> a = None
  | 55~29 -> a = None
  | 55~39 -> a = None
  | 55~62 -> a = None
  | 56~32 -> a = Some 2
  | 56~38 -> a = Some 2
  | 57~26 -> a = None
  | 57~32 -> a = None
  | 58~61 -> a = None
