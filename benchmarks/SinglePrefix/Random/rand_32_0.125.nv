(* Generated by topzoo.py *)

type bgpType = {aslen: int; bgpAd: int8; comms: set[int]; lp: int; med: int;}

type attribute = option[bgpType]

let nodes = 32

let edges = {
  6-0; (* None,6 --> None,0 *)
  23-0; (* None,23 --> None,0 *)
  9-1; (* None,9 --> None,1 *)
  18-1; (* None,18 --> None,1 *)
  25-1; (* None,25 --> None,1 *)
  29-1; (* None,29 --> None,1 *)
  2-31; (* None,2 --> None,31 *)
  8-2; (* None,8 --> None,2 *)
  16-2; (* None,16 --> None,2 *)
  28-2; (* None,28 --> None,2 *)
  10-3; (* None,10 --> None,3 *)
  13-3; (* None,13 --> None,3 *)
  1-4; (* None,1 --> None,4 *)
  4-31; (* None,4 --> None,31 *)
  8-4; (* None,8 --> None,4 *)
  15-4; (* None,15 --> None,4 *)
  18-4; (* None,18 --> None,4 *)
  20-4; (* None,20 --> None,4 *)
  29-4; (* None,29 --> None,4 *)
  9-5; (* None,9 --> None,5 *)
  11-5; (* None,11 --> None,5 *)
  13-5; (* None,13 --> None,5 *)
  28-5; (* None,28 --> None,5 *)
  3-6; (* None,3 --> None,6 *)
  8-6; (* None,8 --> None,6 *)
  10-6; (* None,10 --> None,6 *)
  12-6; (* None,12 --> None,6 *)
  25-6; (* None,25 --> None,6 *)
  5-7; (* None,5 --> None,7 *)
  17-7; (* None,17 --> None,7 *)
  21-7; (* None,21 --> None,7 *)
  16-8; (* None,16 --> None,8 *)
  19-8; (* None,19 --> None,8 *)
  8-9; (* None,8 --> None,9 *)
  17-9; (* None,17 --> None,9 *)
  19-9; (* None,19 --> None,9 *)
  5-10; (* None,5 --> None,10 *)
  6-10; (* None,6 --> None,10 *)
  13-10; (* None,13 --> None,10 *)
  17-10; (* None,17 --> None,10 *)
  28-10; (* None,28 --> None,10 *)
  4-11; (* None,4 --> None,11 *)
  8-11; (* None,8 --> None,11 *)
  16-11; (* None,16 --> None,11 *)
  19-11; (* None,19 --> None,11 *)
  21-11; (* None,21 --> None,11 *)
  13-12; (* None,13 --> None,12 *)
  23-12; (* None,23 --> None,12 *)
  29-12; (* None,29 --> None,12 *)
  6-13; (* None,6 --> None,13 *)
  12-13; (* None,12 --> None,13 *)
  18-13; (* None,18 --> None,13 *)
  26-13; (* None,26 --> None,13 *)
  0-14; (* None,0 --> None,14 *)
  2-14; (* None,2 --> None,14 *)
  6-14; (* None,6 --> None,14 *)
  12-14; (* None,12 --> None,14 *)
  22-14; (* None,22 --> None,14 *)
  29-14; (* None,29 --> None,14 *)
  2-15; (* None,2 --> None,15 *)
  5-15; (* None,5 --> None,15 *)
  24-15; (* None,24 --> None,15 *)
  25-15; (* None,25 --> None,15 *)
  26-15; (* None,26 --> None,15 *)
  7-16; (* None,7 --> None,16 *)
  8-16; (* None,8 --> None,16 *)
  29-16; (* None,29 --> None,16 *)
  0-17; (* None,0 --> None,17 *)
  7-17; (* None,7 --> None,17 *)
  9-17; (* None,9 --> None,17 *)
  15-17; (* None,15 --> None,17 *)
  18-17; (* None,18 --> None,17 *)
  24-17; (* None,24 --> None,17 *)
  0-18; (* None,0 --> None,18 *)
  10-18; (* None,10 --> None,18 *)
  23-18; (* None,23 --> None,18 *)
  27-18; (* None,27 --> None,18 *)
  28-18; (* None,28 --> None,18 *)
  2-19; (* None,2 --> None,19 *)
  10-19; (* None,10 --> None,19 *)
  16-19; (* None,16 --> None,19 *)
  17-19; (* None,17 --> None,19 *)
  20-19; (* None,20 --> None,19 *)
  20-31; (* None,20 --> None,31 *)
  22-20; (* None,22 --> None,20 *)
  3-21; (* None,3 --> None,21 *)
  9-21; (* None,9 --> None,21 *)
  3-22; (* None,3 --> None,22 *)
  15-22; (* None,15 --> None,22 *)
  17-22; (* None,17 --> None,22 *)
  4-23; (* None,4 --> None,23 *)
  21-23; (* None,21 --> None,23 *)
  8-24; (* None,8 --> None,24 *)
  14-24; (* None,14 --> None,24 *)
  23-24; (* None,23 --> None,24 *)
  0-25; (* None,0 --> None,25 *)
  1-25; (* None,1 --> None,25 *)
  2-25; (* None,2 --> None,25 *)
  7-25; (* None,7 --> None,25 *)
  21-25; (* None,21 --> None,25 *)
  5-26; (* None,5 --> None,26 *)
  17-26; (* None,17 --> None,26 *)
  26-31; (* None,26 --> None,31 *)
  30-26; (* None,30 --> None,26 *)
  18-27; (* None,18 --> None,27 *)
  20-27; (* None,20 --> None,27 *)
  26-27; (* None,26 --> None,27 *)
  18-28; (* None,18 --> None,28 *)
  25-28; (* None,25 --> None,28 *)
  2-29; (* None,2 --> None,29 *)
  8-29; (* None,8 --> None,29 *)
  14-29; (* None,14 --> None,29 *)
  22-29; (* None,22 --> None,29 *)
  1-30; (* None,1 --> None,30 *)
  9-30; (* None,9 --> None,30 *)
  10-30; (* None,10 --> None,30 *)
  13-30; (* None,13 --> None,30 *)
  15-30; (* None,15 --> None,30 *)
}

let init n = if n = 0n then Some {  aslen= 0u32; bgpAd= 20u8; comms= { _ |-> false }; lp= 100u32; med= 80u32; } else None

let pickOption f x y =
  match (x,y) with
  | (None, None) -> None
  | (None, Some _) -> y  | (Some _, None) -> x
  | (Some a, Some b) -> Some (f a b)

let betterBgp b1 b2 =
  if b1.lp > b2.lp then b1
  else if b2.lp > b1.lp then b2
  else if b1.aslen < b2.aslen then b1
  else if b2.aslen < b1.aslen then b2  else if b1.med >= b2.med then b1 else b2

let mergeBgp x y = pickOption betterBgp x y

let merge n x y = mergeBgp x y

(* Simple shortest-path routing. *)
let transferBgp e x =
  match x with
  | None -> None
  | Some b -> Some {b with aslen = b.aslen + 1}

let trans e x = transferBgp e x

let assert_node u v = match v with | None -> false | _ -> true

let sol = solution { init = init; trans = trans; merge = merge; }

(* {None,0=0, None,1=1, None,2=2, None,3=3, None,4=4, None,5=5, None,6=6, None,7=7, None,8=8, None,9=9, None,10=10, None,11=11, None,12=12, None,13=13, None,14=14, None,15=15, None,16=16, None,17=17, None,18=18, None,19=19, None,20=20, None,21=21, None,22=22, None,23=23, None,24=24, None,25=25, None,26=26, None,27=27, None,28=28, None,29=29, None,30=30, None,31=31} *)

assert foldNodes (fun u v acc -> acc && assert_node u v) sol true