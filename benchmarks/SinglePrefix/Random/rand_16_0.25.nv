type attribute = option[int32]
let mapbetter = (fun f -> (fun o1 -> (fun o2 -> (match (o1,o2) with 
 | (None,x) -> x
 | (x,None) -> x
 | (Some x,Some y) -> Some f x  y 
) ) ) )
let mapo = (fun f -> (fun o -> (match o with 
 | None -> None
 | Some x -> Some f x 
) ) )
let init = (fun n -> (match n with 
 | 0n -> Some 0u32
 | _ -> None
) )
let merge = (fun n -> (fun x1 -> (fun x2 -> mapbetter (fun n1 -> (fun n2 -> if n1 <u32 n2 then 
n1 else 
n2 ) )  x1  x2  ) ) )
let trans = (fun e -> (fun x -> mapo (fun n -> n +u32 1u32 )  x  ) )
let assert_node = (fun u -> (fun x -> ! (x = None) ) )
let sol = solution {init = init; trans = trans; merge = merge}
assert foldNodes ((fun u -> (fun x -> (fun acc -> acc && assert_node u  x  ) ) )) sol true
let nodes = 16
let edges = {15n-10n;15n-9n;15n-8n;15n-5n;15n-4n;15n-1n;15n-0n;14n-15n;14n-6n;14n-4n;13n-15n;13n-11n;13n-0n;12n-15n;12n-9n;12n-8n;12n-1n;11n-15n;11n-1n;10n-11n;10n-8n;10n-3n;10n-2n;9n-15n;9n-14n;9n-13n;9n-10n;9n-8n;9n-3n;9n-2n;9n-0n;8n-9n;8n-5n;8n-2n;7n-5n;6n-15n;6n-11n;6n-1n;6n-0n;5n-15n;5n-12n;5n-9n;5n-3n;4n-14n;4n-13n;4n-11n;4n-0n;3n-12n;3n-9n;3n-4n;3n-1n;2n-13n;2n-12n;2n-8n;2n-0n;1n-15n;1n-0n;0n-13n;0n-11n;0n-10n;0n-7n;}
(* {} *)
