(* vim: set syntax=ocaml: *)
(* Horizontally partitioned version of maintenance4.nv *)
(* Automatically generated by gen_part_nv.py *)
type attribute = {  bgp: option[{  aslen: int32; bgpAd: int8; comms: dict[int32,bool]; lp: int32; med: int32; }]; connected: option[int8]; ospf: option[{  areaId: int32; areaType: int2; ospfAd: int8; weight: int16; }]; selected: option[int2]; static: option[int8]; }
type bgpType = {  aslen: int32; bgpAd: int8; comms: dict[int32,bool]; lp: int32; med: int32; }
type ospfType = {  areaId: int32; areaType: int2; ospfAd: int8; weight: int16; }
type rib = {  bgp: option[{  aslen: int32; bgpAd: int8; comms: dict[int32,bool]; lp: int32; med: int32; }]; connected: option[int8]; ospf: option[{  areaId: int32; areaType: int2; ospfAd: int8; weight: int16; }]; selected: option[int2]; static: option[int8]; }
let betterEqOption = (fun o1 -> (fun o2 -> (match (o1,o2) with 
 | (_,None) -> true
 | (None,_) -> false
 | (Some a,Some b) -> a <=u8 b
) ) )
let best = (fun c -> (fun s -> (fun o -> (fun b -> (match (c,s,o,b) with 
 | (None,None,None,None) -> None
 | _ -> let o=(match o with 
 | None -> None
 | Some o -> Some o.ospfAd
) in 
let b=(match b with 
 | None -> None
 | Some b -> Some b.bgpAd
) in 
(match if betterEqOption c  s  then 
(c,0u2) else 
(s,1u2) with 
 | (x,p1) -> (match if betterEqOption o  b  then 
(o,2u2) else 
(b,3u2) with 
 | (y,p2) -> Some if betterEqOption x  y  then 
p1 else 
p2
)
)
) ) ) ) )
let betterBgp = (fun b1 -> (fun b2 -> if b2.lp <u32 b1.lp then 
true else 
if b1.lp <u32 b2.lp then 
false else 
if b1.aslen <u32 b2.aslen then 
true else 
if b2.aslen <u32 b1.aslen then 
false else 
if b2.med <=u32 b1.med then 
true else 
false ) )
let betterOspf = (fun o1 -> (fun o2 -> if o2.areaType <u2 o1.areaType then 
true else 
if o1.areaType <u2 o2.areaType then 
false else 
if o1.weight <=u16 o2.weight then 
true else 
false ) )
let min = (fun x -> (fun y -> x <u8 y ) )
let pickOption = (fun f -> (fun x -> (fun y -> (match (x,y) with 
 | (None,_) -> false
 | (_,None) -> true
 | (Some a,Some b) -> f a  b 
) ) ) )
let d = (1174409984u32,24u6)
let isProtocol = (fun fib -> (fun x -> fib = x ) )
let mergeValues = (fun x -> (fun y -> let c=if pickOption min  x.connected  y.connected  then 
x.connected else 
y.connected in 
let s=if pickOption min  x.static  y.static  then 
x.static else 
y.static in 
let o=if pickOption betterOspf  x.ospf  y.ospf  then 
x.ospf else 
y.ospf in 
let b=if pickOption betterBgp  x.bgp  y.bgp  then 
x.bgp else 
y.bgp in 
{  bgp= b; connected= c; ospf= o; selected= best c  s  o  b ; static= s; } ) )
let transferBgp = (fun e -> (fun x0 -> (match x0.selected with 
 | None -> None
 | Some prot -> let b=if prot = 3u2 then 
(match x0.bgp with 
 | None -> {  aslen= 0u32; bgpAd= 20u8; comms= createDict false; lp= 100u32; med= 80u32; }
 | Some b -> b
) else 
{  aslen= 0u32; bgpAd= 20u8; comms= createDict false; lp= 100u32; med= 80u32; } in 
let b=tagDown e  b  in 
(match e with 
 | 0n~18n -> (match d with 
 | (prefix,prefixLen) -> let b=if prefixLen = 24u6 && 1174408960u32 <=u32 prefix && prefix <u32 1174409216u32 then 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms; lp= b.lp; med= b.med; } else 
if isProtocol prot  3u2  then 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms; lp= b.lp; med= b.med; } else 
None in 
b
)
 | 0n~17n -> (match d with 
 | (prefix,prefixLen) -> let b=if prefixLen = 24u6 && 1174408960u32 <=u32 prefix && prefix <u32 1174409216u32 then 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms; lp= b.lp; med= b.med; } else 
if isProtocol prot  3u2  then 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms; lp= b.lp; med= b.med; } else 
None in 
b
)
 | 1n~18n -> (match d with 
 | (prefix,prefixLen) -> let b=if isProtocol prot  3u2  then 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms; lp= b.lp; med= b.med; } else 
None in 
b
)
 | 1n~16n -> (match d with 
 | (prefix,prefixLen) -> let b=if isProtocol prot  3u2  then 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms; lp= b.lp; med= b.med; } else 
None in 
b
)
 | 1n~14n -> (match d with 
 | (prefix,prefixLen) -> let b=if isProtocol prot  3u2  then 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms; lp= b.lp; med= b.med; } else 
None in 
b
)
 | 1n~8n -> (match d with 
 | (prefix,prefixLen) -> let b=if isProtocol prot  3u2  then 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms; lp= b.lp; med= b.med; } else 
None in 
b
)
 | 2n~6n -> (match d with 
 | (prefix,prefixLen) -> let b=if prefixLen = 24u6 && 1174409728u32 <=u32 prefix && prefix <u32 1174409984u32 then 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms; lp= b.lp; med= b.med; } else 
if isProtocol prot  3u2  then 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms; lp= b.lp; med= b.med; } else 
None in 
b
)
 | 2n~8n -> (match d with 
 | (prefix,prefixLen) -> let b=if prefixLen = 24u6 && 1174409728u32 <=u32 prefix && prefix <u32 1174409984u32 then 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms; lp= b.lp; med= b.med; } else 
if isProtocol prot  3u2  then 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms; lp= b.lp; med= b.med; } else 
None in 
b
)
 | 3n~16n -> (match d with 
 | (prefix,prefixLen) -> let b=if isProtocol prot  3u2  then 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms; lp= b.lp; med= b.med; } else 
None in 
b
)
 | 3n~18n -> (match d with 
 | (prefix,prefixLen) -> let b=if isProtocol prot  3u2  then 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms; lp= b.lp; med= b.med; } else 
None in 
b
)
 | 3n~14n -> (match d with 
 | (prefix,prefixLen) -> let b=if isProtocol prot  3u2  then 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms; lp= b.lp; med= b.med; } else 
None in 
b
)
 | 3n~8n -> (match d with 
 | (prefix,prefixLen) -> let b=if isProtocol prot  3u2  then 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms; lp= b.lp; med= b.med; } else 
None in 
b
)
 | 4n~15n -> (match d with 
 | (prefix,prefixLen) -> let b=if isProtocol prot  3u2  then 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms; lp= b.lp; med= b.med; } else 
None in 
b
)
 | 4n~17n -> (match d with 
 | (prefix,prefixLen) -> let b=if isProtocol prot  3u2  then 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms; lp= b.lp; med= b.med; } else 
None in 
b
)
 | 4n~13n -> (match d with 
 | (prefix,prefixLen) -> let b=if isProtocol prot  3u2  then 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms; lp= b.lp; med= b.med; } else 
None in 
b
)
 | 4n~6n -> (match d with 
 | (prefix,prefixLen) -> let b=if isProtocol prot  3u2  then 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms; lp= b.lp; med= b.med; } else 
None in 
b
)
 | 5n~16n -> (match d with 
 | (prefix,prefixLen) -> let b=if prefixLen = 24u6 && 1174407936u32 <=u32 prefix && prefix <u32 1174408192u32 then 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms; lp= b.lp; med= b.med; } else 
if isProtocol prot  3u2  then 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms; lp= b.lp; med= b.med; } else 
None in 
b
)
 | 5n~15n -> (match d with 
 | (prefix,prefixLen) -> let b=if prefixLen = 24u6 && 1174407936u32 <=u32 prefix && prefix <u32 1174408192u32 then 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms; lp= b.lp; med= b.med; } else 
if isProtocol prot  3u2  then 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms; lp= b.lp; med= b.med; } else 
None in 
b
)
 | 6n~7n -> (match d with 
 | (prefix,prefixLen) -> let b=if isProtocol prot  3u2  then 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms; lp= b.lp; med= b.med; } else 
None in 
b
)
 | 6n~2n -> (match d with 
 | (prefix,prefixLen) -> let b=if isProtocol prot  3u2  then 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms; lp= b.lp; med= b.med; } else 
None in 
b
)
 | 6n~4n -> (match d with 
 | (prefix,prefixLen) -> let b=if isProtocol prot  3u2  then 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms; lp= b.lp; med= b.med; } else 
None in 
b
)
 | 6n~10n -> (match d with 
 | (prefix,prefixLen) -> let b=if isProtocol prot  3u2  then 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms; lp= b.lp; med= b.med; } else 
None in 
b
)
 | 7n~13n -> (match d with 
 | (prefix,prefixLen) -> let b=if isProtocol prot  3u2  then 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms; lp= b.lp; med= b.med; } else 
None in 
b
)
 | 7n~17n -> (match d with 
 | (prefix,prefixLen) -> let b=if isProtocol prot  3u2  then 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms; lp= b.lp; med= b.med; } else 
None in 
b
)
 | 7n~15n -> (match d with 
 | (prefix,prefixLen) -> let b=if isProtocol prot  3u2  then 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms; lp= b.lp; med= b.med; } else 
None in 
b
)
 | 7n~6n -> (match d with 
 | (prefix,prefixLen) -> let b=if isProtocol prot  3u2  then 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms; lp= b.lp; med= b.med; } else 
None in 
b
)
 | 8n~1n -> (match d with 
 | (prefix,prefixLen) -> let b=if isProtocol prot  3u2  then 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms; lp= b.lp; med= b.med; } else 
None in 
b
)
 | 8n~10n -> (match d with 
 | (prefix,prefixLen) -> let b=if isProtocol prot  3u2  then 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms; lp= b.lp; med= b.med; } else 
None in 
b
)
 | 8n~3n -> (match d with 
 | (prefix,prefixLen) -> let b=if isProtocol prot  3u2  then 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms; lp= b.lp; med= b.med; } else 
None in 
b
)
 | 8n~2n -> (match d with 
 | (prefix,prefixLen) -> let b=if isProtocol prot  3u2  then 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms; lp= b.lp; med= b.med; } else 
None in 
b
)
 | 9n~18n -> (match d with 
 | (prefix,prefixLen) -> let b=if prefixLen = 24u6 && 1174408704u32 <=u32 prefix && prefix <u32 1174408960u32 then 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms; lp= b.lp; med= b.med; } else 
if isProtocol prot  3u2  then 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms; lp= b.lp; med= b.med; } else 
None in 
b
)
 | 9n~17n -> (match d with 
 | (prefix,prefixLen) -> let b=if prefixLen = 24u6 && 1174408704u32 <=u32 prefix && prefix <u32 1174408960u32 then 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms; lp= b.lp; med= b.med; } else 
if isProtocol prot  3u2  then 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms; lp= b.lp; med= b.med; } else 
None in 
b
)
 | 10n~8n -> (match d with 
 | (prefix,prefixLen) -> let b=if prefixLen = 24u6 && 1174409984u32 <=u32 prefix && prefix <u32 1174410240u32 then 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms; lp= b.lp; med= b.med; } else 
if isProtocol prot  3u2  then 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms; lp= b.lp; med= b.med; } else 
None in 
b
)
 | 10n~6n -> (match d with 
 | (prefix,prefixLen) -> let b=if prefixLen = 24u6 && 1174409984u32 <=u32 prefix && prefix <u32 1174410240u32 then 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms; lp= b.lp; med= b.med; } else 
if isProtocol prot  3u2  then 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms; lp= b.lp; med= b.med; } else 
None in 
b
)
 | 11n~13n -> (match d with 
 | (prefix,prefixLen) -> let b=if prefixLen = 24u6 && 1174406656u32 <=u32 prefix && prefix <u32 1174406912u32 then 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms; lp= b.lp; med= b.med; } else 
if isProtocol prot  3u2  then 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms; lp= b.lp; med= b.med; } else 
None in 
b
)
 | 11n~14n -> (match d with 
 | (prefix,prefixLen) -> let b=if prefixLen = 24u6 && 1174406656u32 <=u32 prefix && prefix <u32 1174406912u32 then 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms; lp= b.lp; med= b.med; } else 
if isProtocol prot  3u2  then 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms; lp= b.lp; med= b.med; } else 
None in 
b
)
 | 12n~13n -> (match d with 
 | (prefix,prefixLen) -> let b=if prefixLen = 24u6 && 1174406912u32 <=u32 prefix && prefix <u32 1174407168u32 then 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms; lp= b.lp; med= b.med; } else 
if isProtocol prot  3u2  then 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms; lp= b.lp; med= b.med; } else 
None in 
b
)
 | 12n~14n -> (match d with 
 | (prefix,prefixLen) -> let b=if prefixLen = 24u6 && 1174406912u32 <=u32 prefix && prefix <u32 1174407168u32 then 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms; lp= b.lp; med= b.med; } else 
if isProtocol prot  3u2  then 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms; lp= b.lp; med= b.med; } else 
None in 
b
)
 | 13n~7n -> (match d with 
 | (prefix,prefixLen) -> let b=if isProtocol prot  3u2  then 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms; lp= b.lp; med= b.med; } else 
None in 
b
)
 | 13n~12n -> (match d with 
 | (prefix,prefixLen) -> let b=if isProtocol prot  3u2  then 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms; lp= b.lp; med= b.med; } else 
None in 
b
)
 | 13n~11n -> (match d with 
 | (prefix,prefixLen) -> let b=if isProtocol prot  3u2  then 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms; lp= b.lp; med= b.med; } else 
None in 
b
)
 | 13n~4n -> (match d with 
 | (prefix,prefixLen) -> let b=if isProtocol prot  3u2  then 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms; lp= b.lp; med= b.med; } else 
None in 
b
)
 | 14n~12n -> (match d with 
 | (prefix,prefixLen) -> let b=if isProtocol prot  3u2  then 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms; lp= b.lp; med= b.med; } else 
None in 
b
)
 | 14n~3n -> (match d with 
 | (prefix,prefixLen) -> let b=if isProtocol prot  3u2  then 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms; lp= b.lp; med= b.med; } else 
None in 
b
)
 | 14n~1n -> (match d with 
 | (prefix,prefixLen) -> let b=if isProtocol prot  3u2  then 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms; lp= b.lp; med= b.med; } else 
None in 
b
)
 | 14n~11n -> (match d with 
 | (prefix,prefixLen) -> let b=if isProtocol prot  3u2  then 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms; lp= b.lp; med= b.med; } else 
None in 
b
)
 | 15n~7n -> (match d with 
 | (prefix,prefixLen) -> let b=if isProtocol prot  3u2  then 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms; lp= b.lp; med= b.med; } else 
None in 
b
)
 | 15n~4n -> (match d with 
 | (prefix,prefixLen) -> let b=if isProtocol prot  3u2  then 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms; lp= b.lp; med= b.med; } else 
None in 
b
)
 | 15n~19n -> (match d with 
 | (prefix,prefixLen) -> let b=if isProtocol prot  3u2  then 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms; lp= b.lp; med= b.med; } else 
None in 
b
)
 | 15n~5n -> (match d with 
 | (prefix,prefixLen) -> let b=if isProtocol prot  3u2  then 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms; lp= b.lp; med= b.med; } else 
None in 
b
)
 | 16n~3n -> (match d with 
 | (prefix,prefixLen) -> let b=if isProtocol prot  3u2  then 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms; lp= b.lp; med= b.med; } else 
None in 
b
)
 | 16n~19n -> (match d with 
 | (prefix,prefixLen) -> let b=if isProtocol prot  3u2  then 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms; lp= b.lp; med= b.med; } else 
None in 
b
)
 | 16n~1n -> (match d with 
 | (prefix,prefixLen) -> let b=if isProtocol prot  3u2  then 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms; lp= b.lp; med= b.med; } else 
None in 
b
)
 | 16n~5n -> (match d with 
 | (prefix,prefixLen) -> let b=if isProtocol prot  3u2  then 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms; lp= b.lp; med= b.med; } else 
None in 
b
)
 | 17n~9n -> (match d with 
 | (prefix,prefixLen) -> let b=if isProtocol prot  3u2  then 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms; lp= b.lp; med= b.med; } else 
None in 
b
)
 | 17n~7n -> (match d with 
 | (prefix,prefixLen) -> let b=if isProtocol prot  3u2  then 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms; lp= b.lp; med= b.med; } else 
None in 
b
)
 | 17n~4n -> (match d with 
 | (prefix,prefixLen) -> let b=if isProtocol prot  3u2  then 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms; lp= b.lp; med= b.med; } else 
None in 
b
)
 | 17n~0n -> (match d with 
 | (prefix,prefixLen) -> let b=if isProtocol prot  3u2  then 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms; lp= b.lp; med= b.med; } else 
None in 
b
)
 | 18n~1n -> (match d with 
 | (prefix,prefixLen) -> let b=if isProtocol prot  3u2  then 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms; lp= b.lp; med= b.med; } else 
None in 
b
)
 | 18n~3n -> (match d with 
 | (prefix,prefixLen) -> let b=if isProtocol prot  3u2  then 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms; lp= b.lp; med= b.med; } else 
None in 
b
)
 | 18n~0n -> (match d with 
 | (prefix,prefixLen) -> let b=if isProtocol prot  3u2  then 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms; lp= b.lp; med= b.med; } else 
None in 
b
)
 | 18n~9n -> (match d with 
 | (prefix,prefixLen) -> let b=if isProtocol prot  3u2  then 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms; lp= b.lp; med= b.med; } else 
None in 
b
)
 | 19n~16n -> (match d with 
 | (prefix,prefixLen) -> let b=if prefixLen = 24u6 && 1174407680u32 <=u32 prefix && prefix <u32 1174407936u32 then 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms; lp= b.lp; med= b.med; } else 
if isProtocol prot  3u2  then 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms; lp= b.lp; med= b.med; } else 
None in 
b
)
 | 19n~15n -> (match d with 
 | (prefix,prefixLen) -> let b=if prefixLen = 24u6 && 1174407680u32 <=u32 prefix && prefix <u32 1174407936u32 then 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms; lp= b.lp; med= b.med; } else 
if isProtocol prot  3u2  then 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms; lp= b.lp; med= b.med; } else 
None in 
b
)
)
) ) )
let transferOspf = (fun edge -> (fun o -> (match o with 
 | None -> None
 | Some o -> (match edge with 
 | _ -> None
)
) ) )
let init = (fun node -> (match node with 
 | 0n -> if d = (1174408962u32,31u6) || d = (1174408960u32,32u6) || d = (167774976u32,31u6) || d = (167774464u32,31u6) || d = (1174408960u32,31u6) then 
let c=Some 0u8 in 
let s=None in 
let o=None in 
let b=None in 
let fib=best c  s  o  b  in 
{  bgp= b; connected= c; ospf= o; selected= fib; static= s; } else 
if d = (1174408960u32,24u6) then 
let c=None in 
let s=Some 1u8 in 
let o=None in 
let b=Some {  aslen= 0u32; bgpAd= 20u8; comms= createDict false; lp= 100u32; med= 80u32; } in 
let fib=best c  s  o  b  in 
{  bgp= b; connected= c; ospf= o; selected= fib; static= s; } else 
{  bgp= None; connected= None; ospf= None; selected= None; static= None; }
 | 1n -> if d = (167778048u32,31u6) || d = (167777280u32,31u6) || d = (167777792u32,31u6) || d = (167777536u32,31u6) || d = (1174405376u32,32u6) then 
let c=Some 0u8 in 
let s=None in 
let o=None in 
let b=None in 
let fib=best c  s  o  b  in 
{  bgp= b; connected= c; ospf= o; selected= fib; static= s; } else 
{  bgp= None; connected= None; ospf= None; selected= None; static= None; }
 | 2n -> if d = (1174409728u32,31u6) || d = (1174409728u32,32u6) || d = (1174409730u32,31u6) || d = (167775744u32,31u6) || d = (167775232u32,31u6) then 
let c=Some 0u8 in 
let s=None in 
let o=None in 
let b=None in 
let fib=best c  s  o  b  in 
{  bgp= b; connected= c; ospf= o; selected= fib; static= s; } else 
if d = (1174409728u32,24u6) then 
let c=None in 
let s=Some 1u8 in 
let o=None in 
let b=Some {  aslen= 0u32; bgpAd= 20u8; comms= createDict false; lp= 100u32; med= 80u32; } in 
let fib=best c  s  o  b  in 
{  bgp= b; connected= c; ospf= o; selected= fib; static= s; } else 
{  bgp= None; connected= None; ospf= None; selected= None; static= None; }
 | 3n -> if d = (167777024u32,31u6) || d = (167776768u32,31u6) || d = (167776512u32,31u6) || d = (167776256u32,31u6) || d = (1174405120u32,32u6) then 
let c=Some 0u8 in 
let s=None in 
let o=None in 
let b=None in 
let fib=best c  s  o  b  in 
{  bgp= b; connected= c; ospf= o; selected= fib; static= s; } else 
{  bgp= None; connected= None; ospf= None; selected= None; static= None; }
 | 4n -> if d = (167779840u32,31u6) || d = (167779328u32,31u6) || d = (167780096u32,31u6) || d = (167779584u32,31u6) || d = (1174405888u32,32u6) then 
let c=Some 0u8 in 
let s=None in 
let o=None in 
let b=None in 
let fib=best c  s  o  b  in 
{  bgp= b; connected= c; ospf= o; selected= fib; static= s; } else 
{  bgp= None; connected= None; ospf= None; selected= None; static= None; }
 | 5n -> if d = (1174407938u32,31u6) || d = (167773952u32,31u6) || d = (167773440u32,31u6) || d = (1174407936u32,32u6) || d = (1174407936u32,31u6) then 
let c=Some 0u8 in 
let s=None in 
let o=None in 
let b=None in 
let fib=best c  s  o  b  in 
{  bgp= b; connected= c; ospf= o; selected= fib; static= s; } else 
if d = (1174407936u32,24u6) then 
let c=None in 
let s=Some 1u8 in 
let o=None in 
let b=Some {  aslen= 0u32; bgpAd= 20u8; comms= createDict false; lp= 100u32; med= 80u32; } in 
let fib=best c  s  o  b  in 
{  bgp= b; connected= c; ospf= o; selected= fib; static= s; } else 
{  bgp= None; connected= None; ospf= None; selected= None; static= None; }
 | 6n -> if d = (167779072u32,31u6) || d = (167780096u32,31u6) || d = (1174409472u32,32u6) || d = (167776000u32,31u6) || d = (167775744u32,31u6) then 
let c=Some 0u8 in 
let s=None in 
let o=None in 
let b=None in 
let fib=best c  s  o  b  in 
{  bgp= b; connected= c; ospf= o; selected= fib; static= s; } else 
{  bgp= None; connected= None; ospf= None; selected= None; static= None; }
 | 7n -> if d = (167778304u32,31u6) || d = (167778816u32,31u6) || d = (167779072u32,31u6) || d = (167778560u32,31u6) || d = (1174405632u32,32u6) then 
let c=Some 0u8 in 
let s=None in 
let o=None in 
let b=None in 
let fib=best c  s  o  b  in 
{  bgp= b; connected= c; ospf= o; selected= fib; static= s; } else 
{  bgp= None; connected= None; ospf= None; selected= None; static= None; }
 | 8n -> if d = (167778048u32,31u6) || d = (167777024u32,31u6) || d = (1174409216u32,32u6) || d = (167775488u32,31u6) || d = (167775232u32,31u6) then 
let c=Some 0u8 in 
let s=None in 
let o=None in 
let b=None in 
let fib=best c  s  o  b  in 
{  bgp= b; connected= c; ospf= o; selected= fib; static= s; } else 
{  bgp= None; connected= None; ospf= None; selected= None; static= None; }
 | 9n -> if d = (1174408706u32,31u6) || d = (167774208u32,31u6) || d = (1174408704u32,32u6) || d = (167774720u32,31u6) || d = (1174408704u32,31u6) then 
let c=Some 0u8 in 
let s=None in 
let o=None in 
let b=None in 
let fib=best c  s  o  b  in 
{  bgp= b; connected= c; ospf= o; selected= fib; static= s; } else 
if d = (1174408704u32,24u6) then 
let c=None in 
let s=Some 1u8 in 
let o=None in 
let b=Some {  aslen= 0u32; bgpAd= 20u8; comms= createDict false; lp= 100u32; med= 80u32; } in 
let fib=best c  s  o  b  in 
{  bgp= b; connected= c; ospf= o; selected= fib; static= s; } else 
{  bgp= None; connected= None; ospf= None; selected= None; static= None; }
 | 10n -> if d = (1174409984u32,31u6) || d = (1174409984u32,32u6) || d = (1174409986u32,31u6) || d = (167776000u32,31u6) || d = (167775488u32,31u6) then 
let c=Some 0u8 in 
let s=None in 
let o=None in 
let b=None in 
let fib=best c  s  o  b  in 
{  bgp= b; connected= c; ospf= o; selected= fib; static= s; } else 
if d = (1174409984u32,24u6) then 
let c=None in 
let s=Some 1u8 in 
let o=None in 
let b=Some {  aslen= 0u32; bgpAd= 20u8; comms= createDict false; lp= 100u32; med= 80u32; } in 
let fib=best c  s  o  b  in 
{  bgp= b; connected= c; ospf= o; selected= fib; static= s; } else 
{  bgp= None; connected= None; ospf= None; selected= None; static= None; }
 | 11n -> if d = (1174406658u32,31u6) || d = (167772672u32,31u6) || d = (167772160u32,31u6) || d = (1174406656u32,31u6) || d = (1174406656u32,32u6) then 
let c=Some 0u8 in 
let s=None in 
let o=None in 
let b=None in 
let fib=best c  s  o  b  in 
{  bgp= b; connected= c; ospf= o; selected= fib; static= s; } else 
if d = (1174406656u32,24u6) then 
let c=None in 
let s=Some 1u8 in 
let o=None in 
let b=Some {  aslen= 0u32; bgpAd= 20u8; comms= createDict false; lp= 100u32; med= 80u32; } in 
let fib=best c  s  o  b  in 
{  bgp= b; connected= c; ospf= o; selected= fib; static= s; } else 
{  bgp= None; connected= None; ospf= None; selected= None; static= None; }
 | 12n -> if d = (1174406914u32,31u6) || d = (167772928u32,31u6) || d = (167772416u32,31u6) || d = (1174406912u32,31u6) || d = (1174406912u32,32u6) then 
let c=Some 0u8 in 
let s=None in 
let o=None in 
let b=None in 
let fib=best c  s  o  b  in 
{  bgp= b; connected= c; ospf= o; selected= fib; static= s; } else 
if d = (1174406912u32,24u6) then 
let c=None in 
let s=Some 1u8 in 
let o=None in 
let b=Some {  aslen= 0u32; bgpAd= 20u8; comms= createDict false; lp= 100u32; med= 80u32; } in 
let fib=best c  s  o  b  in 
{  bgp= b; connected= c; ospf= o; selected= fib; static= s; } else 
{  bgp= None; connected= None; ospf= None; selected= None; static= None; }
 | 13n -> if d = (167778304u32,31u6) || d = (167779328u32,31u6) || d = (167772928u32,31u6) || d = (167772672u32,31u6) || d = (1174406400u32,32u6) then 
let c=Some 0u8 in 
let s=None in 
let o=None in 
let b=None in 
let fib=best c  s  o  b  in 
{  bgp= b; connected= c; ospf= o; selected= fib; static= s; } else 
{  bgp= None; connected= None; ospf= None; selected= None; static= None; }
 | 14n -> if d = (167777280u32,31u6) || d = (167772416u32,31u6) || d = (167772160u32,31u6) || d = (167776256u32,31u6) || d = (1174406144u32,32u6) then 
let c=Some 0u8 in 
let s=None in 
let o=None in 
let b=None in 
let fib=best c  s  o  b  in 
{  bgp= b; connected= c; ospf= o; selected= fib; static= s; } else 
{  bgp= None; connected= None; ospf= None; selected= None; static= None; }
 | 15n -> if d = (167778560u32,31u6) || d = (167779584u32,31u6) || d = (167773952u32,31u6) || d = (167773696u32,31u6) || d = (1174407424u32,32u6) then 
let c=Some 0u8 in 
let s=None in 
let o=None in 
let b=None in 
let fib=best c  s  o  b  in 
{  bgp= b; connected= c; ospf= o; selected= fib; static= s; } else 
{  bgp= None; connected= None; ospf= None; selected= None; static= None; }
 | 16n -> if d = (167777536u32,31u6) || d = (167776512u32,31u6) || d = (167773440u32,31u6) || d = (167773184u32,31u6) || d = (1174407168u32,32u6) then 
let c=Some 0u8 in 
let s=None in 
let o=None in 
let b=None in 
let fib=best c  s  o  b  in 
{  bgp= b; connected= c; ospf= o; selected= fib; static= s; } else 
{  bgp= None; connected= None; ospf= None; selected= None; static= None; }
 | 17n -> if d = (167779840u32,31u6) || d = (167778816u32,31u6) || d = (1174408448u32,32u6) || d = (167774976u32,31u6) || d = (167774720u32,31u6) then 
let c=Some 0u8 in 
let s=None in 
let o=None in 
let b=None in 
let fib=best c  s  o  b  in 
{  bgp= b; connected= c; ospf= o; selected= fib; static= s; } else 
{  bgp= None; connected= None; ospf= None; selected= None; static= None; }
 | 18n -> if d = (167777792u32,31u6) || d = (167776768u32,31u6) || d = (167774208u32,31u6) || d = (1174408192u32,32u6) || d = (167774464u32,31u6) then 
let c=Some 0u8 in 
let s=None in 
let o=None in 
let b=None in 
let fib=best c  s  o  b  in 
{  bgp= b; connected= c; ospf= o; selected= fib; static= s; } else 
{  bgp= None; connected= None; ospf= None; selected= None; static= None; }
 | 19n -> if d = (1174407682u32,31u6) || d = (167773696u32,31u6) || d = (167773184u32,31u6) || d = (1174407680u32,32u6) || d = (1174407680u32,31u6) then 
let c=Some 0u8 in 
let s=None in 
let o=None in 
let b=None in 
let fib=best c  s  o  b  in 
{  bgp= b; connected= c; ospf= o; selected= fib; static= s; } else 
if d = (1174407680u32,24u6) then 
let c=None in 
let s=Some 1u8 in 
let o=None in 
let b=Some {  aslen= 0u32; bgpAd= 20u8; comms= createDict false; lp= 100u32; med= 80u32; } in 
let fib=best c  s  o  b  in 
{  bgp= b; connected= c; ospf= o; selected= fib; static= s; } else 
{  bgp= None; connected= None; ospf= None; selected= None; static= None; }
 | _ -> {  bgp= None; connected= None; ospf= None; selected= None; static= None; }
) )
let merge = (fun node -> (fun x -> (fun y -> mergeValues x  y  ) ) )
let trans = (fun edge -> (fun x -> let o=transferOspf edge  x.ospf  in 
let b=transferBgp edge  x  in 
let x=({  bgp= b; connected= None; ospf= o; selected= None; static= None; } : {  bgp: option[{  aslen: int32; bgpAd: int8; comms: dict[int32,bool]; lp: int32; med: int32; }]; connected: option[int8]; ospf: option[{  areaId: int32; areaType: int2; ospfAd: int8; weight: int16; }]; selected: option[int2]; static: option[int8]; }) in 
let b=(match x.bgp with 
 | Some b -> if b.comms[0u32] then 
None else 
Some b
 | None -> None
) in 
{  bgp= b; connected= None; ospf= o; selected= None; static= None; } ) )
let assert_node = (fun node -> (fun x -> if d = (1174409984u32,24u6) then 
(match x.selected with 
 | None -> false
 | _ -> (match x.bgp with 
 | None -> false
 | Some b -> ! (b.comms[0u32])
)
) else 
true ) )
let sol = solution { init = init; trans = trans; merge = merge; interface = interface; rtrans = trans }
let edges = {5n-15n;4n-6n;1n-16n;14n-12n;12n-14n;19n-15n;4n-15n;16n-3n;16n-1n;13n-11n;17n-9n;3n-8n;17n-7n;12n-13n;11n-14n;15n-7n;1n-18n;10n-6n;8n-10n;14n-1n;4n-17n;7n-13n;0n-17n;18n-9n;17n-4n;8n-3n;2n-8n;1n-14n;15n-19n;18n-1n;2n-6n;13n-4n;6n-10n;9n-17n;3n-18n;11n-13n;14n-11n;16n-19n;13n-7n;16n-5n;7n-6n;0n-18n;15n-4n;7n-17n;6n-2n;5n-16n;10n-8n;18n-0n;15n-5n;7n-15n;1n-8n;18n-3n;3n-14n;8n-2n;17n-0n;9n-18n;4n-13n;6n-4n;14n-3n;19n-16n;6n-7n;8n-1n;13n-12n;3n-16n;}
let nodes = 20
assert foldNodes ((fun k -> (fun v -> (fun acc -> acc && assert_node k  v  ) ) )) sol true
let protoStatic = 1u8
let protoOspf = 2u8
let protoConn = 0u8
let protoBgp = 3u8
let ospfIntraArea = 0u2
let ospfInterArea = 1u2
let ospfE2 = 3u2
let ospfE1 = 2u2
let node_to_int = (fun node -> (match node with 
 | 19n -> 19u32
 | 18n -> 18u32
 | 17n -> 17u32
 | 16n -> 16u32
 | 15n -> 15u32
 | 14n -> 14u32
 | 13n -> 13u32
 | 12n -> 12u32
 | 11n -> 11u32
 | 10n -> 10u32
 | 9n -> 9u32
 | 8n -> 8u32
 | 7n -> 7u32
 | 6n -> 6u32
 | 5n -> 5u32
 | 4n -> 4u32
 | 3n -> 3u32
 | 2n -> 2u32
 | 1n -> 1u32
 | 0n -> 0u32
) )
let tagDown = (fun e -> (fun b -> (match down with 
 | None -> b
 | Some d -> {  aslen= b.aslen; bgpAd= b.bgpAd; comms= (match e with 
 | u~_ -> if (node_to_int u ) = d then 
b.comms[0u32:=true] else 
b.comms
); lp= b.lp; med= b.med; }
) ) )
symbolic down : option[int32]
require ! (down = (Some 10u32))
(* {edge=0, core=1, edge=2, core=3, core=4, edge=5, aggregation=6, core=7, aggregation=8, edge=9, edge=10, edge=11, edge=12, aggregation=13, aggregation=14, aggregation=15, aggregation=16, aggregation=17, aggregation=18, edge=19} *)

let partition node = match node with
  | 2n -> 0
  | 6n -> 0
  | 8n -> 0
  | 10n -> 0
  | 1n -> 1
  | 3n -> 1
  | 4n -> 1
  | 7n -> 1
  | 0n -> 2
  | 5n -> 2
  | 9n -> 2
  | 11n -> 2
  | 12n -> 2
  | 13n -> 2
  | 14n -> 2
  | 15n -> 2
  | 16n -> 2
  | 17n -> 2
  | 18n -> 2
  | 19n -> 2

let interface edge a =
  match edge with
  | 1~8 -> a = {  bgp= Some {  aslen=if down = Some(8) then 6 else 2; bgpAd= 20u8; comms= { _ |-> false }; lp= 100u32; med= 80u32; }; connected= None; ospf= None; selected= Some 3u2; static= None; }
  | 1~14 -> a = {  bgp= Some {  aslen=if down = Some(8) then 6 else 2; bgpAd= 20u8; comms= { _ |-> false }; lp= 100u32; med= 80u32; }; connected= None; ospf= None; selected= Some 3u2; static= None; }
  | 1~16 -> a = {  bgp= Some {  aslen=if down = Some(8) then 6 else 2; bgpAd= 20u8; comms= { _ |-> false }; lp= 100u32; med= 80u32; }; connected= None; ospf= None; selected= Some 3u2; static= None; }
  | 1~18 -> a = {  bgp= Some {  aslen=if down = Some(8) then 6 else 2; bgpAd= 20u8; comms= { _ |-> false }; lp= 100u32; med= 80u32; }; connected= None; ospf= None; selected= Some 3u2; static= None; }
  | 3~8 -> a = {  bgp= Some {  aslen=if down = Some(8) then 6 else 2; bgpAd= 20u8; comms= { _ |-> false }; lp= 100u32; med= 80u32; }; connected= None; ospf= None; selected= Some 3u2; static= None; }
  | 3~14 -> a = {  bgp= Some {  aslen=if down = Some(8) then 6 else 2; bgpAd= 20u8; comms= { _ |-> false }; lp= 100u32; med= 80u32; }; connected= None; ospf= None; selected= Some 3u2; static= None; }
  | 3~16 -> a = {  bgp= Some {  aslen=if down = Some(8) then 6 else 2; bgpAd= 20u8; comms= { _ |-> false }; lp= 100u32; med= 80u32; }; connected= None; ospf= None; selected= Some 3u2; static= None; }
  | 3~18 -> a = {  bgp= Some {  aslen=if down = Some(8) then 6 else 2; bgpAd= 20u8; comms= { _ |-> false }; lp= 100u32; med= 80u32; }; connected= None; ospf= None; selected= Some 3u2; static= None; }
  | 4~6 -> a = {  bgp= Some {  aslen=if down = Some(6) then 6 else 2; bgpAd= 20u8; comms= { _ |-> false }; lp= 100u32; med= 80u32; }; connected= None; ospf= None; selected= Some 3u2; static= None; }
  | 4~13 -> a = {  bgp= Some {  aslen=if down = Some(6) then 6 else 2; bgpAd= 20u8; comms= { _ |-> false }; lp= 100u32; med= 80u32; }; connected= None; ospf= None; selected= Some 3u2; static= None; }
  | 4~15 -> a = {  bgp= Some {  aslen=if down = Some(6) then 6 else 2; bgpAd= 20u8; comms= { _ |-> false }; lp= 100u32; med= 80u32; }; connected= None; ospf= None; selected= Some 3u2; static= None; }
  | 4~17 -> a = {  bgp= Some {  aslen=if down = Some(6) then 6 else 2; bgpAd= 20u8; comms= { _ |-> false }; lp= 100u32; med= 80u32; }; connected= None; ospf= None; selected= Some 3u2; static= None; }
  | 6~4 -> a = {  bgp= Some {  aslen=1; bgpAd= 20u8; comms= { _ |-> false }; lp= 100u32; med= 80u32; }; connected= None; ospf= None; selected= Some 3u2; static= None; }
  | 6~7 -> a = {  bgp= Some {  aslen=1; bgpAd= 20u8; comms= { _ |-> false }; lp= 100u32; med= 80u32; }; connected= None; ospf= None; selected= Some 3u2; static= None; }
  | 7~6 -> a = {  bgp= Some {  aslen=if down = Some(6) then 6 else 2; bgpAd= 20u8; comms= { _ |-> false }; lp= 100u32; med= 80u32; }; connected= None; ospf= None; selected= Some 3u2; static= None; }
  | 7~13 -> a = {  bgp= Some {  aslen=if down = Some(6) then 6 else 2; bgpAd= 20u8; comms= { _ |-> false }; lp= 100u32; med= 80u32; }; connected= None; ospf= None; selected= Some 3u2; static= None; }
  | 7~15 -> a = {  bgp= Some {  aslen=if down = Some(6) then 6 else 2; bgpAd= 20u8; comms= { _ |-> false }; lp= 100u32; med= 80u32; }; connected= None; ospf= None; selected= Some 3u2; static= None; }
  | 7~17 -> a = {  bgp= Some {  aslen=if down = Some(6) then 6 else 2; bgpAd= 20u8; comms= { _ |-> false }; lp= 100u32; med= 80u32; }; connected= None; ospf= None; selected= Some 3u2; static= None; }
  | 8~1 -> a = {  bgp= Some {  aslen=1; bgpAd= 20u8; comms= { _ |-> false }; lp= 100u32; med= 80u32; }; connected= None; ospf= None; selected= Some 3u2; static= None; }
  | 8~3 -> a = {  bgp= Some {  aslen=1; bgpAd= 20u8; comms= { _ |-> false }; lp= 100u32; med= 80u32; }; connected= None; ospf= None; selected= Some 3u2; static= None; }
  | 13~4 -> a = {  bgp= Some {  aslen=if down = Some(6) then 5 else 3; bgpAd= 20u8; comms= { _ |-> false }; lp= 100u32; med= 80u32; }; connected= None; ospf= None; selected= Some 3u2; static= None; }
  | 13~7 -> a = {  bgp= Some {  aslen=if down = Some(6) then 5 else 3; bgpAd= 20u8; comms= { _ |-> false }; lp= 100u32; med= 80u32; }; connected= None; ospf= None; selected= Some 3u2; static= None; }
  | 14~1 -> a = {  bgp= Some {  aslen=if down = Some(8) then 5 else 3; bgpAd= 20u8; comms= { _ |-> false }; lp= 100u32; med= 80u32; }; connected= None; ospf= None; selected= Some 3u2; static= None; }
  | 14~3 -> a = {  bgp= Some {  aslen=if down = Some(8) then 5 else 3; bgpAd= 20u8; comms= { _ |-> false }; lp= 100u32; med= 80u32; }; connected= None; ospf= None; selected= Some 3u2; static= None; }
  | 15~4 -> a = {  bgp= Some {  aslen=if down = Some(6) then 5 else 3; bgpAd= 20u8; comms= { _ |-> false }; lp= 100u32; med= 80u32; }; connected= None; ospf= None; selected= Some 3u2; static= None; }
  | 15~7 -> a = {  bgp= Some {  aslen=if down = Some(6) then 5 else 3; bgpAd= 20u8; comms= { _ |-> false }; lp= 100u32; med= 80u32; }; connected= None; ospf= None; selected= Some 3u2; static= None; }
  | 16~1 -> a = {  bgp= Some {  aslen=if down = Some(8) then 5 else 3; bgpAd= 20u8; comms= { _ |-> false }; lp= 100u32; med= 80u32; }; connected= None; ospf= None; selected= Some 3u2; static= None; }
  | 16~3 -> a = {  bgp= Some {  aslen=if down = Some(8) then 5 else 3; bgpAd= 20u8; comms= { _ |-> false }; lp= 100u32; med= 80u32; }; connected= None; ospf= None; selected= Some 3u2; static= None; }
  | 17~4 -> a = {  bgp= Some {  aslen=if down = Some(6) then 5 else 3; bgpAd= 20u8; comms= { _ |-> false }; lp= 100u32; med= 80u32; }; connected= None; ospf= None; selected= Some 3u2; static= None; }
  | 17~7 -> a = {  bgp= Some {  aslen=if down = Some(6) then 5 else 3; bgpAd= 20u8; comms= { _ |-> false }; lp= 100u32; med= 80u32; }; connected= None; ospf= None; selected= Some 3u2; static= None; }
  | 18~1 -> a = {  bgp= Some {  aslen=if down = Some(8) then 5 else 3; bgpAd= 20u8; comms= { _ |-> false }; lp= 100u32; med= 80u32; }; connected= None; ospf= None; selected= Some 3u2; static= None; }
  | 18~3 -> a = {  bgp= Some {  aslen=if down = Some(8) then 5 else 3; bgpAd= 20u8; comms= { _ |-> false }; lp= 100u32; med= 80u32; }; connected= None; ospf= None; selected= Some 3u2; static= None; }
