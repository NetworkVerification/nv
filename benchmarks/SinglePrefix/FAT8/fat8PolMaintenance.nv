type attribute = {  bgp: option[{  aslen: int32; bgpAd: int8; comms: dict[int32,bool]; lp: int32; med: int32; }]; connected: option[int8]; ospf: option[{  areaId: int32; areaType: int2; ospfAd: int8; weight: int16; }]; selected: option[int2]; static: option[int8]; }
type bgpType = {  aslen: int32; bgpAd: int8; comms: dict[int32,bool]; lp: int32; med: int32; }
type ospfType = {  areaId: int32; areaType: int2; ospfAd: int8; weight: int16; }
type rib = {  bgp: option[{  aslen: int32; bgpAd: int8; comms: dict[int32,bool]; lp: int32; med: int32; }]; connected: option[int8]; ospf: option[{  areaId: int32; areaType: int2; ospfAd: int8; weight: int16; }]; selected: option[int2]; static: option[int8]; }
let betterEqOption = (fun o1 -> (fun o2 -> (match (o1,o2) with 
 | (_,None) -> true
 | (None,_) -> false
 | (Some a,Some b) -> a <=u8 b
) ) )
let best = (fun c -> (fun s -> (fun o -> (fun b -> (match (c,s,o,b) with 
 | (None,None,None,None) -> None
 | _ -> let o=(match o with 
 | None -> None
 | Some o -> Some o.ospfAd
) in 
let b=(match b with 
 | None -> None
 | Some b -> Some b.bgpAd
) in 
(match if betterEqOption c  s  then 
(c,0u2) else 
(s,1u2) with 
 | (x,p1) -> (match if betterEqOption o  b  then 
(o,2u2) else 
(b,3u2) with 
 | (y,p2) -> Some if betterEqOption x  y  then 
p1 else 
p2
)
)
) ) ) ) )
let betterBgp = (fun b1 -> (fun b2 -> if b2.lp <u32 b1.lp then 
true else 
if b1.lp <u32 b2.lp then 
false else 
if b1.aslen <u32 b2.aslen then 
true else 
if b2.aslen <u32 b1.aslen then 
false else 
if b2.med <=u32 b1.med then 
true else 
false ) )
let betterOspf = (fun o1 -> (fun o2 -> if o2.areaType <u2 o1.areaType then 
true else 
if o1.areaType <u2 o2.areaType then 
false else 
if o1.weight <=u16 o2.weight then 
true else 
false ) )
let min = (fun x -> (fun y -> x <u8 y ) )
let pickOption = (fun f -> (fun x -> (fun y -> (match (x,y) with 
 | (None,_) -> false
 | (_,None) -> true
 | (Some a,Some b) -> f a  b 
) ) ) )
let d = (1174410240u32,24u6)
let isProtocol = (fun fib -> (fun x -> fib = x ) )
let mergeValues = (fun x -> (fun y -> let c=if pickOption min  x.connected  y.connected  then 
x.connected else 
y.connected in 
let s=if pickOption min  x.static  y.static  then 
x.static else 
y.static in 
let o=if pickOption betterOspf  x.ospf  y.ospf  then 
x.ospf else 
y.ospf in 
let b=if pickOption betterBgp  x.bgp  y.bgp  then 
x.bgp else 
y.bgp in 
{  bgp= b; connected= c; ospf= o; selected= best c  s  o  b ; static= s; } ) )
let transferBgp = (fun e -> (fun x0 -> (match x0.selected with 
 | None -> None
 | Some prot -> let b=if prot = 3u2 then 
(match x0.bgp with 
 | None -> {  aslen= 0u32; bgpAd= 20u8; comms= createDict false; lp= 100u32; med= 80u32; }
 | Some b -> b
) else 
{  aslen= 0u32; bgpAd= 20u8; comms= createDict false; lp= 100u32; med= 80u32; } in 
let b=tagDown e  b  in 
(match e with 
 | 0n~25n -> (match d with 
 | (prefix,prefixLen) -> let b=if prefixLen = 24u6 && 1174412288u32 <=u32 prefix && prefix <u32 1174412544u32 then 
if b.comms[131073u32] then 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[327681u32:=true]; lp= b.lp; med= b.med; } else 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[131073u32:=true]; lp= b.lp; med= b.med; } else 
if isProtocol prot  3u2  then 
if b.comms[131073u32] then 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[327681u32:=true]; lp= b.lp; med= b.med; } else 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[131073u32:=true]; lp= b.lp; med= b.med; } else 
None in 
(match b with 
 | None -> None
 | Some b -> if b.comms[262145u32] then 
None else 
Some {  aslen= b.aslen; bgpAd= b.bgpAd; comms= b.comms; lp= b.lp; med= b.med; }
)
)
 | 0n~28n -> (match d with 
 | (prefix,prefixLen) -> let b=if prefixLen = 24u6 && 1174412288u32 <=u32 prefix && prefix <u32 1174412544u32 then 
if b.comms[131073u32] then 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[327681u32:=true]; lp= b.lp; med= b.med; } else 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[131073u32:=true]; lp= b.lp; med= b.med; } else 
if isProtocol prot  3u2  then 
if b.comms[131073u32] then 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[327681u32:=true]; lp= b.lp; med= b.med; } else 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[131073u32:=true]; lp= b.lp; med= b.med; } else 
None in 
(match b with 
 | None -> None
 | Some b -> if b.comms[262145u32] then 
None else 
Some {  aslen= b.aslen; bgpAd= b.bgpAd; comms= b.comms; lp= b.lp; med= b.med; }
)
)
 | 0n~34n -> (match d with 
 | (prefix,prefixLen) -> let b=if prefixLen = 24u6 && 1174412288u32 <=u32 prefix && prefix <u32 1174412544u32 then 
if b.comms[131073u32] then 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[327681u32:=true]; lp= b.lp; med= b.med; } else 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[131073u32:=true]; lp= b.lp; med= b.med; } else 
if isProtocol prot  3u2  then 
if b.comms[131073u32] then 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[327681u32:=true]; lp= b.lp; med= b.med; } else 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[131073u32:=true]; lp= b.lp; med= b.med; } else 
None in 
(match b with 
 | None -> None
 | Some b -> if b.comms[262145u32] then 
None else 
Some {  aslen= b.aslen; bgpAd= b.bgpAd; comms= b.comms; lp= b.lp; med= b.med; }
)
)
 | 0n~32n -> (match d with 
 | (prefix,prefixLen) -> let b=if prefixLen = 24u6 && 1174412288u32 <=u32 prefix && prefix <u32 1174412544u32 then 
if b.comms[131073u32] then 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[327681u32:=true]; lp= b.lp; med= b.med; } else 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[131073u32:=true]; lp= b.lp; med= b.med; } else 
if isProtocol prot  3u2  then 
if b.comms[131073u32] then 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[327681u32:=true]; lp= b.lp; med= b.med; } else 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[131073u32:=true]; lp= b.lp; med= b.med; } else 
None in 
(match b with 
 | None -> None
 | Some b -> if b.comms[262145u32] then 
None else 
Some {  aslen= b.aslen; bgpAd= b.bgpAd; comms= b.comms; lp= b.lp; med= b.med; }
)
)
 | 1n~28n -> (match d with 
 | (prefix,prefixLen) -> let b=if prefixLen = 24u6 && 1174412544u32 <=u32 prefix && prefix <u32 1174412800u32 then 
if b.comms[131073u32] then 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[327681u32:=true]; lp= b.lp; med= b.med; } else 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[131073u32:=true]; lp= b.lp; med= b.med; } else 
if isProtocol prot  3u2  then 
if b.comms[131073u32] then 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[327681u32:=true]; lp= b.lp; med= b.med; } else 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[131073u32:=true]; lp= b.lp; med= b.med; } else 
None in 
(match b with 
 | None -> None
 | Some b -> if b.comms[262145u32] then 
None else 
Some {  aslen= b.aslen; bgpAd= b.bgpAd; comms= b.comms; lp= b.lp; med= b.med; }
)
)
 | 1n~25n -> (match d with 
 | (prefix,prefixLen) -> let b=if prefixLen = 24u6 && 1174412544u32 <=u32 prefix && prefix <u32 1174412800u32 then 
if b.comms[131073u32] then 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[327681u32:=true]; lp= b.lp; med= b.med; } else 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[131073u32:=true]; lp= b.lp; med= b.med; } else 
if isProtocol prot  3u2  then 
if b.comms[131073u32] then 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[327681u32:=true]; lp= b.lp; med= b.med; } else 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[131073u32:=true]; lp= b.lp; med= b.med; } else 
None in 
(match b with 
 | None -> None
 | Some b -> if b.comms[262145u32] then 
None else 
Some {  aslen= b.aslen; bgpAd= b.bgpAd; comms= b.comms; lp= b.lp; med= b.med; }
)
)
 | 1n~34n -> (match d with 
 | (prefix,prefixLen) -> let b=if prefixLen = 24u6 && 1174412544u32 <=u32 prefix && prefix <u32 1174412800u32 then 
if b.comms[131073u32] then 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[327681u32:=true]; lp= b.lp; med= b.med; } else 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[131073u32:=true]; lp= b.lp; med= b.med; } else 
if isProtocol prot  3u2  then 
if b.comms[131073u32] then 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[327681u32:=true]; lp= b.lp; med= b.med; } else 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[131073u32:=true]; lp= b.lp; med= b.med; } else 
None in 
(match b with 
 | None -> None
 | Some b -> if b.comms[262145u32] then 
None else 
Some {  aslen= b.aslen; bgpAd= b.bgpAd; comms= b.comms; lp= b.lp; med= b.med; }
)
)
 | 1n~32n -> (match d with 
 | (prefix,prefixLen) -> let b=if prefixLen = 24u6 && 1174412544u32 <=u32 prefix && prefix <u32 1174412800u32 then 
if b.comms[131073u32] then 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[327681u32:=true]; lp= b.lp; med= b.med; } else 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[131073u32:=true]; lp= b.lp; med= b.med; } else 
if isProtocol prot  3u2  then 
if b.comms[131073u32] then 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[327681u32:=true]; lp= b.lp; med= b.med; } else 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[131073u32:=true]; lp= b.lp; med= b.med; } else 
None in 
(match b with 
 | None -> None
 | Some b -> if b.comms[262145u32] then 
None else 
Some {  aslen= b.aslen; bgpAd= b.bgpAd; comms= b.comms; lp= b.lp; med= b.med; }
)
)
 | 2n~47n -> (match d with 
 | (prefix,prefixLen) -> let b=if prefixLen = 24u6 && 1174410752u32 <=u32 prefix && prefix <u32 1174411008u32 then 
if b.comms[131072u32] then 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[327680u32:=true]; lp= b.lp; med= b.med; } else 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[131072u32:=true]; lp= b.lp; med= b.med; } else 
if isProtocol prot  3u2  then 
if b.comms[131072u32] then 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[327680u32:=true]; lp= b.lp; med= b.med; } else 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[131072u32:=true]; lp= b.lp; med= b.med; } else 
None in 
(match b with 
 | None -> None
 | Some b -> if b.comms[262144u32] then 
None else 
Some {  aslen= b.aslen; bgpAd= b.bgpAd; comms= b.comms; lp= b.lp; med= b.med; }
)
)
 | 2n~50n -> (match d with 
 | (prefix,prefixLen) -> let b=if prefixLen = 24u6 && 1174410752u32 <=u32 prefix && prefix <u32 1174411008u32 then 
if b.comms[131072u32] then 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[327680u32:=true]; lp= b.lp; med= b.med; } else 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[131072u32:=true]; lp= b.lp; med= b.med; } else 
if isProtocol prot  3u2  then 
if b.comms[131072u32] then 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[327680u32:=true]; lp= b.lp; med= b.med; } else 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[131072u32:=true]; lp= b.lp; med= b.med; } else 
None in 
(match b with 
 | None -> None
 | Some b -> if b.comms[262144u32] then 
None else 
Some {  aslen= b.aslen; bgpAd= b.bgpAd; comms= b.comms; lp= b.lp; med= b.med; }
)
)
 | 2n~53n -> (match d with 
 | (prefix,prefixLen) -> let b=if prefixLen = 24u6 && 1174410752u32 <=u32 prefix && prefix <u32 1174411008u32 then 
if b.comms[131072u32] then 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[327680u32:=true]; lp= b.lp; med= b.med; } else 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[131072u32:=true]; lp= b.lp; med= b.med; } else 
if isProtocol prot  3u2  then 
if b.comms[131072u32] then 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[327680u32:=true]; lp= b.lp; med= b.med; } else 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[131072u32:=true]; lp= b.lp; med= b.med; } else 
None in 
(match b with 
 | None -> None
 | Some b -> if b.comms[262144u32] then 
None else 
Some {  aslen= b.aslen; bgpAd= b.bgpAd; comms= b.comms; lp= b.lp; med= b.med; }
)
)
 | 2n~44n -> (match d with 
 | (prefix,prefixLen) -> let b=if prefixLen = 24u6 && 1174410752u32 <=u32 prefix && prefix <u32 1174411008u32 then 
if b.comms[131072u32] then 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[327680u32:=true]; lp= b.lp; med= b.med; } else 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[131072u32:=true]; lp= b.lp; med= b.med; } else 
if isProtocol prot  3u2  then 
if b.comms[131072u32] then 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[327680u32:=true]; lp= b.lp; med= b.med; } else 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[131072u32:=true]; lp= b.lp; med= b.med; } else 
None in 
(match b with 
 | None -> None
 | Some b -> if b.comms[262144u32] then 
None else 
Some {  aslen= b.aslen; bgpAd= b.bgpAd; comms= b.comms; lp= b.lp; med= b.med; }
)
)
 | 3n~47n -> (match d with 
 | (prefix,prefixLen) -> let b=if prefixLen = 24u6 && 1174411008u32 <=u32 prefix && prefix <u32 1174411264u32 then 
if b.comms[131072u32] then 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[327680u32:=true]; lp= b.lp; med= b.med; } else 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[131072u32:=true]; lp= b.lp; med= b.med; } else 
if isProtocol prot  3u2  then 
if b.comms[131072u32] then 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[327680u32:=true]; lp= b.lp; med= b.med; } else 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[131072u32:=true]; lp= b.lp; med= b.med; } else 
None in 
(match b with 
 | None -> None
 | Some b -> if b.comms[262144u32] then 
None else 
Some {  aslen= b.aslen; bgpAd= b.bgpAd; comms= b.comms; lp= b.lp; med= b.med; }
)
)
 | 3n~50n -> (match d with 
 | (prefix,prefixLen) -> let b=if prefixLen = 24u6 && 1174411008u32 <=u32 prefix && prefix <u32 1174411264u32 then 
if b.comms[131072u32] then 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[327680u32:=true]; lp= b.lp; med= b.med; } else 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[131072u32:=true]; lp= b.lp; med= b.med; } else 
if isProtocol prot  3u2  then 
if b.comms[131072u32] then 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[327680u32:=true]; lp= b.lp; med= b.med; } else 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[131072u32:=true]; lp= b.lp; med= b.med; } else 
None in 
(match b with 
 | None -> None
 | Some b -> if b.comms[262144u32] then 
None else 
Some {  aslen= b.aslen; bgpAd= b.bgpAd; comms= b.comms; lp= b.lp; med= b.med; }
)
)
 | 3n~53n -> (match d with 
 | (prefix,prefixLen) -> let b=if prefixLen = 24u6 && 1174411008u32 <=u32 prefix && prefix <u32 1174411264u32 then 
if b.comms[131072u32] then 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[327680u32:=true]; lp= b.lp; med= b.med; } else 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[131072u32:=true]; lp= b.lp; med= b.med; } else 
if isProtocol prot  3u2  then 
if b.comms[131072u32] then 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[327680u32:=true]; lp= b.lp; med= b.med; } else 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[131072u32:=true]; lp= b.lp; med= b.med; } else 
None in 
(match b with 
 | None -> None
 | Some b -> if b.comms[262144u32] then 
None else 
Some {  aslen= b.aslen; bgpAd= b.bgpAd; comms= b.comms; lp= b.lp; med= b.med; }
)
)
 | 3n~44n -> (match d with 
 | (prefix,prefixLen) -> let b=if prefixLen = 24u6 && 1174411008u32 <=u32 prefix && prefix <u32 1174411264u32 then 
if b.comms[131072u32] then 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[327680u32:=true]; lp= b.lp; med= b.med; } else 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[131072u32:=true]; lp= b.lp; med= b.med; } else 
if isProtocol prot  3u2  then 
if b.comms[131072u32] then 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[327680u32:=true]; lp= b.lp; med= b.med; } else 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[131072u32:=true]; lp= b.lp; med= b.med; } else 
None in 
(match b with 
 | None -> None
 | Some b -> if b.comms[262144u32] then 
None else 
Some {  aslen= b.aslen; bgpAd= b.bgpAd; comms= b.comms; lp= b.lp; med= b.med; }
)
)
 | 4n~39n -> (match d with 
 | (prefix,prefixLen) -> let b=if prefixLen = 24u6 && 1174422528u32 <=u32 prefix && prefix <u32 1174422784u32 then 
if b.comms[131078u32] then 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[327686u32:=true]; lp= b.lp; med= b.med; } else 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[131078u32:=true]; lp= b.lp; med= b.med; } else 
if isProtocol prot  3u2  then 
if b.comms[131078u32] then 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[327686u32:=true]; lp= b.lp; med= b.med; } else 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[131078u32:=true]; lp= b.lp; med= b.med; } else 
None in 
(match b with 
 | None -> None
 | Some b -> if b.comms[262150u32] then 
None else 
Some {  aslen= b.aslen; bgpAd= b.bgpAd; comms= b.comms; lp= b.lp; med= b.med; }
)
)
 | 4n~30n -> (match d with 
 | (prefix,prefixLen) -> let b=if prefixLen = 24u6 && 1174422528u32 <=u32 prefix && prefix <u32 1174422784u32 then 
if b.comms[131078u32] then 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[327686u32:=true]; lp= b.lp; med= b.med; } else 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[131078u32:=true]; lp= b.lp; med= b.med; } else 
if isProtocol prot  3u2  then 
if b.comms[131078u32] then 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[327686u32:=true]; lp= b.lp; med= b.med; } else 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[131078u32:=true]; lp= b.lp; med= b.med; } else 
None in 
(match b with 
 | None -> None
 | Some b -> if b.comms[262150u32] then 
None else 
Some {  aslen= b.aslen; bgpAd= b.bgpAd; comms= b.comms; lp= b.lp; med= b.med; }
)
)
 | 4n~35n -> (match d with 
 | (prefix,prefixLen) -> let b=if prefixLen = 24u6 && 1174422528u32 <=u32 prefix && prefix <u32 1174422784u32 then 
if b.comms[131078u32] then 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[327686u32:=true]; lp= b.lp; med= b.med; } else 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[131078u32:=true]; lp= b.lp; med= b.med; } else 
if isProtocol prot  3u2  then 
if b.comms[131078u32] then 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[327686u32:=true]; lp= b.lp; med= b.med; } else 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[131078u32:=true]; lp= b.lp; med= b.med; } else 
None in 
(match b with 
 | None -> None
 | Some b -> if b.comms[262150u32] then 
None else 
Some {  aslen= b.aslen; bgpAd= b.bgpAd; comms= b.comms; lp= b.lp; med= b.med; }
)
)
 | 4n~38n -> (match d with 
 | (prefix,prefixLen) -> let b=if prefixLen = 24u6 && 1174422528u32 <=u32 prefix && prefix <u32 1174422784u32 then 
if b.comms[131078u32] then 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[327686u32:=true]; lp= b.lp; med= b.med; } else 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[131078u32:=true]; lp= b.lp; med= b.med; } else 
if isProtocol prot  3u2  then 
if b.comms[131078u32] then 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[327686u32:=true]; lp= b.lp; med= b.med; } else 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[131078u32:=true]; lp= b.lp; med= b.med; } else 
None in 
(match b with 
 | None -> None
 | Some b -> if b.comms[262150u32] then 
None else 
Some {  aslen= b.aslen; bgpAd= b.bgpAd; comms= b.comms; lp= b.lp; med= b.med; }
)
)
 | 5n~38n -> (match d with 
 | (prefix,prefixLen) -> let b=if prefixLen = 24u6 && 1174422784u32 <=u32 prefix && prefix <u32 1174423040u32 then 
if b.comms[131078u32] then 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[327686u32:=true]; lp= b.lp; med= b.med; } else 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[131078u32:=true]; lp= b.lp; med= b.med; } else 
if isProtocol prot  3u2  then 
if b.comms[131078u32] then 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[327686u32:=true]; lp= b.lp; med= b.med; } else 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[131078u32:=true]; lp= b.lp; med= b.med; } else 
None in 
(match b with 
 | None -> None
 | Some b -> if b.comms[262150u32] then 
None else 
Some {  aslen= b.aslen; bgpAd= b.bgpAd; comms= b.comms; lp= b.lp; med= b.med; }
)
)
 | 5n~39n -> (match d with 
 | (prefix,prefixLen) -> let b=if prefixLen = 24u6 && 1174422784u32 <=u32 prefix && prefix <u32 1174423040u32 then 
if b.comms[131078u32] then 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[327686u32:=true]; lp= b.lp; med= b.med; } else 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[131078u32:=true]; lp= b.lp; med= b.med; } else 
if isProtocol prot  3u2  then 
if b.comms[131078u32] then 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[327686u32:=true]; lp= b.lp; med= b.med; } else 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[131078u32:=true]; lp= b.lp; med= b.med; } else 
None in 
(match b with 
 | None -> None
 | Some b -> if b.comms[262150u32] then 
None else 
Some {  aslen= b.aslen; bgpAd= b.bgpAd; comms= b.comms; lp= b.lp; med= b.med; }
)
)
 | 5n~30n -> (match d with 
 | (prefix,prefixLen) -> let b=if prefixLen = 24u6 && 1174422784u32 <=u32 prefix && prefix <u32 1174423040u32 then 
if b.comms[131078u32] then 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[327686u32:=true]; lp= b.lp; med= b.med; } else 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[131078u32:=true]; lp= b.lp; med= b.med; } else 
if isProtocol prot  3u2  then 
if b.comms[131078u32] then 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[327686u32:=true]; lp= b.lp; med= b.med; } else 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[131078u32:=true]; lp= b.lp; med= b.med; } else 
None in 
(match b with 
 | None -> None
 | Some b -> if b.comms[262150u32] then 
None else 
Some {  aslen= b.aslen; bgpAd= b.bgpAd; comms= b.comms; lp= b.lp; med= b.med; }
)
)
 | 5n~35n -> (match d with 
 | (prefix,prefixLen) -> let b=if prefixLen = 24u6 && 1174422784u32 <=u32 prefix && prefix <u32 1174423040u32 then 
if b.comms[131078u32] then 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[327686u32:=true]; lp= b.lp; med= b.med; } else 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[131078u32:=true]; lp= b.lp; med= b.med; } else 
if isProtocol prot  3u2  then 
if b.comms[131078u32] then 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[327686u32:=true]; lp= b.lp; med= b.med; } else 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[131078u32:=true]; lp= b.lp; med= b.med; } else 
None in 
(match b with 
 | None -> None
 | Some b -> if b.comms[262150u32] then 
None else 
Some {  aslen= b.aslen; bgpAd= b.bgpAd; comms= b.comms; lp= b.lp; med= b.med; }
)
)
 | 6n~55n -> (match d with 
 | (prefix,prefixLen) -> let b=if isProtocol prot  3u2  then 
if b.comms[65543u32] then 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[262151u32:=true]; lp= b.lp; med= b.med; } else 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[65543u32:=true]; lp= b.lp; med= b.med; } else 
None in 
(match b with 
 | None -> None
 | Some b -> if b.comms[393216u32] then 
None else 
Some {  aslen= b.aslen; bgpAd= b.bgpAd; comms= b.comms; lp= b.lp; med= b.med; }
)
)
 | 6n~26n -> (match d with 
 | (prefix,prefixLen) -> let b=if isProtocol prot  3u2  then 
if b.comms[65543u32] then 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[262151u32:=true]; lp= b.lp; med= b.med; } else 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[65543u32:=true]; lp= b.lp; med= b.med; } else 
None in 
(match b with 
 | None -> None
 | Some b -> if b.comms[327687u32] then 
None else 
Some {  aslen= b.aslen; bgpAd= b.bgpAd; comms= b.comms; lp= b.lp; med= b.med; }
)
)
 | 6n~24n -> (match d with 
 | (prefix,prefixLen) -> let b=if isProtocol prot  3u2  then 
if b.comms[65543u32] then 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[262151u32:=true]; lp= b.lp; med= b.med; } else 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[65543u32:=true]; lp= b.lp; med= b.med; } else 
None in 
(match b with 
 | None -> None
 | Some b -> if b.comms[327687u32] then 
None else 
Some {  aslen= b.aslen; bgpAd= b.bgpAd; comms= b.comms; lp= b.lp; med= b.med; }
)
)
 | 6n~49n -> (match d with 
 | (prefix,prefixLen) -> let b=if isProtocol prot  3u2  then 
if b.comms[65543u32] then 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[262151u32:=true]; lp= b.lp; med= b.med; } else 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[65543u32:=true]; lp= b.lp; med= b.med; } else 
None in 
(match b with 
 | None -> None
 | Some b -> if b.comms[393216u32] then 
None else 
Some {  aslen= b.aslen; bgpAd= b.bgpAd; comms= b.comms; lp= b.lp; med= b.med; }
)
)
 | 6n~54n -> (match d with 
 | (prefix,prefixLen) -> let b=if isProtocol prot  3u2  then 
if b.comms[65543u32] then 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[262151u32:=true]; lp= b.lp; med= b.med; } else 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[65543u32:=true]; lp= b.lp; med= b.med; } else 
None in 
(match b with 
 | None -> None
 | Some b -> if b.comms[393216u32] then 
None else 
Some {  aslen= b.aslen; bgpAd= b.bgpAd; comms= b.comms; lp= b.lp; med= b.med; }
)
)
 | 6n~52n -> (match d with 
 | (prefix,prefixLen) -> let b=if isProtocol prot  3u2  then 
if b.comms[65543u32] then 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[262151u32:=true]; lp= b.lp; med= b.med; } else 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[65543u32:=true]; lp= b.lp; med= b.med; } else 
None in 
(match b with 
 | None -> None
 | Some b -> if b.comms[393216u32] then 
None else 
Some {  aslen= b.aslen; bgpAd= b.bgpAd; comms= b.comms; lp= b.lp; med= b.med; }
)
)
 | 6n~23n -> (match d with 
 | (prefix,prefixLen) -> let b=if isProtocol prot  3u2  then 
if b.comms[65543u32] then 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[262151u32:=true]; lp= b.lp; med= b.med; } else 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[65543u32:=true]; lp= b.lp; med= b.med; } else 
None in 
(match b with 
 | None -> None
 | Some b -> if b.comms[327687u32] then 
None else 
Some {  aslen= b.aslen; bgpAd= b.bgpAd; comms= b.comms; lp= b.lp; med= b.med; }
)
)
 | 6n~33n -> (match d with 
 | (prefix,prefixLen) -> let b=if isProtocol prot  3u2  then 
if b.comms[65543u32] then 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[262151u32:=true]; lp= b.lp; med= b.med; } else 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[65543u32:=true]; lp= b.lp; med= b.med; } else 
None in 
(match b with 
 | None -> None
 | Some b -> if b.comms[327687u32] then 
None else 
Some {  aslen= b.aslen; bgpAd= b.bgpAd; comms= b.comms; lp= b.lp; med= b.med; }
)
)
 | 7n~46n -> (match d with 
 | (prefix,prefixLen) -> let b=if isProtocol prot  3u2  then 
if b.comms[65543u32] then 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[262151u32:=true]; lp= b.lp; med= b.med; } else 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[65543u32:=true]; lp= b.lp; med= b.med; } else 
None in 
(match b with 
 | None -> None
 | Some b -> if b.comms[393216u32] then 
None else 
Some {  aslen= b.aslen; bgpAd= b.bgpAd; comms= b.comms; lp= b.lp; med= b.med; }
)
)
 | 7n~43n -> (match d with 
 | (prefix,prefixLen) -> let b=if isProtocol prot  3u2  then 
if b.comms[65543u32] then 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[262151u32:=true]; lp= b.lp; med= b.med; } else 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[65543u32:=true]; lp= b.lp; med= b.med; } else 
None in 
(match b with 
 | None -> None
 | Some b -> if b.comms[393216u32] then 
None else 
Some {  aslen= b.aslen; bgpAd= b.bgpAd; comms= b.comms; lp= b.lp; med= b.med; }
)
)
 | 7n~24n -> (match d with 
 | (prefix,prefixLen) -> let b=if isProtocol prot  3u2  then 
if b.comms[65543u32] then 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[262151u32:=true]; lp= b.lp; med= b.med; } else 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[65543u32:=true]; lp= b.lp; med= b.med; } else 
None in 
(match b with 
 | None -> None
 | Some b -> if b.comms[327687u32] then 
None else 
Some {  aslen= b.aslen; bgpAd= b.bgpAd; comms= b.comms; lp= b.lp; med= b.med; }
)
)
 | 7n~41n -> (match d with 
 | (prefix,prefixLen) -> let b=if isProtocol prot  3u2  then 
if b.comms[65543u32] then 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[262151u32:=true]; lp= b.lp; med= b.med; } else 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[65543u32:=true]; lp= b.lp; med= b.med; } else 
None in 
(match b with 
 | None -> None
 | Some b -> if b.comms[393216u32] then 
None else 
Some {  aslen= b.aslen; bgpAd= b.bgpAd; comms= b.comms; lp= b.lp; med= b.med; }
)
)
 | 7n~23n -> (match d with 
 | (prefix,prefixLen) -> let b=if isProtocol prot  3u2  then 
if b.comms[65543u32] then 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[262151u32:=true]; lp= b.lp; med= b.med; } else 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[65543u32:=true]; lp= b.lp; med= b.med; } else 
None in 
(match b with 
 | None -> None
 | Some b -> if b.comms[327687u32] then 
None else 
Some {  aslen= b.aslen; bgpAd= b.bgpAd; comms= b.comms; lp= b.lp; med= b.med; }
)
)
 | 7n~33n -> (match d with 
 | (prefix,prefixLen) -> let b=if isProtocol prot  3u2  then 
if b.comms[65543u32] then 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[262151u32:=true]; lp= b.lp; med= b.med; } else 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[65543u32:=true]; lp= b.lp; med= b.med; } else 
None in 
(match b with 
 | None -> None
 | Some b -> if b.comms[327687u32] then 
None else 
Some {  aslen= b.aslen; bgpAd= b.bgpAd; comms= b.comms; lp= b.lp; med= b.med; }
)
)
 | 7n~40n -> (match d with 
 | (prefix,prefixLen) -> let b=if isProtocol prot  3u2  then 
if b.comms[65543u32] then 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[262151u32:=true]; lp= b.lp; med= b.med; } else 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[65543u32:=true]; lp= b.lp; med= b.med; } else 
None in 
(match b with 
 | None -> None
 | Some b -> if b.comms[393216u32] then 
None else 
Some {  aslen= b.aslen; bgpAd= b.bgpAd; comms= b.comms; lp= b.lp; med= b.med; }
)
)
 | 7n~26n -> (match d with 
 | (prefix,prefixLen) -> let b=if isProtocol prot  3u2  then 
if b.comms[65543u32] then 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[262151u32:=true]; lp= b.lp; med= b.med; } else 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[65543u32:=true]; lp= b.lp; med= b.med; } else 
None in 
(match b with 
 | None -> None
 | Some b -> if b.comms[327687u32] then 
None else 
Some {  aslen= b.aslen; bgpAd= b.bgpAd; comms= b.comms; lp= b.lp; med= b.med; }
)
)
 | 8n~60n -> (match d with 
 | (prefix,prefixLen) -> let b=if prefixLen = 24u6 && 1174420992u32 <=u32 prefix && prefix <u32 1174421248u32 then 
if b.comms[131077u32] then 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[327685u32:=true]; lp= b.lp; med= b.med; } else 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[131077u32:=true]; lp= b.lp; med= b.med; } else 
if isProtocol prot  3u2  then 
if b.comms[131077u32] then 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[327685u32:=true]; lp= b.lp; med= b.med; } else 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[131077u32:=true]; lp= b.lp; med= b.med; } else 
None in 
(match b with 
 | None -> None
 | Some b -> if b.comms[262149u32] then 
None else 
Some {  aslen= b.aslen; bgpAd= b.bgpAd; comms= b.comms; lp= b.lp; med= b.med; }
)
)
 | 8n~61n -> (match d with 
 | (prefix,prefixLen) -> let b=if prefixLen = 24u6 && 1174420992u32 <=u32 prefix && prefix <u32 1174421248u32 then 
if b.comms[131077u32] then 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[327685u32:=true]; lp= b.lp; med= b.med; } else 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[131077u32:=true]; lp= b.lp; med= b.med; } else 
if isProtocol prot  3u2  then 
if b.comms[131077u32] then 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[327685u32:=true]; lp= b.lp; med= b.med; } else 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[131077u32:=true]; lp= b.lp; med= b.med; } else 
None in 
(match b with 
 | None -> None
 | Some b -> if b.comms[262149u32] then 
None else 
Some {  aslen= b.aslen; bgpAd= b.bgpAd; comms= b.comms; lp= b.lp; med= b.med; }
)
)
 | 8n~62n -> (match d with 
 | (prefix,prefixLen) -> let b=if prefixLen = 24u6 && 1174420992u32 <=u32 prefix && prefix <u32 1174421248u32 then 
if b.comms[131077u32] then 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[327685u32:=true]; lp= b.lp; med= b.med; } else 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[131077u32:=true]; lp= b.lp; med= b.med; } else 
if isProtocol prot  3u2  then 
if b.comms[131077u32] then 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[327685u32:=true]; lp= b.lp; med= b.med; } else 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[131077u32:=true]; lp= b.lp; med= b.med; } else 
None in 
(match b with 
 | None -> None
 | Some b -> if b.comms[262149u32] then 
None else 
Some {  aslen= b.aslen; bgpAd= b.bgpAd; comms= b.comms; lp= b.lp; med= b.med; }
)
)
 | 8n~63n -> (match d with 
 | (prefix,prefixLen) -> let b=if prefixLen = 24u6 && 1174420992u32 <=u32 prefix && prefix <u32 1174421248u32 then 
if b.comms[131077u32] then 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[327685u32:=true]; lp= b.lp; med= b.med; } else 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[131077u32:=true]; lp= b.lp; med= b.med; } else 
if isProtocol prot  3u2  then 
if b.comms[131077u32] then 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[327685u32:=true]; lp= b.lp; med= b.med; } else 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[131077u32:=true]; lp= b.lp; med= b.med; } else 
None in 
(match b with 
 | None -> None
 | Some b -> if b.comms[262149u32] then 
None else 
Some {  aslen= b.aslen; bgpAd= b.bgpAd; comms= b.comms; lp= b.lp; med= b.med; }
)
)
 | 9n~70n -> (match d with 
 | (prefix,prefixLen) -> let b=if isProtocol prot  3u2  then 
if b.comms[65538u32] then 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[262146u32:=true]; lp= b.lp; med= b.med; } else 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[65538u32:=true]; lp= b.lp; med= b.med; } else 
None in 
(match b with 
 | None -> None
 | Some b -> if b.comms[393216u32] then 
None else 
Some {  aslen= b.aslen; bgpAd= b.bgpAd; comms= b.comms; lp= b.lp; med= b.med; }
)
)
 | 9n~66n -> (match d with 
 | (prefix,prefixLen) -> let b=if isProtocol prot  3u2  then 
if b.comms[65538u32] then 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[262146u32:=true]; lp= b.lp; med= b.med; } else 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[65538u32:=true]; lp= b.lp; med= b.med; } else 
None in 
(match b with 
 | None -> None
 | Some b -> if b.comms[393216u32] then 
None else 
Some {  aslen= b.aslen; bgpAd= b.bgpAd; comms= b.comms; lp= b.lp; med= b.med; }
)
)
 | 9n~20n -> (match d with 
 | (prefix,prefixLen) -> let b=if isProtocol prot  3u2  then 
if b.comms[65538u32] then 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[262146u32:=true]; lp= b.lp; med= b.med; } else 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[65538u32:=true]; lp= b.lp; med= b.med; } else 
None in 
(match b with 
 | None -> None
 | Some b -> if b.comms[327682u32] then 
None else 
Some {  aslen= b.aslen; bgpAd= b.bgpAd; comms= b.comms; lp= b.lp; med= b.med; }
)
)
 | 9n~21n -> (match d with 
 | (prefix,prefixLen) -> let b=if isProtocol prot  3u2  then 
if b.comms[65538u32] then 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[262146u32:=true]; lp= b.lp; med= b.med; } else 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[65538u32:=true]; lp= b.lp; med= b.med; } else 
None in 
(match b with 
 | None -> None
 | Some b -> if b.comms[327682u32] then 
None else 
Some {  aslen= b.aslen; bgpAd= b.bgpAd; comms= b.comms; lp= b.lp; med= b.med; }
)
)
 | 9n~72n -> (match d with 
 | (prefix,prefixLen) -> let b=if isProtocol prot  3u2  then 
if b.comms[65538u32] then 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[262146u32:=true]; lp= b.lp; med= b.med; } else 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[65538u32:=true]; lp= b.lp; med= b.med; } else 
None in 
(match b with 
 | None -> None
 | Some b -> if b.comms[393216u32] then 
None else 
Some {  aslen= b.aslen; bgpAd= b.bgpAd; comms= b.comms; lp= b.lp; med= b.med; }
)
)
 | 9n~27n -> (match d with 
 | (prefix,prefixLen) -> let b=if isProtocol prot  3u2  then 
if b.comms[65538u32] then 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[262146u32:=true]; lp= b.lp; med= b.med; } else 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[65538u32:=true]; lp= b.lp; med= b.med; } else 
None in 
(match b with 
 | None -> None
 | Some b -> if b.comms[327682u32] then 
None else 
Some {  aslen= b.aslen; bgpAd= b.bgpAd; comms= b.comms; lp= b.lp; med= b.med; }
)
)
 | 9n~71n -> (match d with 
 | (prefix,prefixLen) -> let b=if isProtocol prot  3u2  then 
if b.comms[65538u32] then 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[262146u32:=true]; lp= b.lp; med= b.med; } else 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[65538u32:=true]; lp= b.lp; med= b.med; } else 
None in 
(match b with 
 | None -> None
 | Some b -> if b.comms[393216u32] then 
None else 
Some {  aslen= b.aslen; bgpAd= b.bgpAd; comms= b.comms; lp= b.lp; med= b.med; }
)
)
 | 9n~22n -> (match d with 
 | (prefix,prefixLen) -> let b=if isProtocol prot  3u2  then 
if b.comms[65538u32] then 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[262146u32:=true]; lp= b.lp; med= b.med; } else 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[65538u32:=true]; lp= b.lp; med= b.med; } else 
None in 
(match b with 
 | None -> None
 | Some b -> if b.comms[327682u32] then 
None else 
Some {  aslen= b.aslen; bgpAd= b.bgpAd; comms= b.comms; lp= b.lp; med= b.med; }
)
)
 | 10n~60n -> (match d with 
 | (prefix,prefixLen) -> let b=if prefixLen = 24u6 && 1174421248u32 <=u32 prefix && prefix <u32 1174421504u32 then 
if b.comms[131077u32] then 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[327685u32:=true]; lp= b.lp; med= b.med; } else 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[131077u32:=true]; lp= b.lp; med= b.med; } else 
if isProtocol prot  3u2  then 
if b.comms[131077u32] then 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[327685u32:=true]; lp= b.lp; med= b.med; } else 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[131077u32:=true]; lp= b.lp; med= b.med; } else 
None in 
(match b with 
 | None -> None
 | Some b -> if b.comms[262149u32] then 
None else 
Some {  aslen= b.aslen; bgpAd= b.bgpAd; comms= b.comms; lp= b.lp; med= b.med; }
)
)
 | 10n~61n -> (match d with 
 | (prefix,prefixLen) -> let b=if prefixLen = 24u6 && 1174421248u32 <=u32 prefix && prefix <u32 1174421504u32 then 
if b.comms[131077u32] then 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[327685u32:=true]; lp= b.lp; med= b.med; } else 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[131077u32:=true]; lp= b.lp; med= b.med; } else 
if isProtocol prot  3u2  then 
if b.comms[131077u32] then 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[327685u32:=true]; lp= b.lp; med= b.med; } else 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[131077u32:=true]; lp= b.lp; med= b.med; } else 
None in 
(match b with 
 | None -> None
 | Some b -> if b.comms[262149u32] then 
None else 
Some {  aslen= b.aslen; bgpAd= b.bgpAd; comms= b.comms; lp= b.lp; med= b.med; }
)
)
 | 10n~62n -> (match d with 
 | (prefix,prefixLen) -> let b=if prefixLen = 24u6 && 1174421248u32 <=u32 prefix && prefix <u32 1174421504u32 then 
if b.comms[131077u32] then 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[327685u32:=true]; lp= b.lp; med= b.med; } else 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[131077u32:=true]; lp= b.lp; med= b.med; } else 
if isProtocol prot  3u2  then 
if b.comms[131077u32] then 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[327685u32:=true]; lp= b.lp; med= b.med; } else 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[131077u32:=true]; lp= b.lp; med= b.med; } else 
None in 
(match b with 
 | None -> None
 | Some b -> if b.comms[262149u32] then 
None else 
Some {  aslen= b.aslen; bgpAd= b.bgpAd; comms= b.comms; lp= b.lp; med= b.med; }
)
)
 | 10n~63n -> (match d with 
 | (prefix,prefixLen) -> let b=if prefixLen = 24u6 && 1174421248u32 <=u32 prefix && prefix <u32 1174421504u32 then 
if b.comms[131077u32] then 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[327685u32:=true]; lp= b.lp; med= b.med; } else 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[131077u32:=true]; lp= b.lp; med= b.med; } else 
if isProtocol prot  3u2  then 
if b.comms[131077u32] then 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[327685u32:=true]; lp= b.lp; med= b.med; } else 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[131077u32:=true]; lp= b.lp; med= b.med; } else 
None in 
(match b with 
 | None -> None
 | Some b -> if b.comms[262149u32] then 
None else 
Some {  aslen= b.aslen; bgpAd= b.bgpAd; comms= b.comms; lp= b.lp; med= b.med; }
)
)
 | 11n~27n -> (match d with 
 | (prefix,prefixLen) -> let b=if isProtocol prot  3u2  then 
if b.comms[65538u32] then 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[262146u32:=true]; lp= b.lp; med= b.med; } else 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[65538u32:=true]; lp= b.lp; med= b.med; } else 
None in 
(match b with 
 | None -> None
 | Some b -> if b.comms[327682u32] then 
None else 
Some {  aslen= b.aslen; bgpAd= b.bgpAd; comms= b.comms; lp= b.lp; med= b.med; }
)
)
 | 11n~20n -> (match d with 
 | (prefix,prefixLen) -> let b=if isProtocol prot  3u2  then 
if b.comms[65538u32] then 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[262146u32:=true]; lp= b.lp; med= b.med; } else 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[65538u32:=true]; lp= b.lp; med= b.med; } else 
None in 
(match b with 
 | None -> None
 | Some b -> if b.comms[327682u32] then 
None else 
Some {  aslen= b.aslen; bgpAd= b.bgpAd; comms= b.comms; lp= b.lp; med= b.med; }
)
)
 | 11n~57n -> (match d with 
 | (prefix,prefixLen) -> let b=if isProtocol prot  3u2  then 
if b.comms[65538u32] then 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[262146u32:=true]; lp= b.lp; med= b.med; } else 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[65538u32:=true]; lp= b.lp; med= b.med; } else 
None in 
(match b with 
 | None -> None
 | Some b -> if b.comms[393216u32] then 
None else 
Some {  aslen= b.aslen; bgpAd= b.bgpAd; comms= b.comms; lp= b.lp; med= b.med; }
)
)
 | 11n~68n -> (match d with 
 | (prefix,prefixLen) -> let b=if isProtocol prot  3u2  then 
if b.comms[65538u32] then 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[262146u32:=true]; lp= b.lp; med= b.med; } else 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[65538u32:=true]; lp= b.lp; med= b.med; } else 
None in 
(match b with 
 | None -> None
 | Some b -> if b.comms[393216u32] then 
None else 
Some {  aslen= b.aslen; bgpAd= b.bgpAd; comms= b.comms; lp= b.lp; med= b.med; }
)
)
 | 11n~21n -> (match d with 
 | (prefix,prefixLen) -> let b=if isProtocol prot  3u2  then 
if b.comms[65538u32] then 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[262146u32:=true]; lp= b.lp; med= b.med; } else 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[65538u32:=true]; lp= b.lp; med= b.med; } else 
None in 
(match b with 
 | None -> None
 | Some b -> if b.comms[327682u32] then 
None else 
Some {  aslen= b.aslen; bgpAd= b.bgpAd; comms= b.comms; lp= b.lp; med= b.med; }
)
)
 | 11n~56n -> (match d with 
 | (prefix,prefixLen) -> let b=if isProtocol prot  3u2  then 
if b.comms[65538u32] then 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[262146u32:=true]; lp= b.lp; med= b.med; } else 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[65538u32:=true]; lp= b.lp; med= b.med; } else 
None in 
(match b with 
 | None -> None
 | Some b -> if b.comms[393216u32] then 
None else 
Some {  aslen= b.aslen; bgpAd= b.bgpAd; comms= b.comms; lp= b.lp; med= b.med; }
)
)
 | 11n~67n -> (match d with 
 | (prefix,prefixLen) -> let b=if isProtocol prot  3u2  then 
if b.comms[65538u32] then 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[262146u32:=true]; lp= b.lp; med= b.med; } else 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[65538u32:=true]; lp= b.lp; med= b.med; } else 
None in 
(match b with 
 | None -> None
 | Some b -> if b.comms[393216u32] then 
None else 
Some {  aslen= b.aslen; bgpAd= b.bgpAd; comms= b.comms; lp= b.lp; med= b.med; }
)
)
 | 11n~22n -> (match d with 
 | (prefix,prefixLen) -> let b=if isProtocol prot  3u2  then 
if b.comms[65538u32] then 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[262146u32:=true]; lp= b.lp; med= b.med; } else 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[65538u32:=true]; lp= b.lp; med= b.med; } else 
None in 
(match b with 
 | None -> None
 | Some b -> if b.comms[327682u32] then 
None else 
Some {  aslen= b.aslen; bgpAd= b.bgpAd; comms= b.comms; lp= b.lp; med= b.med; }
)
)
 | 12n~50n -> (match d with 
 | (prefix,prefixLen) -> let b=if prefixLen = 24u6 && 1174410240u32 <=u32 prefix && prefix <u32 1174410496u32 then 
if b.comms[131072u32] then 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[327680u32:=true]; lp= b.lp; med= b.med; } else 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[131072u32:=true]; lp= b.lp; med= b.med; } else 
if isProtocol prot  3u2  then 
if b.comms[131072u32] then 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[327680u32:=true]; lp= b.lp; med= b.med; } else 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[131072u32:=true]; lp= b.lp; med= b.med; } else 
None in 
(match b with 
 | None -> None
 | Some b -> if b.comms[262144u32] then 
None else 
Some {  aslen= b.aslen; bgpAd= b.bgpAd; comms= b.comms; lp= b.lp; med= b.med; }
)
)
 | 12n~53n -> (match d with 
 | (prefix,prefixLen) -> let b=if prefixLen = 24u6 && 1174410240u32 <=u32 prefix && prefix <u32 1174410496u32 then 
if b.comms[131072u32] then 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[327680u32:=true]; lp= b.lp; med= b.med; } else 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[131072u32:=true]; lp= b.lp; med= b.med; } else 
if isProtocol prot  3u2  then 
if b.comms[131072u32] then 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[327680u32:=true]; lp= b.lp; med= b.med; } else 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[131072u32:=true]; lp= b.lp; med= b.med; } else 
None in 
(match b with 
 | None -> None
 | Some b -> if b.comms[262144u32] then 
None else 
Some {  aslen= b.aslen; bgpAd= b.bgpAd; comms= b.comms; lp= b.lp; med= b.med; }
)
)
 | 12n~44n -> (match d with 
 | (prefix,prefixLen) -> let b=if prefixLen = 24u6 && 1174410240u32 <=u32 prefix && prefix <u32 1174410496u32 then 
if b.comms[131072u32] then 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[327680u32:=true]; lp= b.lp; med= b.med; } else 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[131072u32:=true]; lp= b.lp; med= b.med; } else 
if isProtocol prot  3u2  then 
if b.comms[131072u32] then 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[327680u32:=true]; lp= b.lp; med= b.med; } else 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[131072u32:=true]; lp= b.lp; med= b.med; } else 
None in 
(match b with 
 | None -> None
 | Some b -> if b.comms[262144u32] then 
None else 
Some {  aslen= b.aslen; bgpAd= b.bgpAd; comms= b.comms; lp= b.lp; med= b.med; }
)
)
 | 12n~47n -> (match d with 
 | (prefix,prefixLen) -> let b=if prefixLen = 24u6 && 1174410240u32 <=u32 prefix && prefix <u32 1174410496u32 then 
if b.comms[131072u32] then 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[327680u32:=true]; lp= b.lp; med= b.med; } else 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[131072u32:=true]; lp= b.lp; med= b.med; } else 
if isProtocol prot  3u2  then 
if b.comms[131072u32] then 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[327680u32:=true]; lp= b.lp; med= b.med; } else 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[131072u32:=true]; lp= b.lp; med= b.med; } else 
None in 
(match b with 
 | None -> None
 | Some b -> if b.comms[262144u32] then 
None else 
Some {  aslen= b.aslen; bgpAd= b.bgpAd; comms= b.comms; lp= b.lp; med= b.med; }
)
)
 | 13n~50n -> (match d with 
 | (prefix,prefixLen) -> let b=if prefixLen = 24u6 && 1174410496u32 <=u32 prefix && prefix <u32 1174410752u32 then 
if b.comms[131072u32] then 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[327680u32:=true]; lp= b.lp; med= b.med; } else 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[131072u32:=true]; lp= b.lp; med= b.med; } else 
if isProtocol prot  3u2  then 
if b.comms[131072u32] then 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[327680u32:=true]; lp= b.lp; med= b.med; } else 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[131072u32:=true]; lp= b.lp; med= b.med; } else 
None in 
(match b with 
 | None -> None
 | Some b -> if b.comms[262144u32] then 
None else 
Some {  aslen= b.aslen; bgpAd= b.bgpAd; comms= b.comms; lp= b.lp; med= b.med; }
)
)
 | 13n~47n -> (match d with 
 | (prefix,prefixLen) -> let b=if prefixLen = 24u6 && 1174410496u32 <=u32 prefix && prefix <u32 1174410752u32 then 
if b.comms[131072u32] then 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[327680u32:=true]; lp= b.lp; med= b.med; } else 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[131072u32:=true]; lp= b.lp; med= b.med; } else 
if isProtocol prot  3u2  then 
if b.comms[131072u32] then 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[327680u32:=true]; lp= b.lp; med= b.med; } else 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[131072u32:=true]; lp= b.lp; med= b.med; } else 
None in 
(match b with 
 | None -> None
 | Some b -> if b.comms[262144u32] then 
None else 
Some {  aslen= b.aslen; bgpAd= b.bgpAd; comms= b.comms; lp= b.lp; med= b.med; }
)
)
 | 13n~53n -> (match d with 
 | (prefix,prefixLen) -> let b=if prefixLen = 24u6 && 1174410496u32 <=u32 prefix && prefix <u32 1174410752u32 then 
if b.comms[131072u32] then 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[327680u32:=true]; lp= b.lp; med= b.med; } else 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[131072u32:=true]; lp= b.lp; med= b.med; } else 
if isProtocol prot  3u2  then 
if b.comms[131072u32] then 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[327680u32:=true]; lp= b.lp; med= b.med; } else 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[131072u32:=true]; lp= b.lp; med= b.med; } else 
None in 
(match b with 
 | None -> None
 | Some b -> if b.comms[262144u32] then 
None else 
Some {  aslen= b.aslen; bgpAd= b.bgpAd; comms= b.comms; lp= b.lp; med= b.med; }
)
)
 | 13n~44n -> (match d with 
 | (prefix,prefixLen) -> let b=if prefixLen = 24u6 && 1174410496u32 <=u32 prefix && prefix <u32 1174410752u32 then 
if b.comms[131072u32] then 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[327680u32:=true]; lp= b.lp; med= b.med; } else 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[131072u32:=true]; lp= b.lp; med= b.med; } else 
if isProtocol prot  3u2  then 
if b.comms[131072u32] then 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[327680u32:=true]; lp= b.lp; med= b.med; } else 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[131072u32:=true]; lp= b.lp; med= b.med; } else 
None in 
(match b with 
 | None -> None
 | Some b -> if b.comms[262144u32] then 
None else 
Some {  aslen= b.aslen; bgpAd= b.bgpAd; comms= b.comms; lp= b.lp; med= b.med; }
)
)
 | 14n~24n -> (match d with 
 | (prefix,prefixLen) -> let b=if isProtocol prot  3u2  then 
if b.comms[65543u32] then 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[262151u32:=true]; lp= b.lp; med= b.med; } else 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[65543u32:=true]; lp= b.lp; med= b.med; } else 
None in 
(match b with 
 | None -> None
 | Some b -> if b.comms[327687u32] then 
None else 
Some {  aslen= b.aslen; bgpAd= b.bgpAd; comms= b.comms; lp= b.lp; med= b.med; }
)
)
 | 14n~66n -> (match d with 
 | (prefix,prefixLen) -> let b=if isProtocol prot  3u2  then 
if b.comms[65543u32] then 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[262151u32:=true]; lp= b.lp; med= b.med; } else 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[65543u32:=true]; lp= b.lp; med= b.med; } else 
None in 
(match b with 
 | None -> None
 | Some b -> if b.comms[393216u32] then 
None else 
Some {  aslen= b.aslen; bgpAd= b.bgpAd; comms= b.comms; lp= b.lp; med= b.med; }
)
)
 | 14n~26n -> (match d with 
 | (prefix,prefixLen) -> let b=if isProtocol prot  3u2  then 
if b.comms[65543u32] then 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[262151u32:=true]; lp= b.lp; med= b.med; } else 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[65543u32:=true]; lp= b.lp; med= b.med; } else 
None in 
(match b with 
 | None -> None
 | Some b -> if b.comms[327687u32] then 
None else 
Some {  aslen= b.aslen; bgpAd= b.bgpAd; comms= b.comms; lp= b.lp; med= b.med; }
)
)
 | 14n~71n -> (match d with 
 | (prefix,prefixLen) -> let b=if isProtocol prot  3u2  then 
if b.comms[65543u32] then 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[262151u32:=true]; lp= b.lp; med= b.med; } else 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[65543u32:=true]; lp= b.lp; med= b.med; } else 
None in 
(match b with 
 | None -> None
 | Some b -> if b.comms[393216u32] then 
None else 
Some {  aslen= b.aslen; bgpAd= b.bgpAd; comms= b.comms; lp= b.lp; med= b.med; }
)
)
 | 14n~72n -> (match d with 
 | (prefix,prefixLen) -> let b=if isProtocol prot  3u2  then 
if b.comms[65543u32] then 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[262151u32:=true]; lp= b.lp; med= b.med; } else 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[65543u32:=true]; lp= b.lp; med= b.med; } else 
None in 
(match b with 
 | None -> None
 | Some b -> if b.comms[393216u32] then 
None else 
Some {  aslen= b.aslen; bgpAd= b.bgpAd; comms= b.comms; lp= b.lp; med= b.med; }
)
)
 | 14n~70n -> (match d with 
 | (prefix,prefixLen) -> let b=if isProtocol prot  3u2  then 
if b.comms[65543u32] then 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[262151u32:=true]; lp= b.lp; med= b.med; } else 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[65543u32:=true]; lp= b.lp; med= b.med; } else 
None in 
(match b with 
 | None -> None
 | Some b -> if b.comms[393216u32] then 
None else 
Some {  aslen= b.aslen; bgpAd= b.bgpAd; comms= b.comms; lp= b.lp; med= b.med; }
)
)
 | 14n~33n -> (match d with 
 | (prefix,prefixLen) -> let b=if isProtocol prot  3u2  then 
if b.comms[65543u32] then 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[262151u32:=true]; lp= b.lp; med= b.med; } else 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[65543u32:=true]; lp= b.lp; med= b.med; } else 
None in 
(match b with 
 | None -> None
 | Some b -> if b.comms[327687u32] then 
None else 
Some {  aslen= b.aslen; bgpAd= b.bgpAd; comms= b.comms; lp= b.lp; med= b.med; }
)
)
 | 14n~23n -> (match d with 
 | (prefix,prefixLen) -> let b=if isProtocol prot  3u2  then 
if b.comms[65543u32] then 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[262151u32:=true]; lp= b.lp; med= b.med; } else 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[65543u32:=true]; lp= b.lp; med= b.med; } else 
None in 
(match b with 
 | None -> None
 | Some b -> if b.comms[327687u32] then 
None else 
Some {  aslen= b.aslen; bgpAd= b.bgpAd; comms= b.comms; lp= b.lp; med= b.med; }
)
)
 | 15n~26n -> (match d with 
 | (prefix,prefixLen) -> let b=if isProtocol prot  3u2  then 
if b.comms[65543u32] then 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[262151u32:=true]; lp= b.lp; med= b.med; } else 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[65543u32:=true]; lp= b.lp; med= b.med; } else 
None in 
(match b with 
 | None -> None
 | Some b -> if b.comms[327687u32] then 
None else 
Some {  aslen= b.aslen; bgpAd= b.bgpAd; comms= b.comms; lp= b.lp; med= b.med; }
)
)
 | 15n~33n -> (match d with 
 | (prefix,prefixLen) -> let b=if isProtocol prot  3u2  then 
if b.comms[65543u32] then 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[262151u32:=true]; lp= b.lp; med= b.med; } else 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[65543u32:=true]; lp= b.lp; med= b.med; } else 
None in 
(match b with 
 | None -> None
 | Some b -> if b.comms[327687u32] then 
None else 
Some {  aslen= b.aslen; bgpAd= b.bgpAd; comms= b.comms; lp= b.lp; med= b.med; }
)
)
 | 15n~56n -> (match d with 
 | (prefix,prefixLen) -> let b=if isProtocol prot  3u2  then 
if b.comms[65543u32] then 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[262151u32:=true]; lp= b.lp; med= b.med; } else 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[65543u32:=true]; lp= b.lp; med= b.med; } else 
None in 
(match b with 
 | None -> None
 | Some b -> if b.comms[393216u32] then 
None else 
Some {  aslen= b.aslen; bgpAd= b.bgpAd; comms= b.comms; lp= b.lp; med= b.med; }
)
)
 | 15n~68n -> (match d with 
 | (prefix,prefixLen) -> let b=if isProtocol prot  3u2  then 
if b.comms[65543u32] then 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[262151u32:=true]; lp= b.lp; med= b.med; } else 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[65543u32:=true]; lp= b.lp; med= b.med; } else 
None in 
(match b with 
 | None -> None
 | Some b -> if b.comms[393216u32] then 
None else 
Some {  aslen= b.aslen; bgpAd= b.bgpAd; comms= b.comms; lp= b.lp; med= b.med; }
)
)
 | 15n~24n -> (match d with 
 | (prefix,prefixLen) -> let b=if isProtocol prot  3u2  then 
if b.comms[65543u32] then 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[262151u32:=true]; lp= b.lp; med= b.med; } else 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[65543u32:=true]; lp= b.lp; med= b.med; } else 
None in 
(match b with 
 | None -> None
 | Some b -> if b.comms[327687u32] then 
None else 
Some {  aslen= b.aslen; bgpAd= b.bgpAd; comms= b.comms; lp= b.lp; med= b.med; }
)
)
 | 15n~57n -> (match d with 
 | (prefix,prefixLen) -> let b=if isProtocol prot  3u2  then 
if b.comms[65543u32] then 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[262151u32:=true]; lp= b.lp; med= b.med; } else 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[65543u32:=true]; lp= b.lp; med= b.med; } else 
None in 
(match b with 
 | None -> None
 | Some b -> if b.comms[393216u32] then 
None else 
Some {  aslen= b.aslen; bgpAd= b.bgpAd; comms= b.comms; lp= b.lp; med= b.med; }
)
)
 | 15n~67n -> (match d with 
 | (prefix,prefixLen) -> let b=if isProtocol prot  3u2  then 
if b.comms[65543u32] then 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[262151u32:=true]; lp= b.lp; med= b.med; } else 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[65543u32:=true]; lp= b.lp; med= b.med; } else 
None in 
(match b with 
 | None -> None
 | Some b -> if b.comms[393216u32] then 
None else 
Some {  aslen= b.aslen; bgpAd= b.bgpAd; comms= b.comms; lp= b.lp; med= b.med; }
)
)
 | 15n~23n -> (match d with 
 | (prefix,prefixLen) -> let b=if isProtocol prot  3u2  then 
if b.comms[65543u32] then 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[262151u32:=true]; lp= b.lp; med= b.med; } else 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[65543u32:=true]; lp= b.lp; med= b.med; } else 
None in 
(match b with 
 | None -> None
 | Some b -> if b.comms[327687u32] then 
None else 
Some {  aslen= b.aslen; bgpAd= b.bgpAd; comms= b.comms; lp= b.lp; med= b.med; }
)
)
 | 16n~61n -> (match d with 
 | (prefix,prefixLen) -> let b=if prefixLen = 24u6 && 1174420480u32 <=u32 prefix && prefix <u32 1174420736u32 then 
if b.comms[131077u32] then 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[327685u32:=true]; lp= b.lp; med= b.med; } else 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[131077u32:=true]; lp= b.lp; med= b.med; } else 
if isProtocol prot  3u2  then 
if b.comms[131077u32] then 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[327685u32:=true]; lp= b.lp; med= b.med; } else 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[131077u32:=true]; lp= b.lp; med= b.med; } else 
None in 
(match b with 
 | None -> None
 | Some b -> if b.comms[262149u32] then 
None else 
Some {  aslen= b.aslen; bgpAd= b.bgpAd; comms= b.comms; lp= b.lp; med= b.med; }
)
)
 | 16n~62n -> (match d with 
 | (prefix,prefixLen) -> let b=if prefixLen = 24u6 && 1174420480u32 <=u32 prefix && prefix <u32 1174420736u32 then 
if b.comms[131077u32] then 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[327685u32:=true]; lp= b.lp; med= b.med; } else 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[131077u32:=true]; lp= b.lp; med= b.med; } else 
if isProtocol prot  3u2  then 
if b.comms[131077u32] then 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[327685u32:=true]; lp= b.lp; med= b.med; } else 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[131077u32:=true]; lp= b.lp; med= b.med; } else 
None in 
(match b with 
 | None -> None
 | Some b -> if b.comms[262149u32] then 
None else 
Some {  aslen= b.aslen; bgpAd= b.bgpAd; comms= b.comms; lp= b.lp; med= b.med; }
)
)
 | 16n~63n -> (match d with 
 | (prefix,prefixLen) -> let b=if prefixLen = 24u6 && 1174420480u32 <=u32 prefix && prefix <u32 1174420736u32 then 
if b.comms[131077u32] then 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[327685u32:=true]; lp= b.lp; med= b.med; } else 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[131077u32:=true]; lp= b.lp; med= b.med; } else 
if isProtocol prot  3u2  then 
if b.comms[131077u32] then 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[327685u32:=true]; lp= b.lp; med= b.med; } else 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[131077u32:=true]; lp= b.lp; med= b.med; } else 
None in 
(match b with 
 | None -> None
 | Some b -> if b.comms[262149u32] then 
None else 
Some {  aslen= b.aslen; bgpAd= b.bgpAd; comms= b.comms; lp= b.lp; med= b.med; }
)
)
 | 16n~60n -> (match d with 
 | (prefix,prefixLen) -> let b=if prefixLen = 24u6 && 1174420480u32 <=u32 prefix && prefix <u32 1174420736u32 then 
if b.comms[131077u32] then 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[327685u32:=true]; lp= b.lp; med= b.med; } else 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[131077u32:=true]; lp= b.lp; med= b.med; } else 
if isProtocol prot  3u2  then 
if b.comms[131077u32] then 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[327685u32:=true]; lp= b.lp; med= b.med; } else 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[131077u32:=true]; lp= b.lp; med= b.med; } else 
None in 
(match b with 
 | None -> None
 | Some b -> if b.comms[262149u32] then 
None else 
Some {  aslen= b.aslen; bgpAd= b.bgpAd; comms= b.comms; lp= b.lp; med= b.med; }
)
)
 | 17n~22n -> (match d with 
 | (prefix,prefixLen) -> let b=if isProtocol prot  3u2  then 
if b.comms[65538u32] then 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[262146u32:=true]; lp= b.lp; med= b.med; } else 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[65538u32:=true]; lp= b.lp; med= b.med; } else 
None in 
(match b with 
 | None -> None
 | Some b -> if b.comms[327682u32] then 
None else 
Some {  aslen= b.aslen; bgpAd= b.bgpAd; comms= b.comms; lp= b.lp; med= b.med; }
)
)
 | 17n~52n -> (match d with 
 | (prefix,prefixLen) -> let b=if isProtocol prot  3u2  then 
if b.comms[65538u32] then 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[262146u32:=true]; lp= b.lp; med= b.med; } else 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[65538u32:=true]; lp= b.lp; med= b.med; } else 
None in 
(match b with 
 | None -> None
 | Some b -> if b.comms[393216u32] then 
None else 
Some {  aslen= b.aslen; bgpAd= b.bgpAd; comms= b.comms; lp= b.lp; med= b.med; }
)
)
 | 17n~27n -> (match d with 
 | (prefix,prefixLen) -> let b=if isProtocol prot  3u2  then 
if b.comms[65538u32] then 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[262146u32:=true]; lp= b.lp; med= b.med; } else 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[65538u32:=true]; lp= b.lp; med= b.med; } else 
None in 
(match b with 
 | None -> None
 | Some b -> if b.comms[327682u32] then 
None else 
Some {  aslen= b.aslen; bgpAd= b.bgpAd; comms= b.comms; lp= b.lp; med= b.med; }
)
)
 | 17n~49n -> (match d with 
 | (prefix,prefixLen) -> let b=if isProtocol prot  3u2  then 
if b.comms[65538u32] then 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[262146u32:=true]; lp= b.lp; med= b.med; } else 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[65538u32:=true]; lp= b.lp; med= b.med; } else 
None in 
(match b with 
 | None -> None
 | Some b -> if b.comms[393216u32] then 
None else 
Some {  aslen= b.aslen; bgpAd= b.bgpAd; comms= b.comms; lp= b.lp; med= b.med; }
)
)
 | 17n~54n -> (match d with 
 | (prefix,prefixLen) -> let b=if isProtocol prot  3u2  then 
if b.comms[65538u32] then 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[262146u32:=true]; lp= b.lp; med= b.med; } else 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[65538u32:=true]; lp= b.lp; med= b.med; } else 
None in 
(match b with 
 | None -> None
 | Some b -> if b.comms[393216u32] then 
None else 
Some {  aslen= b.aslen; bgpAd= b.bgpAd; comms= b.comms; lp= b.lp; med= b.med; }
)
)
 | 17n~55n -> (match d with 
 | (prefix,prefixLen) -> let b=if isProtocol prot  3u2  then 
if b.comms[65538u32] then 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[262146u32:=true]; lp= b.lp; med= b.med; } else 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[65538u32:=true]; lp= b.lp; med= b.med; } else 
None in 
(match b with 
 | None -> None
 | Some b -> if b.comms[393216u32] then 
None else 
Some {  aslen= b.aslen; bgpAd= b.bgpAd; comms= b.comms; lp= b.lp; med= b.med; }
)
)
 | 17n~21n -> (match d with 
 | (prefix,prefixLen) -> let b=if isProtocol prot  3u2  then 
if b.comms[65538u32] then 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[262146u32:=true]; lp= b.lp; med= b.med; } else 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[65538u32:=true]; lp= b.lp; med= b.med; } else 
None in 
(match b with 
 | None -> None
 | Some b -> if b.comms[327682u32] then 
None else 
Some {  aslen= b.aslen; bgpAd= b.bgpAd; comms= b.comms; lp= b.lp; med= b.med; }
)
)
 | 17n~20n -> (match d with 
 | (prefix,prefixLen) -> let b=if isProtocol prot  3u2  then 
if b.comms[65538u32] then 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[262146u32:=true]; lp= b.lp; med= b.med; } else 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[65538u32:=true]; lp= b.lp; med= b.med; } else 
None in 
(match b with 
 | None -> None
 | Some b -> if b.comms[327682u32] then 
None else 
Some {  aslen= b.aslen; bgpAd= b.bgpAd; comms= b.comms; lp= b.lp; med= b.med; }
)
)
 | 18n~60n -> (match d with 
 | (prefix,prefixLen) -> let b=if prefixLen = 24u6 && 1174420736u32 <=u32 prefix && prefix <u32 1174420992u32 then 
if b.comms[131077u32] then 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[327685u32:=true]; lp= b.lp; med= b.med; } else 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[131077u32:=true]; lp= b.lp; med= b.med; } else 
if isProtocol prot  3u2  then 
if b.comms[131077u32] then 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[327685u32:=true]; lp= b.lp; med= b.med; } else 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[131077u32:=true]; lp= b.lp; med= b.med; } else 
None in 
(match b with 
 | None -> None
 | Some b -> if b.comms[262149u32] then 
None else 
Some {  aslen= b.aslen; bgpAd= b.bgpAd; comms= b.comms; lp= b.lp; med= b.med; }
)
)
 | 18n~62n -> (match d with 
 | (prefix,prefixLen) -> let b=if prefixLen = 24u6 && 1174420736u32 <=u32 prefix && prefix <u32 1174420992u32 then 
if b.comms[131077u32] then 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[327685u32:=true]; lp= b.lp; med= b.med; } else 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[131077u32:=true]; lp= b.lp; med= b.med; } else 
if isProtocol prot  3u2  then 
if b.comms[131077u32] then 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[327685u32:=true]; lp= b.lp; med= b.med; } else 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[131077u32:=true]; lp= b.lp; med= b.med; } else 
None in 
(match b with 
 | None -> None
 | Some b -> if b.comms[262149u32] then 
None else 
Some {  aslen= b.aslen; bgpAd= b.bgpAd; comms= b.comms; lp= b.lp; med= b.med; }
)
)
 | 18n~61n -> (match d with 
 | (prefix,prefixLen) -> let b=if prefixLen = 24u6 && 1174420736u32 <=u32 prefix && prefix <u32 1174420992u32 then 
if b.comms[131077u32] then 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[327685u32:=true]; lp= b.lp; med= b.med; } else 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[131077u32:=true]; lp= b.lp; med= b.med; } else 
if isProtocol prot  3u2  then 
if b.comms[131077u32] then 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[327685u32:=true]; lp= b.lp; med= b.med; } else 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[131077u32:=true]; lp= b.lp; med= b.med; } else 
None in 
(match b with 
 | None -> None
 | Some b -> if b.comms[262149u32] then 
None else 
Some {  aslen= b.aslen; bgpAd= b.bgpAd; comms= b.comms; lp= b.lp; med= b.med; }
)
)
 | 18n~63n -> (match d with 
 | (prefix,prefixLen) -> let b=if prefixLen = 24u6 && 1174420736u32 <=u32 prefix && prefix <u32 1174420992u32 then 
if b.comms[131077u32] then 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[327685u32:=true]; lp= b.lp; med= b.med; } else 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[131077u32:=true]; lp= b.lp; med= b.med; } else 
if isProtocol prot  3u2  then 
if b.comms[131077u32] then 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[327685u32:=true]; lp= b.lp; med= b.med; } else 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[131077u32:=true]; lp= b.lp; med= b.med; } else 
None in 
(match b with 
 | None -> None
 | Some b -> if b.comms[262149u32] then 
None else 
Some {  aslen= b.aslen; bgpAd= b.bgpAd; comms= b.comms; lp= b.lp; med= b.med; }
)
)
 | 19n~20n -> (match d with 
 | (prefix,prefixLen) -> let b=if isProtocol prot  3u2  then 
if b.comms[65538u32] then 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[262146u32:=true]; lp= b.lp; med= b.med; } else 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[65538u32:=true]; lp= b.lp; med= b.med; } else 
None in 
(match b with 
 | None -> None
 | Some b -> if b.comms[327682u32] then 
None else 
Some {  aslen= b.aslen; bgpAd= b.bgpAd; comms= b.comms; lp= b.lp; med= b.med; }
)
)
 | 19n~43n -> (match d with 
 | (prefix,prefixLen) -> let b=if isProtocol prot  3u2  then 
if b.comms[65538u32] then 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[262146u32:=true]; lp= b.lp; med= b.med; } else 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[65538u32:=true]; lp= b.lp; med= b.med; } else 
None in 
(match b with 
 | None -> None
 | Some b -> if b.comms[393216u32] then 
None else 
Some {  aslen= b.aslen; bgpAd= b.bgpAd; comms= b.comms; lp= b.lp; med= b.med; }
)
)
 | 19n~41n -> (match d with 
 | (prefix,prefixLen) -> let b=if isProtocol prot  3u2  then 
if b.comms[65538u32] then 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[262146u32:=true]; lp= b.lp; med= b.med; } else 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[65538u32:=true]; lp= b.lp; med= b.med; } else 
None in 
(match b with 
 | None -> None
 | Some b -> if b.comms[393216u32] then 
None else 
Some {  aslen= b.aslen; bgpAd= b.bgpAd; comms= b.comms; lp= b.lp; med= b.med; }
)
)
 | 19n~22n -> (match d with 
 | (prefix,prefixLen) -> let b=if isProtocol prot  3u2  then 
if b.comms[65538u32] then 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[262146u32:=true]; lp= b.lp; med= b.med; } else 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[65538u32:=true]; lp= b.lp; med= b.med; } else 
None in 
(match b with 
 | None -> None
 | Some b -> if b.comms[327682u32] then 
None else 
Some {  aslen= b.aslen; bgpAd= b.bgpAd; comms= b.comms; lp= b.lp; med= b.med; }
)
)
 | 19n~27n -> (match d with 
 | (prefix,prefixLen) -> let b=if isProtocol prot  3u2  then 
if b.comms[65538u32] then 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[262146u32:=true]; lp= b.lp; med= b.med; } else 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[65538u32:=true]; lp= b.lp; med= b.med; } else 
None in 
(match b with 
 | None -> None
 | Some b -> if b.comms[327682u32] then 
None else 
Some {  aslen= b.aslen; bgpAd= b.bgpAd; comms= b.comms; lp= b.lp; med= b.med; }
)
)
 | 19n~40n -> (match d with 
 | (prefix,prefixLen) -> let b=if isProtocol prot  3u2  then 
if b.comms[65538u32] then 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[262146u32:=true]; lp= b.lp; med= b.med; } else 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[65538u32:=true]; lp= b.lp; med= b.med; } else 
None in 
(match b with 
 | None -> None
 | Some b -> if b.comms[393216u32] then 
None else 
Some {  aslen= b.aslen; bgpAd= b.bgpAd; comms= b.comms; lp= b.lp; med= b.med; }
)
)
 | 19n~21n -> (match d with 
 | (prefix,prefixLen) -> let b=if isProtocol prot  3u2  then 
if b.comms[65538u32] then 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[262146u32:=true]; lp= b.lp; med= b.med; } else 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[65538u32:=true]; lp= b.lp; med= b.med; } else 
None in 
(match b with 
 | None -> None
 | Some b -> if b.comms[327682u32] then 
None else 
Some {  aslen= b.aslen; bgpAd= b.bgpAd; comms= b.comms; lp= b.lp; med= b.med; }
)
)
 | 19n~46n -> (match d with 
 | (prefix,prefixLen) -> let b=if isProtocol prot  3u2  then 
if b.comms[65538u32] then 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[262146u32:=true]; lp= b.lp; med= b.med; } else 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[65538u32:=true]; lp= b.lp; med= b.med; } else 
None in 
(match b with 
 | None -> None
 | Some b -> if b.comms[393216u32] then 
None else 
Some {  aslen= b.aslen; bgpAd= b.bgpAd; comms= b.comms; lp= b.lp; med= b.med; }
)
)
 | 20n~19n -> (match d with 
 | (prefix,prefixLen) -> let b=if prefixLen = 24u6 && 1174414592u32 <=u32 prefix && prefix <u32 1174414848u32 then 
if b.comms[131074u32] then 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[327682u32:=true]; lp= b.lp; med= b.med; } else 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[131074u32:=true]; lp= b.lp; med= b.med; } else 
if isProtocol prot  3u2  then 
if b.comms[131074u32] then 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[327682u32:=true]; lp= b.lp; med= b.med; } else 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[131074u32:=true]; lp= b.lp; med= b.med; } else 
None in 
(match b with 
 | None -> None
 | Some b -> if b.comms[262146u32] then 
None else 
Some {  aslen= b.aslen; bgpAd= b.bgpAd; comms= b.comms; lp= b.lp; med= b.med; }
)
)
 | 20n~17n -> (match d with 
 | (prefix,prefixLen) -> let b=if prefixLen = 24u6 && 1174414592u32 <=u32 prefix && prefix <u32 1174414848u32 then 
if b.comms[131074u32] then 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[327682u32:=true]; lp= b.lp; med= b.med; } else 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[131074u32:=true]; lp= b.lp; med= b.med; } else 
if isProtocol prot  3u2  then 
if b.comms[131074u32] then 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[327682u32:=true]; lp= b.lp; med= b.med; } else 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[131074u32:=true]; lp= b.lp; med= b.med; } else 
None in 
(match b with 
 | None -> None
 | Some b -> if b.comms[262146u32] then 
None else 
Some {  aslen= b.aslen; bgpAd= b.bgpAd; comms= b.comms; lp= b.lp; med= b.med; }
)
)
 | 20n~9n -> (match d with 
 | (prefix,prefixLen) -> let b=if prefixLen = 24u6 && 1174414592u32 <=u32 prefix && prefix <u32 1174414848u32 then 
if b.comms[131074u32] then 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[327682u32:=true]; lp= b.lp; med= b.med; } else 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[131074u32:=true]; lp= b.lp; med= b.med; } else 
if isProtocol prot  3u2  then 
if b.comms[131074u32] then 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[327682u32:=true]; lp= b.lp; med= b.med; } else 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[131074u32:=true]; lp= b.lp; med= b.med; } else 
None in 
(match b with 
 | None -> None
 | Some b -> if b.comms[262146u32] then 
None else 
Some {  aslen= b.aslen; bgpAd= b.bgpAd; comms= b.comms; lp= b.lp; med= b.med; }
)
)
 | 20n~11n -> (match d with 
 | (prefix,prefixLen) -> let b=if prefixLen = 24u6 && 1174414592u32 <=u32 prefix && prefix <u32 1174414848u32 then 
if b.comms[131074u32] then 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[327682u32:=true]; lp= b.lp; med= b.med; } else 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[131074u32:=true]; lp= b.lp; med= b.med; } else 
if isProtocol prot  3u2  then 
if b.comms[131074u32] then 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[327682u32:=true]; lp= b.lp; med= b.med; } else 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[131074u32:=true]; lp= b.lp; med= b.med; } else 
None in 
(match b with 
 | None -> None
 | Some b -> if b.comms[262146u32] then 
None else 
Some {  aslen= b.aslen; bgpAd= b.bgpAd; comms= b.comms; lp= b.lp; med= b.med; }
)
)
 | 21n~17n -> (match d with 
 | (prefix,prefixLen) -> let b=if prefixLen = 24u6 && 1174414848u32 <=u32 prefix && prefix <u32 1174415104u32 then 
if b.comms[131074u32] then 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[327682u32:=true]; lp= b.lp; med= b.med; } else 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[131074u32:=true]; lp= b.lp; med= b.med; } else 
if isProtocol prot  3u2  then 
if b.comms[131074u32] then 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[327682u32:=true]; lp= b.lp; med= b.med; } else 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[131074u32:=true]; lp= b.lp; med= b.med; } else 
None in 
(match b with 
 | None -> None
 | Some b -> if b.comms[262146u32] then 
None else 
Some {  aslen= b.aslen; bgpAd= b.bgpAd; comms= b.comms; lp= b.lp; med= b.med; }
)
)
 | 21n~9n -> (match d with 
 | (prefix,prefixLen) -> let b=if prefixLen = 24u6 && 1174414848u32 <=u32 prefix && prefix <u32 1174415104u32 then 
if b.comms[131074u32] then 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[327682u32:=true]; lp= b.lp; med= b.med; } else 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[131074u32:=true]; lp= b.lp; med= b.med; } else 
if isProtocol prot  3u2  then 
if b.comms[131074u32] then 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[327682u32:=true]; lp= b.lp; med= b.med; } else 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[131074u32:=true]; lp= b.lp; med= b.med; } else 
None in 
(match b with 
 | None -> None
 | Some b -> if b.comms[262146u32] then 
None else 
Some {  aslen= b.aslen; bgpAd= b.bgpAd; comms= b.comms; lp= b.lp; med= b.med; }
)
)
 | 21n~19n -> (match d with 
 | (prefix,prefixLen) -> let b=if prefixLen = 24u6 && 1174414848u32 <=u32 prefix && prefix <u32 1174415104u32 then 
if b.comms[131074u32] then 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[327682u32:=true]; lp= b.lp; med= b.med; } else 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[131074u32:=true]; lp= b.lp; med= b.med; } else 
if isProtocol prot  3u2  then 
if b.comms[131074u32] then 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[327682u32:=true]; lp= b.lp; med= b.med; } else 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[131074u32:=true]; lp= b.lp; med= b.med; } else 
None in 
(match b with 
 | None -> None
 | Some b -> if b.comms[262146u32] then 
None else 
Some {  aslen= b.aslen; bgpAd= b.bgpAd; comms= b.comms; lp= b.lp; med= b.med; }
)
)
 | 21n~11n -> (match d with 
 | (prefix,prefixLen) -> let b=if prefixLen = 24u6 && 1174414848u32 <=u32 prefix && prefix <u32 1174415104u32 then 
if b.comms[131074u32] then 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[327682u32:=true]; lp= b.lp; med= b.med; } else 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[131074u32:=true]; lp= b.lp; med= b.med; } else 
if isProtocol prot  3u2  then 
if b.comms[131074u32] then 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[327682u32:=true]; lp= b.lp; med= b.med; } else 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[131074u32:=true]; lp= b.lp; med= b.med; } else 
None in 
(match b with 
 | None -> None
 | Some b -> if b.comms[262146u32] then 
None else 
Some {  aslen= b.aslen; bgpAd= b.bgpAd; comms= b.comms; lp= b.lp; med= b.med; }
)
)
 | 22n~11n -> (match d with 
 | (prefix,prefixLen) -> let b=if prefixLen = 24u6 && 1174415104u32 <=u32 prefix && prefix <u32 1174415360u32 then 
if b.comms[131074u32] then 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[327682u32:=true]; lp= b.lp; med= b.med; } else 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[131074u32:=true]; lp= b.lp; med= b.med; } else 
if isProtocol prot  3u2  then 
if b.comms[131074u32] then 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[327682u32:=true]; lp= b.lp; med= b.med; } else 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[131074u32:=true]; lp= b.lp; med= b.med; } else 
None in 
(match b with 
 | None -> None
 | Some b -> if b.comms[262146u32] then 
None else 
Some {  aslen= b.aslen; bgpAd= b.bgpAd; comms= b.comms; lp= b.lp; med= b.med; }
)
)
 | 22n~17n -> (match d with 
 | (prefix,prefixLen) -> let b=if prefixLen = 24u6 && 1174415104u32 <=u32 prefix && prefix <u32 1174415360u32 then 
if b.comms[131074u32] then 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[327682u32:=true]; lp= b.lp; med= b.med; } else 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[131074u32:=true]; lp= b.lp; med= b.med; } else 
if isProtocol prot  3u2  then 
if b.comms[131074u32] then 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[327682u32:=true]; lp= b.lp; med= b.med; } else 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[131074u32:=true]; lp= b.lp; med= b.med; } else 
None in 
(match b with 
 | None -> None
 | Some b -> if b.comms[262146u32] then 
None else 
Some {  aslen= b.aslen; bgpAd= b.bgpAd; comms= b.comms; lp= b.lp; med= b.med; }
)
)
 | 22n~9n -> (match d with 
 | (prefix,prefixLen) -> let b=if prefixLen = 24u6 && 1174415104u32 <=u32 prefix && prefix <u32 1174415360u32 then 
if b.comms[131074u32] then 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[327682u32:=true]; lp= b.lp; med= b.med; } else 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[131074u32:=true]; lp= b.lp; med= b.med; } else 
if isProtocol prot  3u2  then 
if b.comms[131074u32] then 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[327682u32:=true]; lp= b.lp; med= b.med; } else 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[131074u32:=true]; lp= b.lp; med= b.med; } else 
None in 
(match b with 
 | None -> None
 | Some b -> if b.comms[262146u32] then 
None else 
Some {  aslen= b.aslen; bgpAd= b.bgpAd; comms= b.comms; lp= b.lp; med= b.med; }
)
)
 | 22n~19n -> (match d with 
 | (prefix,prefixLen) -> let b=if prefixLen = 24u6 && 1174415104u32 <=u32 prefix && prefix <u32 1174415360u32 then 
if b.comms[131074u32] then 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[327682u32:=true]; lp= b.lp; med= b.med; } else 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[131074u32:=true]; lp= b.lp; med= b.med; } else 
if isProtocol prot  3u2  then 
if b.comms[131074u32] then 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[327682u32:=true]; lp= b.lp; med= b.med; } else 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[131074u32:=true]; lp= b.lp; med= b.med; } else 
None in 
(match b with 
 | None -> None
 | Some b -> if b.comms[262146u32] then 
None else 
Some {  aslen= b.aslen; bgpAd= b.bgpAd; comms= b.comms; lp= b.lp; med= b.med; }
)
)
 | 23n~6n -> (match d with 
 | (prefix,prefixLen) -> let b=if prefixLen = 24u6 && 1174424832u32 <=u32 prefix && prefix <u32 1174425088u32 then 
if b.comms[131079u32] then 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[327687u32:=true]; lp= b.lp; med= b.med; } else 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[131079u32:=true]; lp= b.lp; med= b.med; } else 
if isProtocol prot  3u2  then 
if b.comms[131079u32] then 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[327687u32:=true]; lp= b.lp; med= b.med; } else 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[131079u32:=true]; lp= b.lp; med= b.med; } else 
None in 
(match b with 
 | None -> None
 | Some b -> if b.comms[262151u32] then 
None else 
Some {  aslen= b.aslen; bgpAd= b.bgpAd; comms= b.comms; lp= b.lp; med= b.med; }
)
)
 | 23n~15n -> (match d with 
 | (prefix,prefixLen) -> let b=if prefixLen = 24u6 && 1174424832u32 <=u32 prefix && prefix <u32 1174425088u32 then 
if b.comms[131079u32] then 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[327687u32:=true]; lp= b.lp; med= b.med; } else 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[131079u32:=true]; lp= b.lp; med= b.med; } else 
if isProtocol prot  3u2  then 
if b.comms[131079u32] then 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[327687u32:=true]; lp= b.lp; med= b.med; } else 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[131079u32:=true]; lp= b.lp; med= b.med; } else 
None in 
(match b with 
 | None -> None
 | Some b -> if b.comms[262151u32] then 
None else 
Some {  aslen= b.aslen; bgpAd= b.bgpAd; comms= b.comms; lp= b.lp; med= b.med; }
)
)
 | 23n~7n -> (match d with 
 | (prefix,prefixLen) -> let b=if prefixLen = 24u6 && 1174424832u32 <=u32 prefix && prefix <u32 1174425088u32 then 
if b.comms[131079u32] then 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[327687u32:=true]; lp= b.lp; med= b.med; } else 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[131079u32:=true]; lp= b.lp; med= b.med; } else 
if isProtocol prot  3u2  then 
if b.comms[131079u32] then 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[327687u32:=true]; lp= b.lp; med= b.med; } else 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[131079u32:=true]; lp= b.lp; med= b.med; } else 
None in 
(match b with 
 | None -> None
 | Some b -> if b.comms[262151u32] then 
None else 
Some {  aslen= b.aslen; bgpAd= b.bgpAd; comms= b.comms; lp= b.lp; med= b.med; }
)
)
 | 23n~14n -> (match d with 
 | (prefix,prefixLen) -> let b=if prefixLen = 24u6 && 1174424832u32 <=u32 prefix && prefix <u32 1174425088u32 then 
if b.comms[131079u32] then 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[327687u32:=true]; lp= b.lp; med= b.med; } else 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[131079u32:=true]; lp= b.lp; med= b.med; } else 
if isProtocol prot  3u2  then 
if b.comms[131079u32] then 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[327687u32:=true]; lp= b.lp; med= b.med; } else 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[131079u32:=true]; lp= b.lp; med= b.med; } else 
None in 
(match b with 
 | None -> None
 | Some b -> if b.comms[262151u32] then 
None else 
Some {  aslen= b.aslen; bgpAd= b.bgpAd; comms= b.comms; lp= b.lp; med= b.med; }
)
)
 | 24n~15n -> (match d with 
 | (prefix,prefixLen) -> let b=if prefixLen = 24u6 && 1174425088u32 <=u32 prefix && prefix <u32 1174425344u32 then 
if b.comms[131079u32] then 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[327687u32:=true]; lp= b.lp; med= b.med; } else 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[131079u32:=true]; lp= b.lp; med= b.med; } else 
if isProtocol prot  3u2  then 
if b.comms[131079u32] then 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[327687u32:=true]; lp= b.lp; med= b.med; } else 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[131079u32:=true]; lp= b.lp; med= b.med; } else 
None in 
(match b with 
 | None -> None
 | Some b -> if b.comms[262151u32] then 
None else 
Some {  aslen= b.aslen; bgpAd= b.bgpAd; comms= b.comms; lp= b.lp; med= b.med; }
)
)
 | 24n~7n -> (match d with 
 | (prefix,prefixLen) -> let b=if prefixLen = 24u6 && 1174425088u32 <=u32 prefix && prefix <u32 1174425344u32 then 
if b.comms[131079u32] then 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[327687u32:=true]; lp= b.lp; med= b.med; } else 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[131079u32:=true]; lp= b.lp; med= b.med; } else 
if isProtocol prot  3u2  then 
if b.comms[131079u32] then 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[327687u32:=true]; lp= b.lp; med= b.med; } else 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[131079u32:=true]; lp= b.lp; med= b.med; } else 
None in 
(match b with 
 | None -> None
 | Some b -> if b.comms[262151u32] then 
None else 
Some {  aslen= b.aslen; bgpAd= b.bgpAd; comms= b.comms; lp= b.lp; med= b.med; }
)
)
 | 24n~14n -> (match d with 
 | (prefix,prefixLen) -> let b=if prefixLen = 24u6 && 1174425088u32 <=u32 prefix && prefix <u32 1174425344u32 then 
if b.comms[131079u32] then 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[327687u32:=true]; lp= b.lp; med= b.med; } else 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[131079u32:=true]; lp= b.lp; med= b.med; } else 
if isProtocol prot  3u2  then 
if b.comms[131079u32] then 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[327687u32:=true]; lp= b.lp; med= b.med; } else 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[131079u32:=true]; lp= b.lp; med= b.med; } else 
None in 
(match b with 
 | None -> None
 | Some b -> if b.comms[262151u32] then 
None else 
Some {  aslen= b.aslen; bgpAd= b.bgpAd; comms= b.comms; lp= b.lp; med= b.med; }
)
)
 | 24n~6n -> (match d with 
 | (prefix,prefixLen) -> let b=if prefixLen = 24u6 && 1174425088u32 <=u32 prefix && prefix <u32 1174425344u32 then 
if b.comms[131079u32] then 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[327687u32:=true]; lp= b.lp; med= b.med; } else 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[131079u32:=true]; lp= b.lp; med= b.med; } else 
if isProtocol prot  3u2  then 
if b.comms[131079u32] then 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[327687u32:=true]; lp= b.lp; med= b.med; } else 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[131079u32:=true]; lp= b.lp; med= b.med; } else 
None in 
(match b with 
 | None -> None
 | Some b -> if b.comms[262151u32] then 
None else 
Some {  aslen= b.aslen; bgpAd= b.bgpAd; comms= b.comms; lp= b.lp; med= b.med; }
)
)
 | 25n~71n -> (match d with 
 | (prefix,prefixLen) -> let b=if isProtocol prot  3u2  then 
if b.comms[65537u32] then 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[262145u32:=true]; lp= b.lp; med= b.med; } else 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[65537u32:=true]; lp= b.lp; med= b.med; } else 
None in 
(match b with 
 | None -> None
 | Some b -> if b.comms[393216u32] then 
None else 
Some {  aslen= b.aslen; bgpAd= b.bgpAd; comms= b.comms; lp= b.lp; med= b.med; }
)
)
 | 25n~31n -> (match d with 
 | (prefix,prefixLen) -> let b=if isProtocol prot  3u2  then 
if b.comms[65537u32] then 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[262145u32:=true]; lp= b.lp; med= b.med; } else 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[65537u32:=true]; lp= b.lp; med= b.med; } else 
None in 
(match b with 
 | None -> None
 | Some b -> if b.comms[327681u32] then 
None else 
Some {  aslen= b.aslen; bgpAd= b.bgpAd; comms= b.comms; lp= b.lp; med= b.med; }
)
)
 | 25n~1n -> (match d with 
 | (prefix,prefixLen) -> let b=if isProtocol prot  3u2  then 
if b.comms[65537u32] then 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[262145u32:=true]; lp= b.lp; med= b.med; } else 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[65537u32:=true]; lp= b.lp; med= b.med; } else 
None in 
(match b with 
 | None -> None
 | Some b -> if b.comms[327681u32] then 
None else 
Some {  aslen= b.aslen; bgpAd= b.bgpAd; comms= b.comms; lp= b.lp; med= b.med; }
)
)
 | 25n~0n -> (match d with 
 | (prefix,prefixLen) -> let b=if isProtocol prot  3u2  then 
if b.comms[65537u32] then 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[262145u32:=true]; lp= b.lp; med= b.med; } else 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[65537u32:=true]; lp= b.lp; med= b.med; } else 
None in 
(match b with 
 | None -> None
 | Some b -> if b.comms[327681u32] then 
None else 
Some {  aslen= b.aslen; bgpAd= b.bgpAd; comms= b.comms; lp= b.lp; med= b.med; }
)
)
 | 25n~72n -> (match d with 
 | (prefix,prefixLen) -> let b=if isProtocol prot  3u2  then 
if b.comms[65537u32] then 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[262145u32:=true]; lp= b.lp; med= b.med; } else 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[65537u32:=true]; lp= b.lp; med= b.med; } else 
None in 
(match b with 
 | None -> None
 | Some b -> if b.comms[393216u32] then 
None else 
Some {  aslen= b.aslen; bgpAd= b.bgpAd; comms= b.comms; lp= b.lp; med= b.med; }
)
)
 | 25n~66n -> (match d with 
 | (prefix,prefixLen) -> let b=if isProtocol prot  3u2  then 
if b.comms[65537u32] then 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[262145u32:=true]; lp= b.lp; med= b.med; } else 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[65537u32:=true]; lp= b.lp; med= b.med; } else 
None in 
(match b with 
 | None -> None
 | Some b -> if b.comms[393216u32] then 
None else 
Some {  aslen= b.aslen; bgpAd= b.bgpAd; comms= b.comms; lp= b.lp; med= b.med; }
)
)
 | 25n~29n -> (match d with 
 | (prefix,prefixLen) -> let b=if isProtocol prot  3u2  then 
if b.comms[65537u32] then 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[262145u32:=true]; lp= b.lp; med= b.med; } else 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[65537u32:=true]; lp= b.lp; med= b.med; } else 
None in 
(match b with 
 | None -> None
 | Some b -> if b.comms[327681u32] then 
None else 
Some {  aslen= b.aslen; bgpAd= b.bgpAd; comms= b.comms; lp= b.lp; med= b.med; }
)
)
 | 25n~70n -> (match d with 
 | (prefix,prefixLen) -> let b=if isProtocol prot  3u2  then 
if b.comms[65537u32] then 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[262145u32:=true]; lp= b.lp; med= b.med; } else 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[65537u32:=true]; lp= b.lp; med= b.med; } else 
None in 
(match b with 
 | None -> None
 | Some b -> if b.comms[393216u32] then 
None else 
Some {  aslen= b.aslen; bgpAd= b.bgpAd; comms= b.comms; lp= b.lp; med= b.med; }
)
)
 | 26n~15n -> (match d with 
 | (prefix,prefixLen) -> let b=if prefixLen = 24u6 && 1174425344u32 <=u32 prefix && prefix <u32 1174425600u32 then 
if b.comms[131079u32] then 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[327687u32:=true]; lp= b.lp; med= b.med; } else 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[131079u32:=true]; lp= b.lp; med= b.med; } else 
if isProtocol prot  3u2  then 
if b.comms[131079u32] then 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[327687u32:=true]; lp= b.lp; med= b.med; } else 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[131079u32:=true]; lp= b.lp; med= b.med; } else 
None in 
(match b with 
 | None -> None
 | Some b -> if b.comms[262151u32] then 
None else 
Some {  aslen= b.aslen; bgpAd= b.bgpAd; comms= b.comms; lp= b.lp; med= b.med; }
)
)
 | 26n~14n -> (match d with 
 | (prefix,prefixLen) -> let b=if prefixLen = 24u6 && 1174425344u32 <=u32 prefix && prefix <u32 1174425600u32 then 
if b.comms[131079u32] then 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[327687u32:=true]; lp= b.lp; med= b.med; } else 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[131079u32:=true]; lp= b.lp; med= b.med; } else 
if isProtocol prot  3u2  then 
if b.comms[131079u32] then 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[327687u32:=true]; lp= b.lp; med= b.med; } else 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[131079u32:=true]; lp= b.lp; med= b.med; } else 
None in 
(match b with 
 | None -> None
 | Some b -> if b.comms[262151u32] then 
None else 
Some {  aslen= b.aslen; bgpAd= b.bgpAd; comms= b.comms; lp= b.lp; med= b.med; }
)
)
 | 26n~7n -> (match d with 
 | (prefix,prefixLen) -> let b=if prefixLen = 24u6 && 1174425344u32 <=u32 prefix && prefix <u32 1174425600u32 then 
if b.comms[131079u32] then 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[327687u32:=true]; lp= b.lp; med= b.med; } else 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[131079u32:=true]; lp= b.lp; med= b.med; } else 
if isProtocol prot  3u2  then 
if b.comms[131079u32] then 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[327687u32:=true]; lp= b.lp; med= b.med; } else 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[131079u32:=true]; lp= b.lp; med= b.med; } else 
None in 
(match b with 
 | None -> None
 | Some b -> if b.comms[262151u32] then 
None else 
Some {  aslen= b.aslen; bgpAd= b.bgpAd; comms= b.comms; lp= b.lp; med= b.med; }
)
)
 | 26n~6n -> (match d with 
 | (prefix,prefixLen) -> let b=if prefixLen = 24u6 && 1174425344u32 <=u32 prefix && prefix <u32 1174425600u32 then 
if b.comms[131079u32] then 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[327687u32:=true]; lp= b.lp; med= b.med; } else 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[131079u32:=true]; lp= b.lp; med= b.med; } else 
if isProtocol prot  3u2  then 
if b.comms[131079u32] then 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[327687u32:=true]; lp= b.lp; med= b.med; } else 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[131079u32:=true]; lp= b.lp; med= b.med; } else 
None in 
(match b with 
 | None -> None
 | Some b -> if b.comms[262151u32] then 
None else 
Some {  aslen= b.aslen; bgpAd= b.bgpAd; comms= b.comms; lp= b.lp; med= b.med; }
)
)
 | 27n~17n -> (match d with 
 | (prefix,prefixLen) -> let b=if prefixLen = 24u6 && 1174414336u32 <=u32 prefix && prefix <u32 1174414592u32 then 
if b.comms[131074u32] then 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[327682u32:=true]; lp= b.lp; med= b.med; } else 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[131074u32:=true]; lp= b.lp; med= b.med; } else 
if isProtocol prot  3u2  then 
if b.comms[131074u32] then 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[327682u32:=true]; lp= b.lp; med= b.med; } else 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[131074u32:=true]; lp= b.lp; med= b.med; } else 
None in 
(match b with 
 | None -> None
 | Some b -> if b.comms[262146u32] then 
None else 
Some {  aslen= b.aslen; bgpAd= b.bgpAd; comms= b.comms; lp= b.lp; med= b.med; }
)
)
 | 27n~19n -> (match d with 
 | (prefix,prefixLen) -> let b=if prefixLen = 24u6 && 1174414336u32 <=u32 prefix && prefix <u32 1174414592u32 then 
if b.comms[131074u32] then 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[327682u32:=true]; lp= b.lp; med= b.med; } else 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[131074u32:=true]; lp= b.lp; med= b.med; } else 
if isProtocol prot  3u2  then 
if b.comms[131074u32] then 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[327682u32:=true]; lp= b.lp; med= b.med; } else 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[131074u32:=true]; lp= b.lp; med= b.med; } else 
None in 
(match b with 
 | None -> None
 | Some b -> if b.comms[262146u32] then 
None else 
Some {  aslen= b.aslen; bgpAd= b.bgpAd; comms= b.comms; lp= b.lp; med= b.med; }
)
)
 | 27n~9n -> (match d with 
 | (prefix,prefixLen) -> let b=if prefixLen = 24u6 && 1174414336u32 <=u32 prefix && prefix <u32 1174414592u32 then 
if b.comms[131074u32] then 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[327682u32:=true]; lp= b.lp; med= b.med; } else 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[131074u32:=true]; lp= b.lp; med= b.med; } else 
if isProtocol prot  3u2  then 
if b.comms[131074u32] then 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[327682u32:=true]; lp= b.lp; med= b.med; } else 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[131074u32:=true]; lp= b.lp; med= b.med; } else 
None in 
(match b with 
 | None -> None
 | Some b -> if b.comms[262146u32] then 
None else 
Some {  aslen= b.aslen; bgpAd= b.bgpAd; comms= b.comms; lp= b.lp; med= b.med; }
)
)
 | 27n~11n -> (match d with 
 | (prefix,prefixLen) -> let b=if prefixLen = 24u6 && 1174414336u32 <=u32 prefix && prefix <u32 1174414592u32 then 
if b.comms[131074u32] then 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[327682u32:=true]; lp= b.lp; med= b.med; } else 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[131074u32:=true]; lp= b.lp; med= b.med; } else 
if isProtocol prot  3u2  then 
if b.comms[131074u32] then 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[327682u32:=true]; lp= b.lp; med= b.med; } else 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[131074u32:=true]; lp= b.lp; med= b.med; } else 
None in 
(match b with 
 | None -> None
 | Some b -> if b.comms[262146u32] then 
None else 
Some {  aslen= b.aslen; bgpAd= b.bgpAd; comms= b.comms; lp= b.lp; med= b.med; }
)
)
 | 28n~40n -> (match d with 
 | (prefix,prefixLen) -> let b=if isProtocol prot  3u2  then 
if b.comms[65537u32] then 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[262145u32:=true]; lp= b.lp; med= b.med; } else 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[65537u32:=true]; lp= b.lp; med= b.med; } else 
None in 
(match b with 
 | None -> None
 | Some b -> if b.comms[393216u32] then 
None else 
Some {  aslen= b.aslen; bgpAd= b.bgpAd; comms= b.comms; lp= b.lp; med= b.med; }
)
)
 | 28n~29n -> (match d with 
 | (prefix,prefixLen) -> let b=if isProtocol prot  3u2  then 
if b.comms[65537u32] then 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[262145u32:=true]; lp= b.lp; med= b.med; } else 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[65537u32:=true]; lp= b.lp; med= b.med; } else 
None in 
(match b with 
 | None -> None
 | Some b -> if b.comms[327681u32] then 
None else 
Some {  aslen= b.aslen; bgpAd= b.bgpAd; comms= b.comms; lp= b.lp; med= b.med; }
)
)
 | 28n~1n -> (match d with 
 | (prefix,prefixLen) -> let b=if isProtocol prot  3u2  then 
if b.comms[65537u32] then 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[262145u32:=true]; lp= b.lp; med= b.med; } else 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[65537u32:=true]; lp= b.lp; med= b.med; } else 
None in 
(match b with 
 | None -> None
 | Some b -> if b.comms[327681u32] then 
None else 
Some {  aslen= b.aslen; bgpAd= b.bgpAd; comms= b.comms; lp= b.lp; med= b.med; }
)
)
 | 28n~46n -> (match d with 
 | (prefix,prefixLen) -> let b=if isProtocol prot  3u2  then 
if b.comms[65537u32] then 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[262145u32:=true]; lp= b.lp; med= b.med; } else 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[65537u32:=true]; lp= b.lp; med= b.med; } else 
None in 
(match b with 
 | None -> None
 | Some b -> if b.comms[393216u32] then 
None else 
Some {  aslen= b.aslen; bgpAd= b.bgpAd; comms= b.comms; lp= b.lp; med= b.med; }
)
)
 | 28n~0n -> (match d with 
 | (prefix,prefixLen) -> let b=if isProtocol prot  3u2  then 
if b.comms[65537u32] then 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[262145u32:=true]; lp= b.lp; med= b.med; } else 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[65537u32:=true]; lp= b.lp; med= b.med; } else 
None in 
(match b with 
 | None -> None
 | Some b -> if b.comms[327681u32] then 
None else 
Some {  aslen= b.aslen; bgpAd= b.bgpAd; comms= b.comms; lp= b.lp; med= b.med; }
)
)
 | 28n~31n -> (match d with 
 | (prefix,prefixLen) -> let b=if isProtocol prot  3u2  then 
if b.comms[65537u32] then 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[262145u32:=true]; lp= b.lp; med= b.med; } else 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[65537u32:=true]; lp= b.lp; med= b.med; } else 
None in 
(match b with 
 | None -> None
 | Some b -> if b.comms[327681u32] then 
None else 
Some {  aslen= b.aslen; bgpAd= b.bgpAd; comms= b.comms; lp= b.lp; med= b.med; }
)
)
 | 28n~41n -> (match d with 
 | (prefix,prefixLen) -> let b=if isProtocol prot  3u2  then 
if b.comms[65537u32] then 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[262145u32:=true]; lp= b.lp; med= b.med; } else 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[65537u32:=true]; lp= b.lp; med= b.med; } else 
None in 
(match b with 
 | None -> None
 | Some b -> if b.comms[393216u32] then 
None else 
Some {  aslen= b.aslen; bgpAd= b.bgpAd; comms= b.comms; lp= b.lp; med= b.med; }
)
)
 | 28n~43n -> (match d with 
 | (prefix,prefixLen) -> let b=if isProtocol prot  3u2  then 
if b.comms[65537u32] then 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[262145u32:=true]; lp= b.lp; med= b.med; } else 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[65537u32:=true]; lp= b.lp; med= b.med; } else 
None in 
(match b with 
 | None -> None
 | Some b -> if b.comms[393216u32] then 
None else 
Some {  aslen= b.aslen; bgpAd= b.bgpAd; comms= b.comms; lp= b.lp; med= b.med; }
)
)
 | 29n~25n -> (match d with 
 | (prefix,prefixLen) -> let b=if prefixLen = 24u6 && 1174412800u32 <=u32 prefix && prefix <u32 1174413056u32 then 
if b.comms[131073u32] then 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[327681u32:=true]; lp= b.lp; med= b.med; } else 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[131073u32:=true]; lp= b.lp; med= b.med; } else 
if isProtocol prot  3u2  then 
if b.comms[131073u32] then 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[327681u32:=true]; lp= b.lp; med= b.med; } else 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[131073u32:=true]; lp= b.lp; med= b.med; } else 
None in 
(match b with 
 | None -> None
 | Some b -> if b.comms[262145u32] then 
None else 
Some {  aslen= b.aslen; bgpAd= b.bgpAd; comms= b.comms; lp= b.lp; med= b.med; }
)
)
 | 29n~28n -> (match d with 
 | (prefix,prefixLen) -> let b=if prefixLen = 24u6 && 1174412800u32 <=u32 prefix && prefix <u32 1174413056u32 then 
if b.comms[131073u32] then 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[327681u32:=true]; lp= b.lp; med= b.med; } else 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[131073u32:=true]; lp= b.lp; med= b.med; } else 
if isProtocol prot  3u2  then 
if b.comms[131073u32] then 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[327681u32:=true]; lp= b.lp; med= b.med; } else 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[131073u32:=true]; lp= b.lp; med= b.med; } else 
None in 
(match b with 
 | None -> None
 | Some b -> if b.comms[262145u32] then 
None else 
Some {  aslen= b.aslen; bgpAd= b.bgpAd; comms= b.comms; lp= b.lp; med= b.med; }
)
)
 | 29n~32n -> (match d with 
 | (prefix,prefixLen) -> let b=if prefixLen = 24u6 && 1174412800u32 <=u32 prefix && prefix <u32 1174413056u32 then 
if b.comms[131073u32] then 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[327681u32:=true]; lp= b.lp; med= b.med; } else 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[131073u32:=true]; lp= b.lp; med= b.med; } else 
if isProtocol prot  3u2  then 
if b.comms[131073u32] then 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[327681u32:=true]; lp= b.lp; med= b.med; } else 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[131073u32:=true]; lp= b.lp; med= b.med; } else 
None in 
(match b with 
 | None -> None
 | Some b -> if b.comms[262145u32] then 
None else 
Some {  aslen= b.aslen; bgpAd= b.bgpAd; comms= b.comms; lp= b.lp; med= b.med; }
)
)
 | 29n~34n -> (match d with 
 | (prefix,prefixLen) -> let b=if prefixLen = 24u6 && 1174412800u32 <=u32 prefix && prefix <u32 1174413056u32 then 
if b.comms[131073u32] then 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[327681u32:=true]; lp= b.lp; med= b.med; } else 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[131073u32:=true]; lp= b.lp; med= b.med; } else 
if isProtocol prot  3u2  then 
if b.comms[131073u32] then 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[327681u32:=true]; lp= b.lp; med= b.med; } else 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[131073u32:=true]; lp= b.lp; med= b.med; } else 
None in 
(match b with 
 | None -> None
 | Some b -> if b.comms[262145u32] then 
None else 
Some {  aslen= b.aslen; bgpAd= b.bgpAd; comms= b.comms; lp= b.lp; med= b.med; }
)
)
 | 30n~5n -> (match d with 
 | (prefix,prefixLen) -> let b=if isProtocol prot  3u2  then 
if b.comms[65542u32] then 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[262150u32:=true]; lp= b.lp; med= b.med; } else 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[65542u32:=true]; lp= b.lp; med= b.med; } else 
None in 
(match b with 
 | None -> None
 | Some b -> if b.comms[327686u32] then 
None else 
Some {  aslen= b.aslen; bgpAd= b.bgpAd; comms= b.comms; lp= b.lp; med= b.med; }
)
)
 | 30n~36n -> (match d with 
 | (prefix,prefixLen) -> let b=if isProtocol prot  3u2  then 
if b.comms[65542u32] then 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[262150u32:=true]; lp= b.lp; med= b.med; } else 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[65542u32:=true]; lp= b.lp; med= b.med; } else 
None in 
(match b with 
 | None -> None
 | Some b -> if b.comms[327686u32] then 
None else 
Some {  aslen= b.aslen; bgpAd= b.bgpAd; comms= b.comms; lp= b.lp; med= b.med; }
)
)
 | 30n~70n -> (match d with 
 | (prefix,prefixLen) -> let b=if isProtocol prot  3u2  then 
if b.comms[65542u32] then 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[262150u32:=true]; lp= b.lp; med= b.med; } else 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[65542u32:=true]; lp= b.lp; med= b.med; } else 
None in 
(match b with 
 | None -> None
 | Some b -> if b.comms[393216u32] then 
None else 
Some {  aslen= b.aslen; bgpAd= b.bgpAd; comms= b.comms; lp= b.lp; med= b.med; }
)
)
 | 30n~66n -> (match d with 
 | (prefix,prefixLen) -> let b=if isProtocol prot  3u2  then 
if b.comms[65542u32] then 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[262150u32:=true]; lp= b.lp; med= b.med; } else 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[65542u32:=true]; lp= b.lp; med= b.med; } else 
None in 
(match b with 
 | None -> None
 | Some b -> if b.comms[393216u32] then 
None else 
Some {  aslen= b.aslen; bgpAd= b.bgpAd; comms= b.comms; lp= b.lp; med= b.med; }
)
)
 | 30n~72n -> (match d with 
 | (prefix,prefixLen) -> let b=if isProtocol prot  3u2  then 
if b.comms[65542u32] then 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[262150u32:=true]; lp= b.lp; med= b.med; } else 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[65542u32:=true]; lp= b.lp; med= b.med; } else 
None in 
(match b with 
 | None -> None
 | Some b -> if b.comms[393216u32] then 
None else 
Some {  aslen= b.aslen; bgpAd= b.bgpAd; comms= b.comms; lp= b.lp; med= b.med; }
)
)
 | 30n~71n -> (match d with 
 | (prefix,prefixLen) -> let b=if isProtocol prot  3u2  then 
if b.comms[65542u32] then 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[262150u32:=true]; lp= b.lp; med= b.med; } else 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[65542u32:=true]; lp= b.lp; med= b.med; } else 
None in 
(match b with 
 | None -> None
 | Some b -> if b.comms[393216u32] then 
None else 
Some {  aslen= b.aslen; bgpAd= b.bgpAd; comms= b.comms; lp= b.lp; med= b.med; }
)
)
 | 30n~4n -> (match d with 
 | (prefix,prefixLen) -> let b=if isProtocol prot  3u2  then 
if b.comms[65542u32] then 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[262150u32:=true]; lp= b.lp; med= b.med; } else 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[65542u32:=true]; lp= b.lp; med= b.med; } else 
None in 
(match b with 
 | None -> None
 | Some b -> if b.comms[327686u32] then 
None else 
Some {  aslen= b.aslen; bgpAd= b.bgpAd; comms= b.comms; lp= b.lp; med= b.med; }
)
)
 | 30n~37n -> (match d with 
 | (prefix,prefixLen) -> let b=if isProtocol prot  3u2  then 
if b.comms[65542u32] then 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[262150u32:=true]; lp= b.lp; med= b.med; } else 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[65542u32:=true]; lp= b.lp; med= b.med; } else 
None in 
(match b with 
 | None -> None
 | Some b -> if b.comms[327686u32] then 
None else 
Some {  aslen= b.aslen; bgpAd= b.bgpAd; comms= b.comms; lp= b.lp; med= b.med; }
)
)
 | 31n~34n -> (match d with 
 | (prefix,prefixLen) -> let b=if prefixLen = 24u6 && 1174413056u32 <=u32 prefix && prefix <u32 1174413312u32 then 
if b.comms[131073u32] then 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[327681u32:=true]; lp= b.lp; med= b.med; } else 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[131073u32:=true]; lp= b.lp; med= b.med; } else 
if isProtocol prot  3u2  then 
if b.comms[131073u32] then 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[327681u32:=true]; lp= b.lp; med= b.med; } else 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[131073u32:=true]; lp= b.lp; med= b.med; } else 
None in 
(match b with 
 | None -> None
 | Some b -> if b.comms[262145u32] then 
None else 
Some {  aslen= b.aslen; bgpAd= b.bgpAd; comms= b.comms; lp= b.lp; med= b.med; }
)
)
 | 31n~28n -> (match d with 
 | (prefix,prefixLen) -> let b=if prefixLen = 24u6 && 1174413056u32 <=u32 prefix && prefix <u32 1174413312u32 then 
if b.comms[131073u32] then 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[327681u32:=true]; lp= b.lp; med= b.med; } else 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[131073u32:=true]; lp= b.lp; med= b.med; } else 
if isProtocol prot  3u2  then 
if b.comms[131073u32] then 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[327681u32:=true]; lp= b.lp; med= b.med; } else 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[131073u32:=true]; lp= b.lp; med= b.med; } else 
None in 
(match b with 
 | None -> None
 | Some b -> if b.comms[262145u32] then 
None else 
Some {  aslen= b.aslen; bgpAd= b.bgpAd; comms= b.comms; lp= b.lp; med= b.med; }
)
)
 | 31n~25n -> (match d with 
 | (prefix,prefixLen) -> let b=if prefixLen = 24u6 && 1174413056u32 <=u32 prefix && prefix <u32 1174413312u32 then 
if b.comms[131073u32] then 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[327681u32:=true]; lp= b.lp; med= b.med; } else 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[131073u32:=true]; lp= b.lp; med= b.med; } else 
if isProtocol prot  3u2  then 
if b.comms[131073u32] then 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[327681u32:=true]; lp= b.lp; med= b.med; } else 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[131073u32:=true]; lp= b.lp; med= b.med; } else 
None in 
(match b with 
 | None -> None
 | Some b -> if b.comms[262145u32] then 
None else 
Some {  aslen= b.aslen; bgpAd= b.bgpAd; comms= b.comms; lp= b.lp; med= b.med; }
)
)
 | 31n~32n -> (match d with 
 | (prefix,prefixLen) -> let b=if prefixLen = 24u6 && 1174413056u32 <=u32 prefix && prefix <u32 1174413312u32 then 
if b.comms[131073u32] then 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[327681u32:=true]; lp= b.lp; med= b.med; } else 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[131073u32:=true]; lp= b.lp; med= b.med; } else 
if isProtocol prot  3u2  then 
if b.comms[131073u32] then 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[327681u32:=true]; lp= b.lp; med= b.med; } else 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[131073u32:=true]; lp= b.lp; med= b.med; } else 
None in 
(match b with 
 | None -> None
 | Some b -> if b.comms[262145u32] then 
None else 
Some {  aslen= b.aslen; bgpAd= b.bgpAd; comms= b.comms; lp= b.lp; med= b.med; }
)
)
 | 32n~29n -> (match d with 
 | (prefix,prefixLen) -> let b=if isProtocol prot  3u2  then 
if b.comms[65537u32] then 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[262145u32:=true]; lp= b.lp; med= b.med; } else 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[65537u32:=true]; lp= b.lp; med= b.med; } else 
None in 
(match b with 
 | None -> None
 | Some b -> if b.comms[327681u32] then 
None else 
Some {  aslen= b.aslen; bgpAd= b.bgpAd; comms= b.comms; lp= b.lp; med= b.med; }
)
)
 | 32n~1n -> (match d with 
 | (prefix,prefixLen) -> let b=if isProtocol prot  3u2  then 
if b.comms[65537u32] then 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[262145u32:=true]; lp= b.lp; med= b.med; } else 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[65537u32:=true]; lp= b.lp; med= b.med; } else 
None in 
(match b with 
 | None -> None
 | Some b -> if b.comms[327681u32] then 
None else 
Some {  aslen= b.aslen; bgpAd= b.bgpAd; comms= b.comms; lp= b.lp; med= b.med; }
)
)
 | 32n~68n -> (match d with 
 | (prefix,prefixLen) -> let b=if isProtocol prot  3u2  then 
if b.comms[65537u32] then 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[262145u32:=true]; lp= b.lp; med= b.med; } else 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[65537u32:=true]; lp= b.lp; med= b.med; } else 
None in 
(match b with 
 | None -> None
 | Some b -> if b.comms[393216u32] then 
None else 
Some {  aslen= b.aslen; bgpAd= b.bgpAd; comms= b.comms; lp= b.lp; med= b.med; }
)
)
 | 32n~31n -> (match d with 
 | (prefix,prefixLen) -> let b=if isProtocol prot  3u2  then 
if b.comms[65537u32] then 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[262145u32:=true]; lp= b.lp; med= b.med; } else 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[65537u32:=true]; lp= b.lp; med= b.med; } else 
None in 
(match b with 
 | None -> None
 | Some b -> if b.comms[327681u32] then 
None else 
Some {  aslen= b.aslen; bgpAd= b.bgpAd; comms= b.comms; lp= b.lp; med= b.med; }
)
)
 | 32n~57n -> (match d with 
 | (prefix,prefixLen) -> let b=if isProtocol prot  3u2  then 
if b.comms[65537u32] then 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[262145u32:=true]; lp= b.lp; med= b.med; } else 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[65537u32:=true]; lp= b.lp; med= b.med; } else 
None in 
(match b with 
 | None -> None
 | Some b -> if b.comms[393216u32] then 
None else 
Some {  aslen= b.aslen; bgpAd= b.bgpAd; comms= b.comms; lp= b.lp; med= b.med; }
)
)
 | 32n~67n -> (match d with 
 | (prefix,prefixLen) -> let b=if isProtocol prot  3u2  then 
if b.comms[65537u32] then 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[262145u32:=true]; lp= b.lp; med= b.med; } else 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[65537u32:=true]; lp= b.lp; med= b.med; } else 
None in 
(match b with 
 | None -> None
 | Some b -> if b.comms[393216u32] then 
None else 
Some {  aslen= b.aslen; bgpAd= b.bgpAd; comms= b.comms; lp= b.lp; med= b.med; }
)
)
 | 32n~56n -> (match d with 
 | (prefix,prefixLen) -> let b=if isProtocol prot  3u2  then 
if b.comms[65537u32] then 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[262145u32:=true]; lp= b.lp; med= b.med; } else 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[65537u32:=true]; lp= b.lp; med= b.med; } else 
None in 
(match b with 
 | None -> None
 | Some b -> if b.comms[393216u32] then 
None else 
Some {  aslen= b.aslen; bgpAd= b.bgpAd; comms= b.comms; lp= b.lp; med= b.med; }
)
)
 | 32n~0n -> (match d with 
 | (prefix,prefixLen) -> let b=if isProtocol prot  3u2  then 
if b.comms[65537u32] then 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[262145u32:=true]; lp= b.lp; med= b.med; } else 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[65537u32:=true]; lp= b.lp; med= b.med; } else 
None in 
(match b with 
 | None -> None
 | Some b -> if b.comms[327681u32] then 
None else 
Some {  aslen= b.aslen; bgpAd= b.bgpAd; comms= b.comms; lp= b.lp; med= b.med; }
)
)
 | 33n~14n -> (match d with 
 | (prefix,prefixLen) -> let b=if prefixLen = 24u6 && 1174424576u32 <=u32 prefix && prefix <u32 1174424832u32 then 
if b.comms[131079u32] then 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[327687u32:=true]; lp= b.lp; med= b.med; } else 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[131079u32:=true]; lp= b.lp; med= b.med; } else 
if isProtocol prot  3u2  then 
if b.comms[131079u32] then 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[327687u32:=true]; lp= b.lp; med= b.med; } else 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[131079u32:=true]; lp= b.lp; med= b.med; } else 
None in 
(match b with 
 | None -> None
 | Some b -> if b.comms[262151u32] then 
None else 
Some {  aslen= b.aslen; bgpAd= b.bgpAd; comms= b.comms; lp= b.lp; med= b.med; }
)
)
 | 33n~6n -> (match d with 
 | (prefix,prefixLen) -> let b=if prefixLen = 24u6 && 1174424576u32 <=u32 prefix && prefix <u32 1174424832u32 then 
if b.comms[131079u32] then 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[327687u32:=true]; lp= b.lp; med= b.med; } else 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[131079u32:=true]; lp= b.lp; med= b.med; } else 
if isProtocol prot  3u2  then 
if b.comms[131079u32] then 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[327687u32:=true]; lp= b.lp; med= b.med; } else 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[131079u32:=true]; lp= b.lp; med= b.med; } else 
None in 
(match b with 
 | None -> None
 | Some b -> if b.comms[262151u32] then 
None else 
Some {  aslen= b.aslen; bgpAd= b.bgpAd; comms= b.comms; lp= b.lp; med= b.med; }
)
)
 | 33n~15n -> (match d with 
 | (prefix,prefixLen) -> let b=if prefixLen = 24u6 && 1174424576u32 <=u32 prefix && prefix <u32 1174424832u32 then 
if b.comms[131079u32] then 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[327687u32:=true]; lp= b.lp; med= b.med; } else 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[131079u32:=true]; lp= b.lp; med= b.med; } else 
if isProtocol prot  3u2  then 
if b.comms[131079u32] then 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[327687u32:=true]; lp= b.lp; med= b.med; } else 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[131079u32:=true]; lp= b.lp; med= b.med; } else 
None in 
(match b with 
 | None -> None
 | Some b -> if b.comms[262151u32] then 
None else 
Some {  aslen= b.aslen; bgpAd= b.bgpAd; comms= b.comms; lp= b.lp; med= b.med; }
)
)
 | 33n~7n -> (match d with 
 | (prefix,prefixLen) -> let b=if prefixLen = 24u6 && 1174424576u32 <=u32 prefix && prefix <u32 1174424832u32 then 
if b.comms[131079u32] then 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[327687u32:=true]; lp= b.lp; med= b.med; } else 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[131079u32:=true]; lp= b.lp; med= b.med; } else 
if isProtocol prot  3u2  then 
if b.comms[131079u32] then 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[327687u32:=true]; lp= b.lp; med= b.med; } else 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[131079u32:=true]; lp= b.lp; med= b.med; } else 
None in 
(match b with 
 | None -> None
 | Some b -> if b.comms[262151u32] then 
None else 
Some {  aslen= b.aslen; bgpAd= b.bgpAd; comms= b.comms; lp= b.lp; med= b.med; }
)
)
 | 34n~29n -> (match d with 
 | (prefix,prefixLen) -> let b=if isProtocol prot  3u2  then 
if b.comms[65537u32] then 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[262145u32:=true]; lp= b.lp; med= b.med; } else 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[65537u32:=true]; lp= b.lp; med= b.med; } else 
None in 
(match b with 
 | None -> None
 | Some b -> if b.comms[327681u32] then 
None else 
Some {  aslen= b.aslen; bgpAd= b.bgpAd; comms= b.comms; lp= b.lp; med= b.med; }
)
)
 | 34n~1n -> (match d with 
 | (prefix,prefixLen) -> let b=if isProtocol prot  3u2  then 
if b.comms[65537u32] then 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[262145u32:=true]; lp= b.lp; med= b.med; } else 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[65537u32:=true]; lp= b.lp; med= b.med; } else 
None in 
(match b with 
 | None -> None
 | Some b -> if b.comms[327681u32] then 
None else 
Some {  aslen= b.aslen; bgpAd= b.bgpAd; comms= b.comms; lp= b.lp; med= b.med; }
)
)
 | 34n~55n -> (match d with 
 | (prefix,prefixLen) -> let b=if isProtocol prot  3u2  then 
if b.comms[65537u32] then 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[262145u32:=true]; lp= b.lp; med= b.med; } else 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[65537u32:=true]; lp= b.lp; med= b.med; } else 
None in 
(match b with 
 | None -> None
 | Some b -> if b.comms[393216u32] then 
None else 
Some {  aslen= b.aslen; bgpAd= b.bgpAd; comms= b.comms; lp= b.lp; med= b.med; }
)
)
 | 34n~49n -> (match d with 
 | (prefix,prefixLen) -> let b=if isProtocol prot  3u2  then 
if b.comms[65537u32] then 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[262145u32:=true]; lp= b.lp; med= b.med; } else 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[65537u32:=true]; lp= b.lp; med= b.med; } else 
None in 
(match b with 
 | None -> None
 | Some b -> if b.comms[393216u32] then 
None else 
Some {  aslen= b.aslen; bgpAd= b.bgpAd; comms= b.comms; lp= b.lp; med= b.med; }
)
)
 | 34n~0n -> (match d with 
 | (prefix,prefixLen) -> let b=if isProtocol prot  3u2  then 
if b.comms[65537u32] then 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[262145u32:=true]; lp= b.lp; med= b.med; } else 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[65537u32:=true]; lp= b.lp; med= b.med; } else 
None in 
(match b with 
 | None -> None
 | Some b -> if b.comms[327681u32] then 
None else 
Some {  aslen= b.aslen; bgpAd= b.bgpAd; comms= b.comms; lp= b.lp; med= b.med; }
)
)
 | 34n~31n -> (match d with 
 | (prefix,prefixLen) -> let b=if isProtocol prot  3u2  then 
if b.comms[65537u32] then 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[262145u32:=true]; lp= b.lp; med= b.med; } else 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[65537u32:=true]; lp= b.lp; med= b.med; } else 
None in 
(match b with 
 | None -> None
 | Some b -> if b.comms[327681u32] then 
None else 
Some {  aslen= b.aslen; bgpAd= b.bgpAd; comms= b.comms; lp= b.lp; med= b.med; }
)
)
 | 34n~52n -> (match d with 
 | (prefix,prefixLen) -> let b=if isProtocol prot  3u2  then 
if b.comms[65537u32] then 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[262145u32:=true]; lp= b.lp; med= b.med; } else 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[65537u32:=true]; lp= b.lp; med= b.med; } else 
None in 
(match b with 
 | None -> None
 | Some b -> if b.comms[393216u32] then 
None else 
Some {  aslen= b.aslen; bgpAd= b.bgpAd; comms= b.comms; lp= b.lp; med= b.med; }
)
)
 | 34n~54n -> (match d with 
 | (prefix,prefixLen) -> let b=if isProtocol prot  3u2  then 
if b.comms[65537u32] then 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[262145u32:=true]; lp= b.lp; med= b.med; } else 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[65537u32:=true]; lp= b.lp; med= b.med; } else 
None in 
(match b with 
 | None -> None
 | Some b -> if b.comms[393216u32] then 
None else 
Some {  aslen= b.aslen; bgpAd= b.bgpAd; comms= b.comms; lp= b.lp; med= b.med; }
)
)
 | 35n~37n -> (match d with 
 | (prefix,prefixLen) -> let b=if isProtocol prot  3u2  then 
if b.comms[65542u32] then 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[262150u32:=true]; lp= b.lp; med= b.med; } else 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[65542u32:=true]; lp= b.lp; med= b.med; } else 
None in 
(match b with 
 | None -> None
 | Some b -> if b.comms[327686u32] then 
None else 
Some {  aslen= b.aslen; bgpAd= b.bgpAd; comms= b.comms; lp= b.lp; med= b.med; }
)
)
 | 35n~46n -> (match d with 
 | (prefix,prefixLen) -> let b=if isProtocol prot  3u2  then 
if b.comms[65542u32] then 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[262150u32:=true]; lp= b.lp; med= b.med; } else 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[65542u32:=true]; lp= b.lp; med= b.med; } else 
None in 
(match b with 
 | None -> None
 | Some b -> if b.comms[393216u32] then 
None else 
Some {  aslen= b.aslen; bgpAd= b.bgpAd; comms= b.comms; lp= b.lp; med= b.med; }
)
)
 | 35n~40n -> (match d with 
 | (prefix,prefixLen) -> let b=if isProtocol prot  3u2  then 
if b.comms[65542u32] then 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[262150u32:=true]; lp= b.lp; med= b.med; } else 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[65542u32:=true]; lp= b.lp; med= b.med; } else 
None in 
(match b with 
 | None -> None
 | Some b -> if b.comms[393216u32] then 
None else 
Some {  aslen= b.aslen; bgpAd= b.bgpAd; comms= b.comms; lp= b.lp; med= b.med; }
)
)
 | 35n~5n -> (match d with 
 | (prefix,prefixLen) -> let b=if isProtocol prot  3u2  then 
if b.comms[65542u32] then 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[262150u32:=true]; lp= b.lp; med= b.med; } else 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[65542u32:=true]; lp= b.lp; med= b.med; } else 
None in 
(match b with 
 | None -> None
 | Some b -> if b.comms[327686u32] then 
None else 
Some {  aslen= b.aslen; bgpAd= b.bgpAd; comms= b.comms; lp= b.lp; med= b.med; }
)
)
 | 35n~43n -> (match d with 
 | (prefix,prefixLen) -> let b=if isProtocol prot  3u2  then 
if b.comms[65542u32] then 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[262150u32:=true]; lp= b.lp; med= b.med; } else 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[65542u32:=true]; lp= b.lp; med= b.med; } else 
None in 
(match b with 
 | None -> None
 | Some b -> if b.comms[393216u32] then 
None else 
Some {  aslen= b.aslen; bgpAd= b.bgpAd; comms= b.comms; lp= b.lp; med= b.med; }
)
)
 | 35n~4n -> (match d with 
 | (prefix,prefixLen) -> let b=if isProtocol prot  3u2  then 
if b.comms[65542u32] then 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[262150u32:=true]; lp= b.lp; med= b.med; } else 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[65542u32:=true]; lp= b.lp; med= b.med; } else 
None in 
(match b with 
 | None -> None
 | Some b -> if b.comms[327686u32] then 
None else 
Some {  aslen= b.aslen; bgpAd= b.bgpAd; comms= b.comms; lp= b.lp; med= b.med; }
)
)
 | 35n~41n -> (match d with 
 | (prefix,prefixLen) -> let b=if isProtocol prot  3u2  then 
if b.comms[65542u32] then 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[262150u32:=true]; lp= b.lp; med= b.med; } else 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[65542u32:=true]; lp= b.lp; med= b.med; } else 
None in 
(match b with 
 | None -> None
 | Some b -> if b.comms[393216u32] then 
None else 
Some {  aslen= b.aslen; bgpAd= b.bgpAd; comms= b.comms; lp= b.lp; med= b.med; }
)
)
 | 35n~36n -> (match d with 
 | (prefix,prefixLen) -> let b=if isProtocol prot  3u2  then 
if b.comms[65542u32] then 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[262150u32:=true]; lp= b.lp; med= b.med; } else 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[65542u32:=true]; lp= b.lp; med= b.med; } else 
None in 
(match b with 
 | None -> None
 | Some b -> if b.comms[327686u32] then 
None else 
Some {  aslen= b.aslen; bgpAd= b.bgpAd; comms= b.comms; lp= b.lp; med= b.med; }
)
)
 | 36n~30n -> (match d with 
 | (prefix,prefixLen) -> let b=if prefixLen = 24u6 && 1174423040u32 <=u32 prefix && prefix <u32 1174423296u32 then 
if b.comms[131078u32] then 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[327686u32:=true]; lp= b.lp; med= b.med; } else 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[131078u32:=true]; lp= b.lp; med= b.med; } else 
if isProtocol prot  3u2  then 
if b.comms[131078u32] then 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[327686u32:=true]; lp= b.lp; med= b.med; } else 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[131078u32:=true]; lp= b.lp; med= b.med; } else 
None in 
(match b with 
 | None -> None
 | Some b -> if b.comms[262150u32] then 
None else 
Some {  aslen= b.aslen; bgpAd= b.bgpAd; comms= b.comms; lp= b.lp; med= b.med; }
)
)
 | 36n~39n -> (match d with 
 | (prefix,prefixLen) -> let b=if prefixLen = 24u6 && 1174423040u32 <=u32 prefix && prefix <u32 1174423296u32 then 
if b.comms[131078u32] then 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[327686u32:=true]; lp= b.lp; med= b.med; } else 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[131078u32:=true]; lp= b.lp; med= b.med; } else 
if isProtocol prot  3u2  then 
if b.comms[131078u32] then 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[327686u32:=true]; lp= b.lp; med= b.med; } else 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[131078u32:=true]; lp= b.lp; med= b.med; } else 
None in 
(match b with 
 | None -> None
 | Some b -> if b.comms[262150u32] then 
None else 
Some {  aslen= b.aslen; bgpAd= b.bgpAd; comms= b.comms; lp= b.lp; med= b.med; }
)
)
 | 36n~35n -> (match d with 
 | (prefix,prefixLen) -> let b=if prefixLen = 24u6 && 1174423040u32 <=u32 prefix && prefix <u32 1174423296u32 then 
if b.comms[131078u32] then 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[327686u32:=true]; lp= b.lp; med= b.med; } else 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[131078u32:=true]; lp= b.lp; med= b.med; } else 
if isProtocol prot  3u2  then 
if b.comms[131078u32] then 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[327686u32:=true]; lp= b.lp; med= b.med; } else 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[131078u32:=true]; lp= b.lp; med= b.med; } else 
None in 
(match b with 
 | None -> None
 | Some b -> if b.comms[262150u32] then 
None else 
Some {  aslen= b.aslen; bgpAd= b.bgpAd; comms= b.comms; lp= b.lp; med= b.med; }
)
)
 | 36n~38n -> (match d with 
 | (prefix,prefixLen) -> let b=if prefixLen = 24u6 && 1174423040u32 <=u32 prefix && prefix <u32 1174423296u32 then 
if b.comms[131078u32] then 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[327686u32:=true]; lp= b.lp; med= b.med; } else 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[131078u32:=true]; lp= b.lp; med= b.med; } else 
if isProtocol prot  3u2  then 
if b.comms[131078u32] then 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[327686u32:=true]; lp= b.lp; med= b.med; } else 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[131078u32:=true]; lp= b.lp; med= b.med; } else 
None in 
(match b with 
 | None -> None
 | Some b -> if b.comms[262150u32] then 
None else 
Some {  aslen= b.aslen; bgpAd= b.bgpAd; comms= b.comms; lp= b.lp; med= b.med; }
)
)
 | 37n~30n -> (match d with 
 | (prefix,prefixLen) -> let b=if prefixLen = 24u6 && 1174423296u32 <=u32 prefix && prefix <u32 1174423552u32 then 
if b.comms[131078u32] then 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[327686u32:=true]; lp= b.lp; med= b.med; } else 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[131078u32:=true]; lp= b.lp; med= b.med; } else 
if isProtocol prot  3u2  then 
if b.comms[131078u32] then 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[327686u32:=true]; lp= b.lp; med= b.med; } else 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[131078u32:=true]; lp= b.lp; med= b.med; } else 
None in 
(match b with 
 | None -> None
 | Some b -> if b.comms[262150u32] then 
None else 
Some {  aslen= b.aslen; bgpAd= b.bgpAd; comms= b.comms; lp= b.lp; med= b.med; }
)
)
 | 37n~35n -> (match d with 
 | (prefix,prefixLen) -> let b=if prefixLen = 24u6 && 1174423296u32 <=u32 prefix && prefix <u32 1174423552u32 then 
if b.comms[131078u32] then 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[327686u32:=true]; lp= b.lp; med= b.med; } else 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[131078u32:=true]; lp= b.lp; med= b.med; } else 
if isProtocol prot  3u2  then 
if b.comms[131078u32] then 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[327686u32:=true]; lp= b.lp; med= b.med; } else 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[131078u32:=true]; lp= b.lp; med= b.med; } else 
None in 
(match b with 
 | None -> None
 | Some b -> if b.comms[262150u32] then 
None else 
Some {  aslen= b.aslen; bgpAd= b.bgpAd; comms= b.comms; lp= b.lp; med= b.med; }
)
)
 | 37n~39n -> (match d with 
 | (prefix,prefixLen) -> let b=if prefixLen = 24u6 && 1174423296u32 <=u32 prefix && prefix <u32 1174423552u32 then 
if b.comms[131078u32] then 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[327686u32:=true]; lp= b.lp; med= b.med; } else 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[131078u32:=true]; lp= b.lp; med= b.med; } else 
if isProtocol prot  3u2  then 
if b.comms[131078u32] then 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[327686u32:=true]; lp= b.lp; med= b.med; } else 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[131078u32:=true]; lp= b.lp; med= b.med; } else 
None in 
(match b with 
 | None -> None
 | Some b -> if b.comms[262150u32] then 
None else 
Some {  aslen= b.aslen; bgpAd= b.bgpAd; comms= b.comms; lp= b.lp; med= b.med; }
)
)
 | 37n~38n -> (match d with 
 | (prefix,prefixLen) -> let b=if prefixLen = 24u6 && 1174423296u32 <=u32 prefix && prefix <u32 1174423552u32 then 
if b.comms[131078u32] then 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[327686u32:=true]; lp= b.lp; med= b.med; } else 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[131078u32:=true]; lp= b.lp; med= b.med; } else 
if isProtocol prot  3u2  then 
if b.comms[131078u32] then 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[327686u32:=true]; lp= b.lp; med= b.med; } else 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[131078u32:=true]; lp= b.lp; med= b.med; } else 
None in 
(match b with 
 | None -> None
 | Some b -> if b.comms[262150u32] then 
None else 
Some {  aslen= b.aslen; bgpAd= b.bgpAd; comms= b.comms; lp= b.lp; med= b.med; }
)
)
 | 38n~36n -> (match d with 
 | (prefix,prefixLen) -> let b=if isProtocol prot  3u2  then 
if b.comms[65542u32] then 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[262150u32:=true]; lp= b.lp; med= b.med; } else 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[65542u32:=true]; lp= b.lp; med= b.med; } else 
None in 
(match b with 
 | None -> None
 | Some b -> if b.comms[327686u32] then 
None else 
Some {  aslen= b.aslen; bgpAd= b.bgpAd; comms= b.comms; lp= b.lp; med= b.med; }
)
)
 | 38n~67n -> (match d with 
 | (prefix,prefixLen) -> let b=if isProtocol prot  3u2  then 
if b.comms[65542u32] then 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[262150u32:=true]; lp= b.lp; med= b.med; } else 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[65542u32:=true]; lp= b.lp; med= b.med; } else 
None in 
(match b with 
 | None -> None
 | Some b -> if b.comms[393216u32] then 
None else 
Some {  aslen= b.aslen; bgpAd= b.bgpAd; comms= b.comms; lp= b.lp; med= b.med; }
)
)
 | 38n~5n -> (match d with 
 | (prefix,prefixLen) -> let b=if isProtocol prot  3u2  then 
if b.comms[65542u32] then 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[262150u32:=true]; lp= b.lp; med= b.med; } else 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[65542u32:=true]; lp= b.lp; med= b.med; } else 
None in 
(match b with 
 | None -> None
 | Some b -> if b.comms[327686u32] then 
None else 
Some {  aslen= b.aslen; bgpAd= b.bgpAd; comms= b.comms; lp= b.lp; med= b.med; }
)
)
 | 38n~57n -> (match d with 
 | (prefix,prefixLen) -> let b=if isProtocol prot  3u2  then 
if b.comms[65542u32] then 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[262150u32:=true]; lp= b.lp; med= b.med; } else 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[65542u32:=true]; lp= b.lp; med= b.med; } else 
None in 
(match b with 
 | None -> None
 | Some b -> if b.comms[393216u32] then 
None else 
Some {  aslen= b.aslen; bgpAd= b.bgpAd; comms= b.comms; lp= b.lp; med= b.med; }
)
)
 | 38n~68n -> (match d with 
 | (prefix,prefixLen) -> let b=if isProtocol prot  3u2  then 
if b.comms[65542u32] then 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[262150u32:=true]; lp= b.lp; med= b.med; } else 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[65542u32:=true]; lp= b.lp; med= b.med; } else 
None in 
(match b with 
 | None -> None
 | Some b -> if b.comms[393216u32] then 
None else 
Some {  aslen= b.aslen; bgpAd= b.bgpAd; comms= b.comms; lp= b.lp; med= b.med; }
)
)
 | 38n~37n -> (match d with 
 | (prefix,prefixLen) -> let b=if isProtocol prot  3u2  then 
if b.comms[65542u32] then 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[262150u32:=true]; lp= b.lp; med= b.med; } else 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[65542u32:=true]; lp= b.lp; med= b.med; } else 
None in 
(match b with 
 | None -> None
 | Some b -> if b.comms[327686u32] then 
None else 
Some {  aslen= b.aslen; bgpAd= b.bgpAd; comms= b.comms; lp= b.lp; med= b.med; }
)
)
 | 38n~4n -> (match d with 
 | (prefix,prefixLen) -> let b=if isProtocol prot  3u2  then 
if b.comms[65542u32] then 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[262150u32:=true]; lp= b.lp; med= b.med; } else 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[65542u32:=true]; lp= b.lp; med= b.med; } else 
None in 
(match b with 
 | None -> None
 | Some b -> if b.comms[327686u32] then 
None else 
Some {  aslen= b.aslen; bgpAd= b.bgpAd; comms= b.comms; lp= b.lp; med= b.med; }
)
)
 | 38n~56n -> (match d with 
 | (prefix,prefixLen) -> let b=if isProtocol prot  3u2  then 
if b.comms[65542u32] then 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[262150u32:=true]; lp= b.lp; med= b.med; } else 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[65542u32:=true]; lp= b.lp; med= b.med; } else 
None in 
(match b with 
 | None -> None
 | Some b -> if b.comms[393216u32] then 
None else 
Some {  aslen= b.aslen; bgpAd= b.bgpAd; comms= b.comms; lp= b.lp; med= b.med; }
)
)
 | 39n~49n -> (match d with 
 | (prefix,prefixLen) -> let b=if isProtocol prot  3u2  then 
if b.comms[65542u32] then 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[262150u32:=true]; lp= b.lp; med= b.med; } else 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[65542u32:=true]; lp= b.lp; med= b.med; } else 
None in 
(match b with 
 | None -> None
 | Some b -> if b.comms[393216u32] then 
None else 
Some {  aslen= b.aslen; bgpAd= b.bgpAd; comms= b.comms; lp= b.lp; med= b.med; }
)
)
 | 39n~52n -> (match d with 
 | (prefix,prefixLen) -> let b=if isProtocol prot  3u2  then 
if b.comms[65542u32] then 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[262150u32:=true]; lp= b.lp; med= b.med; } else 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[65542u32:=true]; lp= b.lp; med= b.med; } else 
None in 
(match b with 
 | None -> None
 | Some b -> if b.comms[393216u32] then 
None else 
Some {  aslen= b.aslen; bgpAd= b.bgpAd; comms= b.comms; lp= b.lp; med= b.med; }
)
)
 | 39n~54n -> (match d with 
 | (prefix,prefixLen) -> let b=if isProtocol prot  3u2  then 
if b.comms[65542u32] then 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[262150u32:=true]; lp= b.lp; med= b.med; } else 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[65542u32:=true]; lp= b.lp; med= b.med; } else 
None in 
(match b with 
 | None -> None
 | Some b -> if b.comms[393216u32] then 
None else 
Some {  aslen= b.aslen; bgpAd= b.bgpAd; comms= b.comms; lp= b.lp; med= b.med; }
)
)
 | 39n~37n -> (match d with 
 | (prefix,prefixLen) -> let b=if isProtocol prot  3u2  then 
if b.comms[65542u32] then 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[262150u32:=true]; lp= b.lp; med= b.med; } else 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[65542u32:=true]; lp= b.lp; med= b.med; } else 
None in 
(match b with 
 | None -> None
 | Some b -> if b.comms[327686u32] then 
None else 
Some {  aslen= b.aslen; bgpAd= b.bgpAd; comms= b.comms; lp= b.lp; med= b.med; }
)
)
 | 39n~5n -> (match d with 
 | (prefix,prefixLen) -> let b=if isProtocol prot  3u2  then 
if b.comms[65542u32] then 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[262150u32:=true]; lp= b.lp; med= b.med; } else 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[65542u32:=true]; lp= b.lp; med= b.med; } else 
None in 
(match b with 
 | None -> None
 | Some b -> if b.comms[327686u32] then 
None else 
Some {  aslen= b.aslen; bgpAd= b.bgpAd; comms= b.comms; lp= b.lp; med= b.med; }
)
)
 | 39n~4n -> (match d with 
 | (prefix,prefixLen) -> let b=if isProtocol prot  3u2  then 
if b.comms[65542u32] then 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[262150u32:=true]; lp= b.lp; med= b.med; } else 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[65542u32:=true]; lp= b.lp; med= b.med; } else 
None in 
(match b with 
 | None -> None
 | Some b -> if b.comms[327686u32] then 
None else 
Some {  aslen= b.aslen; bgpAd= b.bgpAd; comms= b.comms; lp= b.lp; med= b.med; }
)
)
 | 39n~55n -> (match d with 
 | (prefix,prefixLen) -> let b=if isProtocol prot  3u2  then 
if b.comms[65542u32] then 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[262150u32:=true]; lp= b.lp; med= b.med; } else 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[65542u32:=true]; lp= b.lp; med= b.med; } else 
None in 
(match b with 
 | None -> None
 | Some b -> if b.comms[393216u32] then 
None else 
Some {  aslen= b.aslen; bgpAd= b.bgpAd; comms= b.comms; lp= b.lp; med= b.med; }
)
)
 | 39n~36n -> (match d with 
 | (prefix,prefixLen) -> let b=if isProtocol prot  3u2  then 
if b.comms[65542u32] then 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[262150u32:=true]; lp= b.lp; med= b.med; } else 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[65542u32:=true]; lp= b.lp; med= b.med; } else 
None in 
(match b with 
 | None -> None
 | Some b -> if b.comms[327686u32] then 
None else 
Some {  aslen= b.aslen; bgpAd= b.bgpAd; comms= b.comms; lp= b.lp; med= b.med; }
)
)
 | 40n~35n -> (match d with 
 | (prefix,prefixLen) -> let b=if isProtocol prot  3u2  then 
if b.comms[196608u32] then 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[393216u32:=true]; lp= b.lp; med= b.med; } else 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[196608u32:=true]; lp= b.lp; med= b.med; } else 
None in 
(match b with 
 | None -> None
 | Some b -> if b.comms[262150u32] then 
None else 
Some {  aslen= b.aslen; bgpAd= b.bgpAd; comms= b.comms; lp= b.lp; med= b.med; }
)
)
 | 40n~7n -> (match d with 
 | (prefix,prefixLen) -> let b=if isProtocol prot  3u2  then 
if b.comms[196608u32] then 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[393216u32:=true]; lp= b.lp; med= b.med; } else 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[196608u32:=true]; lp= b.lp; med= b.med; } else 
None in 
(match b with 
 | None -> None
 | Some b -> if b.comms[262151u32] then 
None else 
Some {  aslen= b.aslen; bgpAd= b.bgpAd; comms= b.comms; lp= b.lp; med= b.med; }
)
)
 | 40n~75n -> (match d with 
 | (prefix,prefixLen) -> let b=if isProtocol prot  3u2  then 
if b.comms[196608u32] then 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[393216u32:=true]; lp= b.lp; med= b.med; } else 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[196608u32:=true]; lp= b.lp; med= b.med; } else 
None in 
(match b with 
 | None -> None
 | Some b -> if b.comms[262148u32] then 
None else 
Some {  aslen= b.aslen; bgpAd= b.bgpAd; comms= b.comms; lp= b.lp; med= b.med; }
)
)
 | 40n~28n -> (match d with 
 | (prefix,prefixLen) -> let b=if isProtocol prot  3u2  then 
if b.comms[196608u32] then 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[393216u32:=true]; lp= b.lp; med= b.med; } else 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[196608u32:=true]; lp= b.lp; med= b.med; } else 
None in 
(match b with 
 | None -> None
 | Some b -> if b.comms[262145u32] then 
None else 
Some {  aslen= b.aslen; bgpAd= b.bgpAd; comms= b.comms; lp= b.lp; med= b.med; }
)
)
 | 40n~61n -> (match d with 
 | (prefix,prefixLen) -> let b=if isProtocol prot  3u2  then 
if b.comms[196608u32] then 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[393216u32:=true]; lp= b.lp; med= b.med; } else 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[196608u32:=true]; lp= b.lp; med= b.med; } else 
None in 
(match b with 
 | None -> None
 | Some b -> if b.comms[262149u32] then 
None else 
Some {  aslen= b.aslen; bgpAd= b.bgpAd; comms= b.comms; lp= b.lp; med= b.med; }
)
)
 | 40n~69n -> (match d with 
 | (prefix,prefixLen) -> let b=if isProtocol prot  3u2  then 
if b.comms[196608u32] then 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[393216u32:=true]; lp= b.lp; med= b.med; } else 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[196608u32:=true]; lp= b.lp; med= b.med; } else 
None in 
(match b with 
 | None -> None
 | Some b -> if b.comms[262147u32] then 
None else 
Some {  aslen= b.aslen; bgpAd= b.bgpAd; comms= b.comms; lp= b.lp; med= b.med; }
)
)
 | 40n~47n -> (match d with 
 | (prefix,prefixLen) -> let b=if isProtocol prot  3u2  then 
if b.comms[196608u32] then 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[393216u32:=true]; lp= b.lp; med= b.med; } else 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[196608u32:=true]; lp= b.lp; med= b.med; } else 
None in 
(match b with 
 | None -> None
 | Some b -> if b.comms[262144u32] then 
None else 
Some {  aslen= b.aslen; bgpAd= b.bgpAd; comms= b.comms; lp= b.lp; med= b.med; }
)
)
 | 40n~19n -> (match d with 
 | (prefix,prefixLen) -> let b=if isProtocol prot  3u2  then 
if b.comms[196608u32] then 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[393216u32:=true]; lp= b.lp; med= b.med; } else 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[196608u32:=true]; lp= b.lp; med= b.med; } else 
None in 
(match b with 
 | None -> None
 | Some b -> if b.comms[262146u32] then 
None else 
Some {  aslen= b.aslen; bgpAd= b.bgpAd; comms= b.comms; lp= b.lp; med= b.med; }
)
)
 | 41n~75n -> (match d with 
 | (prefix,prefixLen) -> let b=if isProtocol prot  3u2  then 
if b.comms[196608u32] then 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[393216u32:=true]; lp= b.lp; med= b.med; } else 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[196608u32:=true]; lp= b.lp; med= b.med; } else 
None in 
(match b with 
 | None -> None
 | Some b -> if b.comms[262148u32] then 
None else 
Some {  aslen= b.aslen; bgpAd= b.bgpAd; comms= b.comms; lp= b.lp; med= b.med; }
)
)
 | 41n~35n -> (match d with 
 | (prefix,prefixLen) -> let b=if isProtocol prot  3u2  then 
if b.comms[196608u32] then 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[393216u32:=true]; lp= b.lp; med= b.med; } else 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[196608u32:=true]; lp= b.lp; med= b.med; } else 
None in 
(match b with 
 | None -> None
 | Some b -> if b.comms[262150u32] then 
None else 
Some {  aslen= b.aslen; bgpAd= b.bgpAd; comms= b.comms; lp= b.lp; med= b.med; }
)
)
 | 41n~69n -> (match d with 
 | (prefix,prefixLen) -> let b=if isProtocol prot  3u2  then 
if b.comms[196608u32] then 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[393216u32:=true]; lp= b.lp; med= b.med; } else 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[196608u32:=true]; lp= b.lp; med= b.med; } else 
None in 
(match b with 
 | None -> None
 | Some b -> if b.comms[262147u32] then 
None else 
Some {  aslen= b.aslen; bgpAd= b.bgpAd; comms= b.comms; lp= b.lp; med= b.med; }
)
)
 | 41n~47n -> (match d with 
 | (prefix,prefixLen) -> let b=if isProtocol prot  3u2  then 
if b.comms[196608u32] then 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[393216u32:=true]; lp= b.lp; med= b.med; } else 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[196608u32:=true]; lp= b.lp; med= b.med; } else 
None in 
(match b with 
 | None -> None
 | Some b -> if b.comms[262144u32] then 
None else 
Some {  aslen= b.aslen; bgpAd= b.bgpAd; comms= b.comms; lp= b.lp; med= b.med; }
)
)
 | 41n~61n -> (match d with 
 | (prefix,prefixLen) -> let b=if isProtocol prot  3u2  then 
if b.comms[196608u32] then 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[393216u32:=true]; lp= b.lp; med= b.med; } else 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[196608u32:=true]; lp= b.lp; med= b.med; } else 
None in 
(match b with 
 | None -> None
 | Some b -> if b.comms[262149u32] then 
None else 
Some {  aslen= b.aslen; bgpAd= b.bgpAd; comms= b.comms; lp= b.lp; med= b.med; }
)
)
 | 41n~28n -> (match d with 
 | (prefix,prefixLen) -> let b=if isProtocol prot  3u2  then 
if b.comms[196608u32] then 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[393216u32:=true]; lp= b.lp; med= b.med; } else 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[196608u32:=true]; lp= b.lp; med= b.med; } else 
None in 
(match b with 
 | None -> None
 | Some b -> if b.comms[262145u32] then 
None else 
Some {  aslen= b.aslen; bgpAd= b.bgpAd; comms= b.comms; lp= b.lp; med= b.med; }
)
)
 | 41n~7n -> (match d with 
 | (prefix,prefixLen) -> let b=if isProtocol prot  3u2  then 
if b.comms[196608u32] then 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[393216u32:=true]; lp= b.lp; med= b.med; } else 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[196608u32:=true]; lp= b.lp; med= b.med; } else 
None in 
(match b with 
 | None -> None
 | Some b -> if b.comms[262151u32] then 
None else 
Some {  aslen= b.aslen; bgpAd= b.bgpAd; comms= b.comms; lp= b.lp; med= b.med; }
)
)
 | 41n~19n -> (match d with 
 | (prefix,prefixLen) -> let b=if isProtocol prot  3u2  then 
if b.comms[196608u32] then 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[393216u32:=true]; lp= b.lp; med= b.med; } else 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[196608u32:=true]; lp= b.lp; med= b.med; } else 
None in 
(match b with 
 | None -> None
 | Some b -> if b.comms[262146u32] then 
None else 
Some {  aslen= b.aslen; bgpAd= b.bgpAd; comms= b.comms; lp= b.lp; med= b.med; }
)
)
 | 42n~69n -> (match d with 
 | (prefix,prefixLen) -> let b=if prefixLen = 24u6 && 1174416384u32 <=u32 prefix && prefix <u32 1174416640u32 then 
if b.comms[131075u32] then 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[327683u32:=true]; lp= b.lp; med= b.med; } else 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[131075u32:=true]; lp= b.lp; med= b.med; } else 
if isProtocol prot  3u2  then 
if b.comms[131075u32] then 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[327683u32:=true]; lp= b.lp; med= b.med; } else 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[131075u32:=true]; lp= b.lp; med= b.med; } else 
None in 
(match b with 
 | None -> None
 | Some b -> if b.comms[262147u32] then 
None else 
Some {  aslen= b.aslen; bgpAd= b.bgpAd; comms= b.comms; lp= b.lp; med= b.med; }
)
)
 | 42n~79n -> (match d with 
 | (prefix,prefixLen) -> let b=if prefixLen = 24u6 && 1174416384u32 <=u32 prefix && prefix <u32 1174416640u32 then 
if b.comms[131075u32] then 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[327683u32:=true]; lp= b.lp; med= b.med; } else 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[131075u32:=true]; lp= b.lp; med= b.med; } else 
if isProtocol prot  3u2  then 
if b.comms[131075u32] then 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[327683u32:=true]; lp= b.lp; med= b.med; } else 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[131075u32:=true]; lp= b.lp; med= b.med; } else 
None in 
(match b with 
 | None -> None
 | Some b -> if b.comms[262147u32] then 
None else 
Some {  aslen= b.aslen; bgpAd= b.bgpAd; comms= b.comms; lp= b.lp; med= b.med; }
)
)
 | 42n~78n -> (match d with 
 | (prefix,prefixLen) -> let b=if prefixLen = 24u6 && 1174416384u32 <=u32 prefix && prefix <u32 1174416640u32 then 
if b.comms[131075u32] then 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[327683u32:=true]; lp= b.lp; med= b.med; } else 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[131075u32:=true]; lp= b.lp; med= b.med; } else 
if isProtocol prot  3u2  then 
if b.comms[131075u32] then 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[327683u32:=true]; lp= b.lp; med= b.med; } else 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[131075u32:=true]; lp= b.lp; med= b.med; } else 
None in 
(match b with 
 | None -> None
 | Some b -> if b.comms[262147u32] then 
None else 
Some {  aslen= b.aslen; bgpAd= b.bgpAd; comms= b.comms; lp= b.lp; med= b.med; }
)
)
 | 42n~77n -> (match d with 
 | (prefix,prefixLen) -> let b=if prefixLen = 24u6 && 1174416384u32 <=u32 prefix && prefix <u32 1174416640u32 then 
if b.comms[131075u32] then 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[327683u32:=true]; lp= b.lp; med= b.med; } else 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[131075u32:=true]; lp= b.lp; med= b.med; } else 
if isProtocol prot  3u2  then 
if b.comms[131075u32] then 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[327683u32:=true]; lp= b.lp; med= b.med; } else 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[131075u32:=true]; lp= b.lp; med= b.med; } else 
None in 
(match b with 
 | None -> None
 | Some b -> if b.comms[262147u32] then 
None else 
Some {  aslen= b.aslen; bgpAd= b.bgpAd; comms= b.comms; lp= b.lp; med= b.med; }
)
)
 | 43n~35n -> (match d with 
 | (prefix,prefixLen) -> let b=if isProtocol prot  3u2  then 
if b.comms[196608u32] then 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[393216u32:=true]; lp= b.lp; med= b.med; } else 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[196608u32:=true]; lp= b.lp; med= b.med; } else 
None in 
(match b with 
 | None -> None
 | Some b -> if b.comms[262150u32] then 
None else 
Some {  aslen= b.aslen; bgpAd= b.bgpAd; comms= b.comms; lp= b.lp; med= b.med; }
)
)
 | 43n~28n -> (match d with 
 | (prefix,prefixLen) -> let b=if isProtocol prot  3u2  then 
if b.comms[196608u32] then 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[393216u32:=true]; lp= b.lp; med= b.med; } else 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[196608u32:=true]; lp= b.lp; med= b.med; } else 
None in 
(match b with 
 | None -> None
 | Some b -> if b.comms[262145u32] then 
None else 
Some {  aslen= b.aslen; bgpAd= b.bgpAd; comms= b.comms; lp= b.lp; med= b.med; }
)
)
 | 43n~19n -> (match d with 
 | (prefix,prefixLen) -> let b=if isProtocol prot  3u2  then 
if b.comms[196608u32] then 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[393216u32:=true]; lp= b.lp; med= b.med; } else 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[196608u32:=true]; lp= b.lp; med= b.med; } else 
None in 
(match b with 
 | None -> None
 | Some b -> if b.comms[262146u32] then 
None else 
Some {  aslen= b.aslen; bgpAd= b.bgpAd; comms= b.comms; lp= b.lp; med= b.med; }
)
)
 | 43n~7n -> (match d with 
 | (prefix,prefixLen) -> let b=if isProtocol prot  3u2  then 
if b.comms[196608u32] then 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[393216u32:=true]; lp= b.lp; med= b.med; } else 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[196608u32:=true]; lp= b.lp; med= b.med; } else 
None in 
(match b with 
 | None -> None
 | Some b -> if b.comms[262151u32] then 
None else 
Some {  aslen= b.aslen; bgpAd= b.bgpAd; comms= b.comms; lp= b.lp; med= b.med; }
)
)
 | 43n~75n -> (match d with 
 | (prefix,prefixLen) -> let b=if isProtocol prot  3u2  then 
if b.comms[196608u32] then 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[393216u32:=true]; lp= b.lp; med= b.med; } else 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[196608u32:=true]; lp= b.lp; med= b.med; } else 
None in 
(match b with 
 | None -> None
 | Some b -> if b.comms[262148u32] then 
None else 
Some {  aslen= b.aslen; bgpAd= b.bgpAd; comms= b.comms; lp= b.lp; med= b.med; }
)
)
 | 43n~61n -> (match d with 
 | (prefix,prefixLen) -> let b=if isProtocol prot  3u2  then 
if b.comms[196608u32] then 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[393216u32:=true]; lp= b.lp; med= b.med; } else 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[196608u32:=true]; lp= b.lp; med= b.med; } else 
None in 
(match b with 
 | None -> None
 | Some b -> if b.comms[262149u32] then 
None else 
Some {  aslen= b.aslen; bgpAd= b.bgpAd; comms= b.comms; lp= b.lp; med= b.med; }
)
)
 | 43n~47n -> (match d with 
 | (prefix,prefixLen) -> let b=if isProtocol prot  3u2  then 
if b.comms[196608u32] then 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[393216u32:=true]; lp= b.lp; med= b.med; } else 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[196608u32:=true]; lp= b.lp; med= b.med; } else 
None in 
(match b with 
 | None -> None
 | Some b -> if b.comms[262144u32] then 
None else 
Some {  aslen= b.aslen; bgpAd= b.bgpAd; comms= b.comms; lp= b.lp; med= b.med; }
)
)
 | 43n~69n -> (match d with 
 | (prefix,prefixLen) -> let b=if isProtocol prot  3u2  then 
if b.comms[196608u32] then 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[393216u32:=true]; lp= b.lp; med= b.med; } else 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[196608u32:=true]; lp= b.lp; med= b.med; } else 
None in 
(match b with 
 | None -> None
 | Some b -> if b.comms[262147u32] then 
None else 
Some {  aslen= b.aslen; bgpAd= b.bgpAd; comms= b.comms; lp= b.lp; med= b.med; }
)
)
 | 44n~54n -> (match d with 
 | (prefix,prefixLen) -> let b=if isProtocol prot  3u2  then 
if b.comms[65536u32] then 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[262144u32:=true]; lp= b.lp; med= b.med; } else 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[65536u32:=true]; lp= b.lp; med= b.med; } else 
None in 
(match b with 
 | None -> None
 | Some b -> if b.comms[393216u32] then 
None else 
Some {  aslen= b.aslen; bgpAd= b.bgpAd; comms= b.comms; lp= b.lp; med= b.med; }
)
)
 | 44n~52n -> (match d with 
 | (prefix,prefixLen) -> let b=if isProtocol prot  3u2  then 
if b.comms[65536u32] then 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[262144u32:=true]; lp= b.lp; med= b.med; } else 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[65536u32:=true]; lp= b.lp; med= b.med; } else 
None in 
(match b with 
 | None -> None
 | Some b -> if b.comms[393216u32] then 
None else 
Some {  aslen= b.aslen; bgpAd= b.bgpAd; comms= b.comms; lp= b.lp; med= b.med; }
)
)
 | 44n~2n -> (match d with 
 | (prefix,prefixLen) -> let b=if isProtocol prot  3u2  then 
if b.comms[65536u32] then 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[262144u32:=true]; lp= b.lp; med= b.med; } else 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[65536u32:=true]; lp= b.lp; med= b.med; } else 
None in 
(match b with 
 | None -> None
 | Some b -> if b.comms[327680u32] then 
None else 
Some {  aslen= b.aslen; bgpAd= b.bgpAd; comms= b.comms; lp= b.lp; med= b.med; }
)
)
 | 44n~49n -> (match d with 
 | (prefix,prefixLen) -> let b=if isProtocol prot  3u2  then 
if b.comms[65536u32] then 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[262144u32:=true]; lp= b.lp; med= b.med; } else 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[65536u32:=true]; lp= b.lp; med= b.med; } else 
None in 
(match b with 
 | None -> None
 | Some b -> if b.comms[393216u32] then 
None else 
Some {  aslen= b.aslen; bgpAd= b.bgpAd; comms= b.comms; lp= b.lp; med= b.med; }
)
)
 | 44n~12n -> (match d with 
 | (prefix,prefixLen) -> let b=if isProtocol prot  3u2  then 
if b.comms[65536u32] then 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[262144u32:=true]; lp= b.lp; med= b.med; } else 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[65536u32:=true]; lp= b.lp; med= b.med; } else 
None in 
(match b with 
 | None -> None
 | Some b -> if b.comms[327680u32] then 
None else 
Some {  aslen= b.aslen; bgpAd= b.bgpAd; comms= b.comms; lp= b.lp; med= b.med; }
)
)
 | 44n~3n -> (match d with 
 | (prefix,prefixLen) -> let b=if isProtocol prot  3u2  then 
if b.comms[65536u32] then 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[262144u32:=true]; lp= b.lp; med= b.med; } else 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[65536u32:=true]; lp= b.lp; med= b.med; } else 
None in 
(match b with 
 | None -> None
 | Some b -> if b.comms[327680u32] then 
None else 
Some {  aslen= b.aslen; bgpAd= b.bgpAd; comms= b.comms; lp= b.lp; med= b.med; }
)
)
 | 44n~13n -> (match d with 
 | (prefix,prefixLen) -> let b=if isProtocol prot  3u2  then 
if b.comms[65536u32] then 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[262144u32:=true]; lp= b.lp; med= b.med; } else 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[65536u32:=true]; lp= b.lp; med= b.med; } else 
None in 
(match b with 
 | None -> None
 | Some b -> if b.comms[327680u32] then 
None else 
Some {  aslen= b.aslen; bgpAd= b.bgpAd; comms= b.comms; lp= b.lp; med= b.med; }
)
)
 | 44n~55n -> (match d with 
 | (prefix,prefixLen) -> let b=if isProtocol prot  3u2  then 
if b.comms[65536u32] then 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[262144u32:=true]; lp= b.lp; med= b.med; } else 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[65536u32:=true]; lp= b.lp; med= b.med; } else 
None in 
(match b with 
 | None -> None
 | Some b -> if b.comms[393216u32] then 
None else 
Some {  aslen= b.aslen; bgpAd= b.bgpAd; comms= b.comms; lp= b.lp; med= b.med; }
)
)
 | 45n~78n -> (match d with 
 | (prefix,prefixLen) -> let b=if prefixLen = 24u6 && 1174416640u32 <=u32 prefix && prefix <u32 1174416896u32 then 
if b.comms[131075u32] then 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[327683u32:=true]; lp= b.lp; med= b.med; } else 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[131075u32:=true]; lp= b.lp; med= b.med; } else 
if isProtocol prot  3u2  then 
if b.comms[131075u32] then 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[327683u32:=true]; lp= b.lp; med= b.med; } else 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[131075u32:=true]; lp= b.lp; med= b.med; } else 
None in 
(match b with 
 | None -> None
 | Some b -> if b.comms[262147u32] then 
None else 
Some {  aslen= b.aslen; bgpAd= b.bgpAd; comms= b.comms; lp= b.lp; med= b.med; }
)
)
 | 45n~77n -> (match d with 
 | (prefix,prefixLen) -> let b=if prefixLen = 24u6 && 1174416640u32 <=u32 prefix && prefix <u32 1174416896u32 then 
if b.comms[131075u32] then 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[327683u32:=true]; lp= b.lp; med= b.med; } else 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[131075u32:=true]; lp= b.lp; med= b.med; } else 
if isProtocol prot  3u2  then 
if b.comms[131075u32] then 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[327683u32:=true]; lp= b.lp; med= b.med; } else 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[131075u32:=true]; lp= b.lp; med= b.med; } else 
None in 
(match b with 
 | None -> None
 | Some b -> if b.comms[262147u32] then 
None else 
Some {  aslen= b.aslen; bgpAd= b.bgpAd; comms= b.comms; lp= b.lp; med= b.med; }
)
)
 | 45n~69n -> (match d with 
 | (prefix,prefixLen) -> let b=if prefixLen = 24u6 && 1174416640u32 <=u32 prefix && prefix <u32 1174416896u32 then 
if b.comms[131075u32] then 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[327683u32:=true]; lp= b.lp; med= b.med; } else 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[131075u32:=true]; lp= b.lp; med= b.med; } else 
if isProtocol prot  3u2  then 
if b.comms[131075u32] then 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[327683u32:=true]; lp= b.lp; med= b.med; } else 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[131075u32:=true]; lp= b.lp; med= b.med; } else 
None in 
(match b with 
 | None -> None
 | Some b -> if b.comms[262147u32] then 
None else 
Some {  aslen= b.aslen; bgpAd= b.bgpAd; comms= b.comms; lp= b.lp; med= b.med; }
)
)
 | 45n~79n -> (match d with 
 | (prefix,prefixLen) -> let b=if prefixLen = 24u6 && 1174416640u32 <=u32 prefix && prefix <u32 1174416896u32 then 
if b.comms[131075u32] then 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[327683u32:=true]; lp= b.lp; med= b.med; } else 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[131075u32:=true]; lp= b.lp; med= b.med; } else 
if isProtocol prot  3u2  then 
if b.comms[131075u32] then 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[327683u32:=true]; lp= b.lp; med= b.med; } else 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[131075u32:=true]; lp= b.lp; med= b.med; } else 
None in 
(match b with 
 | None -> None
 | Some b -> if b.comms[262147u32] then 
None else 
Some {  aslen= b.aslen; bgpAd= b.bgpAd; comms= b.comms; lp= b.lp; med= b.med; }
)
)
 | 46n~28n -> (match d with 
 | (prefix,prefixLen) -> let b=if isProtocol prot  3u2  then 
if b.comms[196608u32] then 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[393216u32:=true]; lp= b.lp; med= b.med; } else 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[196608u32:=true]; lp= b.lp; med= b.med; } else 
None in 
(match b with 
 | None -> None
 | Some b -> if b.comms[262145u32] then 
None else 
Some {  aslen= b.aslen; bgpAd= b.bgpAd; comms= b.comms; lp= b.lp; med= b.med; }
)
)
 | 46n~75n -> (match d with 
 | (prefix,prefixLen) -> let b=if isProtocol prot  3u2  then 
if b.comms[196608u32] then 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[393216u32:=true]; lp= b.lp; med= b.med; } else 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[196608u32:=true]; lp= b.lp; med= b.med; } else 
None in 
(match b with 
 | None -> None
 | Some b -> if b.comms[262148u32] then 
None else 
Some {  aslen= b.aslen; bgpAd= b.bgpAd; comms= b.comms; lp= b.lp; med= b.med; }
)
)
 | 46n~35n -> (match d with 
 | (prefix,prefixLen) -> let b=if isProtocol prot  3u2  then 
if b.comms[196608u32] then 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[393216u32:=true]; lp= b.lp; med= b.med; } else 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[196608u32:=true]; lp= b.lp; med= b.med; } else 
None in 
(match b with 
 | None -> None
 | Some b -> if b.comms[262150u32] then 
None else 
Some {  aslen= b.aslen; bgpAd= b.bgpAd; comms= b.comms; lp= b.lp; med= b.med; }
)
)
 | 46n~61n -> (match d with 
 | (prefix,prefixLen) -> let b=if isProtocol prot  3u2  then 
if b.comms[196608u32] then 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[393216u32:=true]; lp= b.lp; med= b.med; } else 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[196608u32:=true]; lp= b.lp; med= b.med; } else 
None in 
(match b with 
 | None -> None
 | Some b -> if b.comms[262149u32] then 
None else 
Some {  aslen= b.aslen; bgpAd= b.bgpAd; comms= b.comms; lp= b.lp; med= b.med; }
)
)
 | 46n~7n -> (match d with 
 | (prefix,prefixLen) -> let b=if isProtocol prot  3u2  then 
if b.comms[196608u32] then 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[393216u32:=true]; lp= b.lp; med= b.med; } else 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[196608u32:=true]; lp= b.lp; med= b.med; } else 
None in 
(match b with 
 | None -> None
 | Some b -> if b.comms[262151u32] then 
None else 
Some {  aslen= b.aslen; bgpAd= b.bgpAd; comms= b.comms; lp= b.lp; med= b.med; }
)
)
 | 46n~19n -> (match d with 
 | (prefix,prefixLen) -> let b=if isProtocol prot  3u2  then 
if b.comms[196608u32] then 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[393216u32:=true]; lp= b.lp; med= b.med; } else 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[196608u32:=true]; lp= b.lp; med= b.med; } else 
None in 
(match b with 
 | None -> None
 | Some b -> if b.comms[262146u32] then 
None else 
Some {  aslen= b.aslen; bgpAd= b.bgpAd; comms= b.comms; lp= b.lp; med= b.med; }
)
)
 | 46n~47n -> (match d with 
 | (prefix,prefixLen) -> let b=if isProtocol prot  3u2  then 
if b.comms[196608u32] then 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[393216u32:=true]; lp= b.lp; med= b.med; } else 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[196608u32:=true]; lp= b.lp; med= b.med; } else 
None in 
(match b with 
 | None -> None
 | Some b -> if b.comms[262144u32] then 
None else 
Some {  aslen= b.aslen; bgpAd= b.bgpAd; comms= b.comms; lp= b.lp; med= b.med; }
)
)
 | 46n~69n -> (match d with 
 | (prefix,prefixLen) -> let b=if isProtocol prot  3u2  then 
if b.comms[196608u32] then 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[393216u32:=true]; lp= b.lp; med= b.med; } else 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[196608u32:=true]; lp= b.lp; med= b.med; } else 
None in 
(match b with 
 | None -> None
 | Some b -> if b.comms[262147u32] then 
None else 
Some {  aslen= b.aslen; bgpAd= b.bgpAd; comms= b.comms; lp= b.lp; med= b.med; }
)
)
 | 47n~13n -> (match d with 
 | (prefix,prefixLen) -> let b=if isProtocol prot  3u2  then 
if b.comms[65536u32] then 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[262144u32:=true]; lp= b.lp; med= b.med; } else 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[65536u32:=true]; lp= b.lp; med= b.med; } else 
None in 
(match b with 
 | None -> None
 | Some b -> if b.comms[327680u32] then 
None else 
Some {  aslen= b.aslen; bgpAd= b.bgpAd; comms= b.comms; lp= b.lp; med= b.med; }
)
)
 | 47n~46n -> (match d with 
 | (prefix,prefixLen) -> let b=if isProtocol prot  3u2  then 
if b.comms[65536u32] then 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[262144u32:=true]; lp= b.lp; med= b.med; } else 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[65536u32:=true]; lp= b.lp; med= b.med; } else 
None in 
(match b with 
 | None -> None
 | Some b -> if b.comms[393216u32] then 
None else 
Some {  aslen= b.aslen; bgpAd= b.bgpAd; comms= b.comms; lp= b.lp; med= b.med; }
)
)
 | 47n~2n -> (match d with 
 | (prefix,prefixLen) -> let b=if isProtocol prot  3u2  then 
if b.comms[65536u32] then 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[262144u32:=true]; lp= b.lp; med= b.med; } else 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[65536u32:=true]; lp= b.lp; med= b.med; } else 
None in 
(match b with 
 | None -> None
 | Some b -> if b.comms[327680u32] then 
None else 
Some {  aslen= b.aslen; bgpAd= b.bgpAd; comms= b.comms; lp= b.lp; med= b.med; }
)
)
 | 47n~40n -> (match d with 
 | (prefix,prefixLen) -> let b=if isProtocol prot  3u2  then 
if b.comms[65536u32] then 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[262144u32:=true]; lp= b.lp; med= b.med; } else 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[65536u32:=true]; lp= b.lp; med= b.med; } else 
None in 
(match b with 
 | None -> None
 | Some b -> if b.comms[393216u32] then 
None else 
Some {  aslen= b.aslen; bgpAd= b.bgpAd; comms= b.comms; lp= b.lp; med= b.med; }
)
)
 | 47n~3n -> (match d with 
 | (prefix,prefixLen) -> let b=if isProtocol prot  3u2  then 
if b.comms[65536u32] then 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[262144u32:=true]; lp= b.lp; med= b.med; } else 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[65536u32:=true]; lp= b.lp; med= b.med; } else 
None in 
(match b with 
 | None -> None
 | Some b -> if b.comms[327680u32] then 
None else 
Some {  aslen= b.aslen; bgpAd= b.bgpAd; comms= b.comms; lp= b.lp; med= b.med; }
)
)
 | 47n~41n -> (match d with 
 | (prefix,prefixLen) -> let b=if isProtocol prot  3u2  then 
if b.comms[65536u32] then 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[262144u32:=true]; lp= b.lp; med= b.med; } else 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[65536u32:=true]; lp= b.lp; med= b.med; } else 
None in 
(match b with 
 | None -> None
 | Some b -> if b.comms[393216u32] then 
None else 
Some {  aslen= b.aslen; bgpAd= b.bgpAd; comms= b.comms; lp= b.lp; med= b.med; }
)
)
 | 47n~43n -> (match d with 
 | (prefix,prefixLen) -> let b=if isProtocol prot  3u2  then 
if b.comms[65536u32] then 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[262144u32:=true]; lp= b.lp; med= b.med; } else 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[65536u32:=true]; lp= b.lp; med= b.med; } else 
None in 
(match b with 
 | None -> None
 | Some b -> if b.comms[393216u32] then 
None else 
Some {  aslen= b.aslen; bgpAd= b.bgpAd; comms= b.comms; lp= b.lp; med= b.med; }
)
)
 | 47n~12n -> (match d with 
 | (prefix,prefixLen) -> let b=if isProtocol prot  3u2  then 
if b.comms[65536u32] then 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[262144u32:=true]; lp= b.lp; med= b.med; } else 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[65536u32:=true]; lp= b.lp; med= b.med; } else 
None in 
(match b with 
 | None -> None
 | Some b -> if b.comms[327680u32] then 
None else 
Some {  aslen= b.aslen; bgpAd= b.bgpAd; comms= b.comms; lp= b.lp; med= b.med; }
)
)
 | 48n~78n -> (match d with 
 | (prefix,prefixLen) -> let b=if prefixLen = 24u6 && 1174416896u32 <=u32 prefix && prefix <u32 1174417152u32 then 
if b.comms[131075u32] then 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[327683u32:=true]; lp= b.lp; med= b.med; } else 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[131075u32:=true]; lp= b.lp; med= b.med; } else 
if isProtocol prot  3u2  then 
if b.comms[131075u32] then 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[327683u32:=true]; lp= b.lp; med= b.med; } else 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[131075u32:=true]; lp= b.lp; med= b.med; } else 
None in 
(match b with 
 | None -> None
 | Some b -> if b.comms[262147u32] then 
None else 
Some {  aslen= b.aslen; bgpAd= b.bgpAd; comms= b.comms; lp= b.lp; med= b.med; }
)
)
 | 48n~77n -> (match d with 
 | (prefix,prefixLen) -> let b=if prefixLen = 24u6 && 1174416896u32 <=u32 prefix && prefix <u32 1174417152u32 then 
if b.comms[131075u32] then 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[327683u32:=true]; lp= b.lp; med= b.med; } else 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[131075u32:=true]; lp= b.lp; med= b.med; } else 
if isProtocol prot  3u2  then 
if b.comms[131075u32] then 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[327683u32:=true]; lp= b.lp; med= b.med; } else 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[131075u32:=true]; lp= b.lp; med= b.med; } else 
None in 
(match b with 
 | None -> None
 | Some b -> if b.comms[262147u32] then 
None else 
Some {  aslen= b.aslen; bgpAd= b.bgpAd; comms= b.comms; lp= b.lp; med= b.med; }
)
)
 | 48n~69n -> (match d with 
 | (prefix,prefixLen) -> let b=if prefixLen = 24u6 && 1174416896u32 <=u32 prefix && prefix <u32 1174417152u32 then 
if b.comms[131075u32] then 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[327683u32:=true]; lp= b.lp; med= b.med; } else 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[131075u32:=true]; lp= b.lp; med= b.med; } else 
if isProtocol prot  3u2  then 
if b.comms[131075u32] then 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[327683u32:=true]; lp= b.lp; med= b.med; } else 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[131075u32:=true]; lp= b.lp; med= b.med; } else 
None in 
(match b with 
 | None -> None
 | Some b -> if b.comms[262147u32] then 
None else 
Some {  aslen= b.aslen; bgpAd= b.bgpAd; comms= b.comms; lp= b.lp; med= b.med; }
)
)
 | 48n~79n -> (match d with 
 | (prefix,prefixLen) -> let b=if prefixLen = 24u6 && 1174416896u32 <=u32 prefix && prefix <u32 1174417152u32 then 
if b.comms[131075u32] then 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[327683u32:=true]; lp= b.lp; med= b.med; } else 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[131075u32:=true]; lp= b.lp; med= b.med; } else 
if isProtocol prot  3u2  then 
if b.comms[131075u32] then 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[327683u32:=true]; lp= b.lp; med= b.med; } else 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[131075u32:=true]; lp= b.lp; med= b.med; } else 
None in 
(match b with 
 | None -> None
 | Some b -> if b.comms[262147u32] then 
None else 
Some {  aslen= b.aslen; bgpAd= b.bgpAd; comms= b.comms; lp= b.lp; med= b.med; }
)
)
 | 49n~34n -> (match d with 
 | (prefix,prefixLen) -> let b=if isProtocol prot  3u2  then 
if b.comms[196608u32] then 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[393216u32:=true]; lp= b.lp; med= b.med; } else 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[196608u32:=true]; lp= b.lp; med= b.med; } else 
None in 
(match b with 
 | None -> None
 | Some b -> if b.comms[262145u32] then 
None else 
Some {  aslen= b.aslen; bgpAd= b.bgpAd; comms= b.comms; lp= b.lp; med= b.med; }
)
)
 | 49n~17n -> (match d with 
 | (prefix,prefixLen) -> let b=if isProtocol prot  3u2  then 
if b.comms[196608u32] then 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[393216u32:=true]; lp= b.lp; med= b.med; } else 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[196608u32:=true]; lp= b.lp; med= b.med; } else 
None in 
(match b with 
 | None -> None
 | Some b -> if b.comms[262146u32] then 
None else 
Some {  aslen= b.aslen; bgpAd= b.bgpAd; comms= b.comms; lp= b.lp; med= b.med; }
)
)
 | 49n~65n -> (match d with 
 | (prefix,prefixLen) -> let b=if isProtocol prot  3u2  then 
if b.comms[196608u32] then 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[393216u32:=true]; lp= b.lp; med= b.med; } else 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[196608u32:=true]; lp= b.lp; med= b.med; } else 
None in 
(match b with 
 | None -> None
 | Some b -> if b.comms[262148u32] then 
None else 
Some {  aslen= b.aslen; bgpAd= b.bgpAd; comms= b.comms; lp= b.lp; med= b.med; }
)
)
 | 49n~78n -> (match d with 
 | (prefix,prefixLen) -> let b=if isProtocol prot  3u2  then 
if b.comms[196608u32] then 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[393216u32:=true]; lp= b.lp; med= b.med; } else 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[196608u32:=true]; lp= b.lp; med= b.med; } else 
None in 
(match b with 
 | None -> None
 | Some b -> if b.comms[262147u32] then 
None else 
Some {  aslen= b.aslen; bgpAd= b.bgpAd; comms= b.comms; lp= b.lp; med= b.med; }
)
)
 | 49n~60n -> (match d with 
 | (prefix,prefixLen) -> let b=if isProtocol prot  3u2  then 
if b.comms[196608u32] then 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[393216u32:=true]; lp= b.lp; med= b.med; } else 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[196608u32:=true]; lp= b.lp; med= b.med; } else 
None in 
(match b with 
 | None -> None
 | Some b -> if b.comms[262149u32] then 
None else 
Some {  aslen= b.aslen; bgpAd= b.bgpAd; comms= b.comms; lp= b.lp; med= b.med; }
)
)
 | 49n~6n -> (match d with 
 | (prefix,prefixLen) -> let b=if isProtocol prot  3u2  then 
if b.comms[196608u32] then 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[393216u32:=true]; lp= b.lp; med= b.med; } else 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[196608u32:=true]; lp= b.lp; med= b.med; } else 
None in 
(match b with 
 | None -> None
 | Some b -> if b.comms[262151u32] then 
None else 
Some {  aslen= b.aslen; bgpAd= b.bgpAd; comms= b.comms; lp= b.lp; med= b.med; }
)
)
 | 49n~44n -> (match d with 
 | (prefix,prefixLen) -> let b=if isProtocol prot  3u2  then 
if b.comms[196608u32] then 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[393216u32:=true]; lp= b.lp; med= b.med; } else 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[196608u32:=true]; lp= b.lp; med= b.med; } else 
None in 
(match b with 
 | None -> None
 | Some b -> if b.comms[262144u32] then 
None else 
Some {  aslen= b.aslen; bgpAd= b.bgpAd; comms= b.comms; lp= b.lp; med= b.med; }
)
)
 | 49n~39n -> (match d with 
 | (prefix,prefixLen) -> let b=if isProtocol prot  3u2  then 
if b.comms[196608u32] then 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[393216u32:=true]; lp= b.lp; med= b.med; } else 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[196608u32:=true]; lp= b.lp; med= b.med; } else 
None in 
(match b with 
 | None -> None
 | Some b -> if b.comms[262150u32] then 
None else 
Some {  aslen= b.aslen; bgpAd= b.bgpAd; comms= b.comms; lp= b.lp; med= b.med; }
)
)
 | 50n~2n -> (match d with 
 | (prefix,prefixLen) -> let b=if isProtocol prot  3u2  then 
if b.comms[65536u32] then 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[262144u32:=true]; lp= b.lp; med= b.med; } else 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[65536u32:=true]; lp= b.lp; med= b.med; } else 
None in 
(match b with 
 | None -> None
 | Some b -> if b.comms[327680u32] then 
None else 
Some {  aslen= b.aslen; bgpAd= b.bgpAd; comms= b.comms; lp= b.lp; med= b.med; }
)
)
 | 50n~3n -> (match d with 
 | (prefix,prefixLen) -> let b=if isProtocol prot  3u2  then 
if b.comms[65536u32] then 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[262144u32:=true]; lp= b.lp; med= b.med; } else 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[65536u32:=true]; lp= b.lp; med= b.med; } else 
None in 
(match b with 
 | None -> None
 | Some b -> if b.comms[327680u32] then 
None else 
Some {  aslen= b.aslen; bgpAd= b.bgpAd; comms= b.comms; lp= b.lp; med= b.med; }
)
)
 | 50n~72n -> (match d with 
 | (prefix,prefixLen) -> let b=if isProtocol prot  3u2  then 
if b.comms[65536u32] then 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[262144u32:=true]; lp= b.lp; med= b.med; } else 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[65536u32:=true]; lp= b.lp; med= b.med; } else 
None in 
(match b with 
 | None -> None
 | Some b -> if b.comms[393216u32] then 
None else 
Some {  aslen= b.aslen; bgpAd= b.bgpAd; comms= b.comms; lp= b.lp; med= b.med; }
)
)
 | 50n~71n -> (match d with 
 | (prefix,prefixLen) -> let b=if isProtocol prot  3u2  then 
if b.comms[65536u32] then 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[262144u32:=true]; lp= b.lp; med= b.med; } else 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[65536u32:=true]; lp= b.lp; med= b.med; } else 
None in 
(match b with 
 | None -> None
 | Some b -> if b.comms[393216u32] then 
None else 
Some {  aslen= b.aslen; bgpAd= b.bgpAd; comms= b.comms; lp= b.lp; med= b.med; }
)
)
 | 50n~12n -> (match d with 
 | (prefix,prefixLen) -> let b=if isProtocol prot  3u2  then 
if b.comms[65536u32] then 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[262144u32:=true]; lp= b.lp; med= b.med; } else 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[65536u32:=true]; lp= b.lp; med= b.med; } else 
None in 
(match b with 
 | None -> None
 | Some b -> if b.comms[327680u32] then 
None else 
Some {  aslen= b.aslen; bgpAd= b.bgpAd; comms= b.comms; lp= b.lp; med= b.med; }
)
)
 | 50n~66n -> (match d with 
 | (prefix,prefixLen) -> let b=if isProtocol prot  3u2  then 
if b.comms[65536u32] then 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[262144u32:=true]; lp= b.lp; med= b.med; } else 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[65536u32:=true]; lp= b.lp; med= b.med; } else 
None in 
(match b with 
 | None -> None
 | Some b -> if b.comms[393216u32] then 
None else 
Some {  aslen= b.aslen; bgpAd= b.bgpAd; comms= b.comms; lp= b.lp; med= b.med; }
)
)
 | 50n~13n -> (match d with 
 | (prefix,prefixLen) -> let b=if isProtocol prot  3u2  then 
if b.comms[65536u32] then 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[262144u32:=true]; lp= b.lp; med= b.med; } else 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[65536u32:=true]; lp= b.lp; med= b.med; } else 
None in 
(match b with 
 | None -> None
 | Some b -> if b.comms[327680u32] then 
None else 
Some {  aslen= b.aslen; bgpAd= b.bgpAd; comms= b.comms; lp= b.lp; med= b.med; }
)
)
 | 50n~70n -> (match d with 
 | (prefix,prefixLen) -> let b=if isProtocol prot  3u2  then 
if b.comms[65536u32] then 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[262144u32:=true]; lp= b.lp; med= b.med; } else 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[65536u32:=true]; lp= b.lp; med= b.med; } else 
None in 
(match b with 
 | None -> None
 | Some b -> if b.comms[393216u32] then 
None else 
Some {  aslen= b.aslen; bgpAd= b.bgpAd; comms= b.comms; lp= b.lp; med= b.med; }
)
)
 | 51n~78n -> (match d with 
 | (prefix,prefixLen) -> let b=if prefixLen = 24u6 && 1174417152u32 <=u32 prefix && prefix <u32 1174417408u32 then 
if b.comms[131075u32] then 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[327683u32:=true]; lp= b.lp; med= b.med; } else 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[131075u32:=true]; lp= b.lp; med= b.med; } else 
if isProtocol prot  3u2  then 
if b.comms[131075u32] then 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[327683u32:=true]; lp= b.lp; med= b.med; } else 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[131075u32:=true]; lp= b.lp; med= b.med; } else 
None in 
(match b with 
 | None -> None
 | Some b -> if b.comms[262147u32] then 
None else 
Some {  aslen= b.aslen; bgpAd= b.bgpAd; comms= b.comms; lp= b.lp; med= b.med; }
)
)
 | 51n~77n -> (match d with 
 | (prefix,prefixLen) -> let b=if prefixLen = 24u6 && 1174417152u32 <=u32 prefix && prefix <u32 1174417408u32 then 
if b.comms[131075u32] then 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[327683u32:=true]; lp= b.lp; med= b.med; } else 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[131075u32:=true]; lp= b.lp; med= b.med; } else 
if isProtocol prot  3u2  then 
if b.comms[131075u32] then 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[327683u32:=true]; lp= b.lp; med= b.med; } else 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[131075u32:=true]; lp= b.lp; med= b.med; } else 
None in 
(match b with 
 | None -> None
 | Some b -> if b.comms[262147u32] then 
None else 
Some {  aslen= b.aslen; bgpAd= b.bgpAd; comms= b.comms; lp= b.lp; med= b.med; }
)
)
 | 51n~79n -> (match d with 
 | (prefix,prefixLen) -> let b=if prefixLen = 24u6 && 1174417152u32 <=u32 prefix && prefix <u32 1174417408u32 then 
if b.comms[131075u32] then 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[327683u32:=true]; lp= b.lp; med= b.med; } else 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[131075u32:=true]; lp= b.lp; med= b.med; } else 
if isProtocol prot  3u2  then 
if b.comms[131075u32] then 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[327683u32:=true]; lp= b.lp; med= b.med; } else 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[131075u32:=true]; lp= b.lp; med= b.med; } else 
None in 
(match b with 
 | None -> None
 | Some b -> if b.comms[262147u32] then 
None else 
Some {  aslen= b.aslen; bgpAd= b.bgpAd; comms= b.comms; lp= b.lp; med= b.med; }
)
)
 | 51n~69n -> (match d with 
 | (prefix,prefixLen) -> let b=if prefixLen = 24u6 && 1174417152u32 <=u32 prefix && prefix <u32 1174417408u32 then 
if b.comms[131075u32] then 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[327683u32:=true]; lp= b.lp; med= b.med; } else 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[131075u32:=true]; lp= b.lp; med= b.med; } else 
if isProtocol prot  3u2  then 
if b.comms[131075u32] then 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[327683u32:=true]; lp= b.lp; med= b.med; } else 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[131075u32:=true]; lp= b.lp; med= b.med; } else 
None in 
(match b with 
 | None -> None
 | Some b -> if b.comms[262147u32] then 
None else 
Some {  aslen= b.aslen; bgpAd= b.bgpAd; comms= b.comms; lp= b.lp; med= b.med; }
)
)
 | 52n~34n -> (match d with 
 | (prefix,prefixLen) -> let b=if isProtocol prot  3u2  then 
if b.comms[196608u32] then 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[393216u32:=true]; lp= b.lp; med= b.med; } else 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[196608u32:=true]; lp= b.lp; med= b.med; } else 
None in 
(match b with 
 | None -> None
 | Some b -> if b.comms[262145u32] then 
None else 
Some {  aslen= b.aslen; bgpAd= b.bgpAd; comms= b.comms; lp= b.lp; med= b.med; }
)
)
 | 52n~78n -> (match d with 
 | (prefix,prefixLen) -> let b=if isProtocol prot  3u2  then 
if b.comms[196608u32] then 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[393216u32:=true]; lp= b.lp; med= b.med; } else 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[196608u32:=true]; lp= b.lp; med= b.med; } else 
None in 
(match b with 
 | None -> None
 | Some b -> if b.comms[262147u32] then 
None else 
Some {  aslen= b.aslen; bgpAd= b.bgpAd; comms= b.comms; lp= b.lp; med= b.med; }
)
)
 | 52n~65n -> (match d with 
 | (prefix,prefixLen) -> let b=if isProtocol prot  3u2  then 
if b.comms[196608u32] then 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[393216u32:=true]; lp= b.lp; med= b.med; } else 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[196608u32:=true]; lp= b.lp; med= b.med; } else 
None in 
(match b with 
 | None -> None
 | Some b -> if b.comms[262148u32] then 
None else 
Some {  aslen= b.aslen; bgpAd= b.bgpAd; comms= b.comms; lp= b.lp; med= b.med; }
)
)
 | 52n~60n -> (match d with 
 | (prefix,prefixLen) -> let b=if isProtocol prot  3u2  then 
if b.comms[196608u32] then 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[393216u32:=true]; lp= b.lp; med= b.med; } else 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[196608u32:=true]; lp= b.lp; med= b.med; } else 
None in 
(match b with 
 | None -> None
 | Some b -> if b.comms[262149u32] then 
None else 
Some {  aslen= b.aslen; bgpAd= b.bgpAd; comms= b.comms; lp= b.lp; med= b.med; }
)
)
 | 52n~44n -> (match d with 
 | (prefix,prefixLen) -> let b=if isProtocol prot  3u2  then 
if b.comms[196608u32] then 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[393216u32:=true]; lp= b.lp; med= b.med; } else 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[196608u32:=true]; lp= b.lp; med= b.med; } else 
None in 
(match b with 
 | None -> None
 | Some b -> if b.comms[262144u32] then 
None else 
Some {  aslen= b.aslen; bgpAd= b.bgpAd; comms= b.comms; lp= b.lp; med= b.med; }
)
)
 | 52n~39n -> (match d with 
 | (prefix,prefixLen) -> let b=if isProtocol prot  3u2  then 
if b.comms[196608u32] then 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[393216u32:=true]; lp= b.lp; med= b.med; } else 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[196608u32:=true]; lp= b.lp; med= b.med; } else 
None in 
(match b with 
 | None -> None
 | Some b -> if b.comms[262150u32] then 
None else 
Some {  aslen= b.aslen; bgpAd= b.bgpAd; comms= b.comms; lp= b.lp; med= b.med; }
)
)
 | 52n~17n -> (match d with 
 | (prefix,prefixLen) -> let b=if isProtocol prot  3u2  then 
if b.comms[196608u32] then 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[393216u32:=true]; lp= b.lp; med= b.med; } else 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[196608u32:=true]; lp= b.lp; med= b.med; } else 
None in 
(match b with 
 | None -> None
 | Some b -> if b.comms[262146u32] then 
None else 
Some {  aslen= b.aslen; bgpAd= b.bgpAd; comms= b.comms; lp= b.lp; med= b.med; }
)
)
 | 52n~6n -> (match d with 
 | (prefix,prefixLen) -> let b=if isProtocol prot  3u2  then 
if b.comms[196608u32] then 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[393216u32:=true]; lp= b.lp; med= b.med; } else 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[196608u32:=true]; lp= b.lp; med= b.med; } else 
None in 
(match b with 
 | None -> None
 | Some b -> if b.comms[262151u32] then 
None else 
Some {  aslen= b.aslen; bgpAd= b.bgpAd; comms= b.comms; lp= b.lp; med= b.med; }
)
)
 | 53n~2n -> (match d with 
 | (prefix,prefixLen) -> let b=if isProtocol prot  3u2  then 
if b.comms[65536u32] then 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[262144u32:=true]; lp= b.lp; med= b.med; } else 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[65536u32:=true]; lp= b.lp; med= b.med; } else 
None in 
(match b with 
 | None -> None
 | Some b -> if b.comms[327680u32] then 
None else 
Some {  aslen= b.aslen; bgpAd= b.bgpAd; comms= b.comms; lp= b.lp; med= b.med; }
)
)
 | 53n~68n -> (match d with 
 | (prefix,prefixLen) -> let b=if isProtocol prot  3u2  then 
if b.comms[65536u32] then 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[262144u32:=true]; lp= b.lp; med= b.med; } else 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[65536u32:=true]; lp= b.lp; med= b.med; } else 
None in 
(match b with 
 | None -> None
 | Some b -> if b.comms[393216u32] then 
None else 
Some {  aslen= b.aslen; bgpAd= b.bgpAd; comms= b.comms; lp= b.lp; med= b.med; }
)
)
 | 53n~57n -> (match d with 
 | (prefix,prefixLen) -> let b=if isProtocol prot  3u2  then 
if b.comms[65536u32] then 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[262144u32:=true]; lp= b.lp; med= b.med; } else 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[65536u32:=true]; lp= b.lp; med= b.med; } else 
None in 
(match b with 
 | None -> None
 | Some b -> if b.comms[393216u32] then 
None else 
Some {  aslen= b.aslen; bgpAd= b.bgpAd; comms= b.comms; lp= b.lp; med= b.med; }
)
)
 | 53n~3n -> (match d with 
 | (prefix,prefixLen) -> let b=if isProtocol prot  3u2  then 
if b.comms[65536u32] then 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[262144u32:=true]; lp= b.lp; med= b.med; } else 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[65536u32:=true]; lp= b.lp; med= b.med; } else 
None in 
(match b with 
 | None -> None
 | Some b -> if b.comms[327680u32] then 
None else 
Some {  aslen= b.aslen; bgpAd= b.bgpAd; comms= b.comms; lp= b.lp; med= b.med; }
)
)
 | 53n~12n -> (match d with 
 | (prefix,prefixLen) -> let b=if isProtocol prot  3u2  then 
if b.comms[65536u32] then 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[262144u32:=true]; lp= b.lp; med= b.med; } else 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[65536u32:=true]; lp= b.lp; med= b.med; } else 
None in 
(match b with 
 | None -> None
 | Some b -> if b.comms[327680u32] then 
None else 
Some {  aslen= b.aslen; bgpAd= b.bgpAd; comms= b.comms; lp= b.lp; med= b.med; }
)
)
 | 53n~13n -> (match d with 
 | (prefix,prefixLen) -> let b=if isProtocol prot  3u2  then 
if b.comms[65536u32] then 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[262144u32:=true]; lp= b.lp; med= b.med; } else 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[65536u32:=true]; lp= b.lp; med= b.med; } else 
None in 
(match b with 
 | None -> None
 | Some b -> if b.comms[327680u32] then 
None else 
Some {  aslen= b.aslen; bgpAd= b.bgpAd; comms= b.comms; lp= b.lp; med= b.med; }
)
)
 | 53n~67n -> (match d with 
 | (prefix,prefixLen) -> let b=if isProtocol prot  3u2  then 
if b.comms[65536u32] then 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[262144u32:=true]; lp= b.lp; med= b.med; } else 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[65536u32:=true]; lp= b.lp; med= b.med; } else 
None in 
(match b with 
 | None -> None
 | Some b -> if b.comms[393216u32] then 
None else 
Some {  aslen= b.aslen; bgpAd= b.bgpAd; comms= b.comms; lp= b.lp; med= b.med; }
)
)
 | 53n~56n -> (match d with 
 | (prefix,prefixLen) -> let b=if isProtocol prot  3u2  then 
if b.comms[65536u32] then 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[262144u32:=true]; lp= b.lp; med= b.med; } else 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[65536u32:=true]; lp= b.lp; med= b.med; } else 
None in 
(match b with 
 | None -> None
 | Some b -> if b.comms[393216u32] then 
None else 
Some {  aslen= b.aslen; bgpAd= b.bgpAd; comms= b.comms; lp= b.lp; med= b.med; }
)
)
 | 54n~44n -> (match d with 
 | (prefix,prefixLen) -> let b=if isProtocol prot  3u2  then 
if b.comms[196608u32] then 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[393216u32:=true]; lp= b.lp; med= b.med; } else 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[196608u32:=true]; lp= b.lp; med= b.med; } else 
None in 
(match b with 
 | None -> None
 | Some b -> if b.comms[262144u32] then 
None else 
Some {  aslen= b.aslen; bgpAd= b.bgpAd; comms= b.comms; lp= b.lp; med= b.med; }
)
)
 | 54n~6n -> (match d with 
 | (prefix,prefixLen) -> let b=if isProtocol prot  3u2  then 
if b.comms[196608u32] then 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[393216u32:=true]; lp= b.lp; med= b.med; } else 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[196608u32:=true]; lp= b.lp; med= b.med; } else 
None in 
(match b with 
 | None -> None
 | Some b -> if b.comms[262151u32] then 
None else 
Some {  aslen= b.aslen; bgpAd= b.bgpAd; comms= b.comms; lp= b.lp; med= b.med; }
)
)
 | 54n~34n -> (match d with 
 | (prefix,prefixLen) -> let b=if isProtocol prot  3u2  then 
if b.comms[196608u32] then 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[393216u32:=true]; lp= b.lp; med= b.med; } else 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[196608u32:=true]; lp= b.lp; med= b.med; } else 
None in 
(match b with 
 | None -> None
 | Some b -> if b.comms[262145u32] then 
None else 
Some {  aslen= b.aslen; bgpAd= b.bgpAd; comms= b.comms; lp= b.lp; med= b.med; }
)
)
 | 54n~17n -> (match d with 
 | (prefix,prefixLen) -> let b=if isProtocol prot  3u2  then 
if b.comms[196608u32] then 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[393216u32:=true]; lp= b.lp; med= b.med; } else 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[196608u32:=true]; lp= b.lp; med= b.med; } else 
None in 
(match b with 
 | None -> None
 | Some b -> if b.comms[262146u32] then 
None else 
Some {  aslen= b.aslen; bgpAd= b.bgpAd; comms= b.comms; lp= b.lp; med= b.med; }
)
)
 | 54n~65n -> (match d with 
 | (prefix,prefixLen) -> let b=if isProtocol prot  3u2  then 
if b.comms[196608u32] then 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[393216u32:=true]; lp= b.lp; med= b.med; } else 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[196608u32:=true]; lp= b.lp; med= b.med; } else 
None in 
(match b with 
 | None -> None
 | Some b -> if b.comms[262148u32] then 
None else 
Some {  aslen= b.aslen; bgpAd= b.bgpAd; comms= b.comms; lp= b.lp; med= b.med; }
)
)
 | 54n~60n -> (match d with 
 | (prefix,prefixLen) -> let b=if isProtocol prot  3u2  then 
if b.comms[196608u32] then 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[393216u32:=true]; lp= b.lp; med= b.med; } else 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[196608u32:=true]; lp= b.lp; med= b.med; } else 
None in 
(match b with 
 | None -> None
 | Some b -> if b.comms[262149u32] then 
None else 
Some {  aslen= b.aslen; bgpAd= b.bgpAd; comms= b.comms; lp= b.lp; med= b.med; }
)
)
 | 54n~78n -> (match d with 
 | (prefix,prefixLen) -> let b=if isProtocol prot  3u2  then 
if b.comms[196608u32] then 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[393216u32:=true]; lp= b.lp; med= b.med; } else 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[196608u32:=true]; lp= b.lp; med= b.med; } else 
None in 
(match b with 
 | None -> None
 | Some b -> if b.comms[262147u32] then 
None else 
Some {  aslen= b.aslen; bgpAd= b.bgpAd; comms= b.comms; lp= b.lp; med= b.med; }
)
)
 | 54n~39n -> (match d with 
 | (prefix,prefixLen) -> let b=if isProtocol prot  3u2  then 
if b.comms[196608u32] then 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[393216u32:=true]; lp= b.lp; med= b.med; } else 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[196608u32:=true]; lp= b.lp; med= b.med; } else 
None in 
(match b with 
 | None -> None
 | Some b -> if b.comms[262150u32] then 
None else 
Some {  aslen= b.aslen; bgpAd= b.bgpAd; comms= b.comms; lp= b.lp; med= b.med; }
)
)
 | 55n~34n -> (match d with 
 | (prefix,prefixLen) -> let b=if isProtocol prot  3u2  then 
if b.comms[196608u32] then 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[393216u32:=true]; lp= b.lp; med= b.med; } else 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[196608u32:=true]; lp= b.lp; med= b.med; } else 
None in 
(match b with 
 | None -> None
 | Some b -> if b.comms[262145u32] then 
None else 
Some {  aslen= b.aslen; bgpAd= b.bgpAd; comms= b.comms; lp= b.lp; med= b.med; }
)
)
 | 55n~6n -> (match d with 
 | (prefix,prefixLen) -> let b=if isProtocol prot  3u2  then 
if b.comms[196608u32] then 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[393216u32:=true]; lp= b.lp; med= b.med; } else 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[196608u32:=true]; lp= b.lp; med= b.med; } else 
None in 
(match b with 
 | None -> None
 | Some b -> if b.comms[262151u32] then 
None else 
Some {  aslen= b.aslen; bgpAd= b.bgpAd; comms= b.comms; lp= b.lp; med= b.med; }
)
)
 | 55n~39n -> (match d with 
 | (prefix,prefixLen) -> let b=if isProtocol prot  3u2  then 
if b.comms[196608u32] then 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[393216u32:=true]; lp= b.lp; med= b.med; } else 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[196608u32:=true]; lp= b.lp; med= b.med; } else 
None in 
(match b with 
 | None -> None
 | Some b -> if b.comms[262150u32] then 
None else 
Some {  aslen= b.aslen; bgpAd= b.bgpAd; comms= b.comms; lp= b.lp; med= b.med; }
)
)
 | 55n~17n -> (match d with 
 | (prefix,prefixLen) -> let b=if isProtocol prot  3u2  then 
if b.comms[196608u32] then 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[393216u32:=true]; lp= b.lp; med= b.med; } else 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[196608u32:=true]; lp= b.lp; med= b.med; } else 
None in 
(match b with 
 | None -> None
 | Some b -> if b.comms[262146u32] then 
None else 
Some {  aslen= b.aslen; bgpAd= b.bgpAd; comms= b.comms; lp= b.lp; med= b.med; }
)
)
 | 55n~60n -> (match d with 
 | (prefix,prefixLen) -> let b=if isProtocol prot  3u2  then 
if b.comms[196608u32] then 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[393216u32:=true]; lp= b.lp; med= b.med; } else 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[196608u32:=true]; lp= b.lp; med= b.med; } else 
None in 
(match b with 
 | None -> None
 | Some b -> if b.comms[262149u32] then 
None else 
Some {  aslen= b.aslen; bgpAd= b.bgpAd; comms= b.comms; lp= b.lp; med= b.med; }
)
)
 | 55n~65n -> (match d with 
 | (prefix,prefixLen) -> let b=if isProtocol prot  3u2  then 
if b.comms[196608u32] then 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[393216u32:=true]; lp= b.lp; med= b.med; } else 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[196608u32:=true]; lp= b.lp; med= b.med; } else 
None in 
(match b with 
 | None -> None
 | Some b -> if b.comms[262148u32] then 
None else 
Some {  aslen= b.aslen; bgpAd= b.bgpAd; comms= b.comms; lp= b.lp; med= b.med; }
)
)
 | 55n~78n -> (match d with 
 | (prefix,prefixLen) -> let b=if isProtocol prot  3u2  then 
if b.comms[196608u32] then 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[393216u32:=true]; lp= b.lp; med= b.med; } else 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[196608u32:=true]; lp= b.lp; med= b.med; } else 
None in 
(match b with 
 | None -> None
 | Some b -> if b.comms[262147u32] then 
None else 
Some {  aslen= b.aslen; bgpAd= b.bgpAd; comms= b.comms; lp= b.lp; med= b.med; }
)
)
 | 55n~44n -> (match d with 
 | (prefix,prefixLen) -> let b=if isProtocol prot  3u2  then 
if b.comms[196608u32] then 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[393216u32:=true]; lp= b.lp; med= b.med; } else 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[196608u32:=true]; lp= b.lp; med= b.med; } else 
None in 
(match b with 
 | None -> None
 | Some b -> if b.comms[262144u32] then 
None else 
Some {  aslen= b.aslen; bgpAd= b.bgpAd; comms= b.comms; lp= b.lp; med= b.med; }
)
)
 | 56n~53n -> (match d with 
 | (prefix,prefixLen) -> let b=if isProtocol prot  3u2  then 
if b.comms[196608u32] then 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[393216u32:=true]; lp= b.lp; med= b.med; } else 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[196608u32:=true]; lp= b.lp; med= b.med; } else 
None in 
(match b with 
 | None -> None
 | Some b -> if b.comms[262144u32] then 
None else 
Some {  aslen= b.aslen; bgpAd= b.bgpAd; comms= b.comms; lp= b.lp; med= b.med; }
)
)
 | 56n~38n -> (match d with 
 | (prefix,prefixLen) -> let b=if isProtocol prot  3u2  then 
if b.comms[196608u32] then 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[393216u32:=true]; lp= b.lp; med= b.med; } else 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[196608u32:=true]; lp= b.lp; med= b.med; } else 
None in 
(match b with 
 | None -> None
 | Some b -> if b.comms[262150u32] then 
None else 
Some {  aslen= b.aslen; bgpAd= b.bgpAd; comms= b.comms; lp= b.lp; med= b.med; }
)
)
 | 56n~59n -> (match d with 
 | (prefix,prefixLen) -> let b=if isProtocol prot  3u2  then 
if b.comms[196608u32] then 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[393216u32:=true]; lp= b.lp; med= b.med; } else 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[196608u32:=true]; lp= b.lp; med= b.med; } else 
None in 
(match b with 
 | None -> None
 | Some b -> if b.comms[262148u32] then 
None else 
Some {  aslen= b.aslen; bgpAd= b.bgpAd; comms= b.comms; lp= b.lp; med= b.med; }
)
)
 | 56n~63n -> (match d with 
 | (prefix,prefixLen) -> let b=if isProtocol prot  3u2  then 
if b.comms[196608u32] then 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[393216u32:=true]; lp= b.lp; med= b.med; } else 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[196608u32:=true]; lp= b.lp; med= b.med; } else 
None in 
(match b with 
 | None -> None
 | Some b -> if b.comms[262149u32] then 
None else 
Some {  aslen= b.aslen; bgpAd= b.bgpAd; comms= b.comms; lp= b.lp; med= b.med; }
)
)
 | 56n~11n -> (match d with 
 | (prefix,prefixLen) -> let b=if isProtocol prot  3u2  then 
if b.comms[196608u32] then 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[393216u32:=true]; lp= b.lp; med= b.med; } else 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[196608u32:=true]; lp= b.lp; med= b.med; } else 
None in 
(match b with 
 | None -> None
 | Some b -> if b.comms[262146u32] then 
None else 
Some {  aslen= b.aslen; bgpAd= b.bgpAd; comms= b.comms; lp= b.lp; med= b.med; }
)
)
 | 56n~32n -> (match d with 
 | (prefix,prefixLen) -> let b=if isProtocol prot  3u2  then 
if b.comms[196608u32] then 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[393216u32:=true]; lp= b.lp; med= b.med; } else 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[196608u32:=true]; lp= b.lp; med= b.med; } else 
None in 
(match b with 
 | None -> None
 | Some b -> if b.comms[262145u32] then 
None else 
Some {  aslen= b.aslen; bgpAd= b.bgpAd; comms= b.comms; lp= b.lp; med= b.med; }
)
)
 | 56n~15n -> (match d with 
 | (prefix,prefixLen) -> let b=if isProtocol prot  3u2  then 
if b.comms[196608u32] then 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[393216u32:=true]; lp= b.lp; med= b.med; } else 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[196608u32:=true]; lp= b.lp; med= b.med; } else 
None in 
(match b with 
 | None -> None
 | Some b -> if b.comms[262151u32] then 
None else 
Some {  aslen= b.aslen; bgpAd= b.bgpAd; comms= b.comms; lp= b.lp; med= b.med; }
)
)
 | 56n~77n -> (match d with 
 | (prefix,prefixLen) -> let b=if isProtocol prot  3u2  then 
if b.comms[196608u32] then 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[393216u32:=true]; lp= b.lp; med= b.med; } else 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[196608u32:=true]; lp= b.lp; med= b.med; } else 
None in 
(match b with 
 | None -> None
 | Some b -> if b.comms[262147u32] then 
None else 
Some {  aslen= b.aslen; bgpAd= b.bgpAd; comms= b.comms; lp= b.lp; med= b.med; }
)
)
 | 57n~63n -> (match d with 
 | (prefix,prefixLen) -> let b=if isProtocol prot  3u2  then 
if b.comms[196608u32] then 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[393216u32:=true]; lp= b.lp; med= b.med; } else 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[196608u32:=true]; lp= b.lp; med= b.med; } else 
None in 
(match b with 
 | None -> None
 | Some b -> if b.comms[262149u32] then 
None else 
Some {  aslen= b.aslen; bgpAd= b.bgpAd; comms= b.comms; lp= b.lp; med= b.med; }
)
)
 | 57n~11n -> (match d with 
 | (prefix,prefixLen) -> let b=if isProtocol prot  3u2  then 
if b.comms[196608u32] then 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[393216u32:=true]; lp= b.lp; med= b.med; } else 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[196608u32:=true]; lp= b.lp; med= b.med; } else 
None in 
(match b with 
 | None -> None
 | Some b -> if b.comms[262146u32] then 
None else 
Some {  aslen= b.aslen; bgpAd= b.bgpAd; comms= b.comms; lp= b.lp; med= b.med; }
)
)
 | 57n~59n -> (match d with 
 | (prefix,prefixLen) -> let b=if isProtocol prot  3u2  then 
if b.comms[196608u32] then 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[393216u32:=true]; lp= b.lp; med= b.med; } else 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[196608u32:=true]; lp= b.lp; med= b.med; } else 
None in 
(match b with 
 | None -> None
 | Some b -> if b.comms[262148u32] then 
None else 
Some {  aslen= b.aslen; bgpAd= b.bgpAd; comms= b.comms; lp= b.lp; med= b.med; }
)
)
 | 57n~32n -> (match d with 
 | (prefix,prefixLen) -> let b=if isProtocol prot  3u2  then 
if b.comms[196608u32] then 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[393216u32:=true]; lp= b.lp; med= b.med; } else 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[196608u32:=true]; lp= b.lp; med= b.med; } else 
None in 
(match b with 
 | None -> None
 | Some b -> if b.comms[262145u32] then 
None else 
Some {  aslen= b.aslen; bgpAd= b.bgpAd; comms= b.comms; lp= b.lp; med= b.med; }
)
)
 | 57n~77n -> (match d with 
 | (prefix,prefixLen) -> let b=if isProtocol prot  3u2  then 
if b.comms[196608u32] then 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[393216u32:=true]; lp= b.lp; med= b.med; } else 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[196608u32:=true]; lp= b.lp; med= b.med; } else 
None in 
(match b with 
 | None -> None
 | Some b -> if b.comms[262147u32] then 
None else 
Some {  aslen= b.aslen; bgpAd= b.bgpAd; comms= b.comms; lp= b.lp; med= b.med; }
)
)
 | 57n~15n -> (match d with 
 | (prefix,prefixLen) -> let b=if isProtocol prot  3u2  then 
if b.comms[196608u32] then 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[393216u32:=true]; lp= b.lp; med= b.med; } else 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[196608u32:=true]; lp= b.lp; med= b.med; } else 
None in 
(match b with 
 | None -> None
 | Some b -> if b.comms[262151u32] then 
None else 
Some {  aslen= b.aslen; bgpAd= b.bgpAd; comms= b.comms; lp= b.lp; med= b.med; }
)
)
 | 57n~53n -> (match d with 
 | (prefix,prefixLen) -> let b=if isProtocol prot  3u2  then 
if b.comms[196608u32] then 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[393216u32:=true]; lp= b.lp; med= b.med; } else 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[196608u32:=true]; lp= b.lp; med= b.med; } else 
None in 
(match b with 
 | None -> None
 | Some b -> if b.comms[262144u32] then 
None else 
Some {  aslen= b.aslen; bgpAd= b.bgpAd; comms= b.comms; lp= b.lp; med= b.med; }
)
)
 | 57n~38n -> (match d with 
 | (prefix,prefixLen) -> let b=if isProtocol prot  3u2  then 
if b.comms[196608u32] then 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[393216u32:=true]; lp= b.lp; med= b.med; } else 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[196608u32:=true]; lp= b.lp; med= b.med; } else 
None in 
(match b with 
 | None -> None
 | Some b -> if b.comms[262150u32] then 
None else 
Some {  aslen= b.aslen; bgpAd= b.bgpAd; comms= b.comms; lp= b.lp; med= b.med; }
)
)
 | 58n~71n -> (match d with 
 | (prefix,prefixLen) -> let b=if isProtocol prot  3u2  then 
if b.comms[65540u32] then 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[262148u32:=true]; lp= b.lp; med= b.med; } else 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[65540u32:=true]; lp= b.lp; med= b.med; } else 
None in 
(match b with 
 | None -> None
 | Some b -> if b.comms[393216u32] then 
None else 
Some {  aslen= b.aslen; bgpAd= b.bgpAd; comms= b.comms; lp= b.lp; med= b.med; }
)
)
 | 58n~64n -> (match d with 
 | (prefix,prefixLen) -> let b=if isProtocol prot  3u2  then 
if b.comms[65540u32] then 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[262148u32:=true]; lp= b.lp; med= b.med; } else 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[65540u32:=true]; lp= b.lp; med= b.med; } else 
None in 
(match b with 
 | None -> None
 | Some b -> if b.comms[327684u32] then 
None else 
Some {  aslen= b.aslen; bgpAd= b.bgpAd; comms= b.comms; lp= b.lp; med= b.med; }
)
)
 | 58n~73n -> (match d with 
 | (prefix,prefixLen) -> let b=if isProtocol prot  3u2  then 
if b.comms[65540u32] then 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[262148u32:=true]; lp= b.lp; med= b.med; } else 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[65540u32:=true]; lp= b.lp; med= b.med; } else 
None in 
(match b with 
 | None -> None
 | Some b -> if b.comms[327684u32] then 
None else 
Some {  aslen= b.aslen; bgpAd= b.bgpAd; comms= b.comms; lp= b.lp; med= b.med; }
)
)
 | 58n~70n -> (match d with 
 | (prefix,prefixLen) -> let b=if isProtocol prot  3u2  then 
if b.comms[65540u32] then 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[262148u32:=true]; lp= b.lp; med= b.med; } else 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[65540u32:=true]; lp= b.lp; med= b.med; } else 
None in 
(match b with 
 | None -> None
 | Some b -> if b.comms[393216u32] then 
None else 
Some {  aslen= b.aslen; bgpAd= b.bgpAd; comms= b.comms; lp= b.lp; med= b.med; }
)
)
 | 58n~66n -> (match d with 
 | (prefix,prefixLen) -> let b=if isProtocol prot  3u2  then 
if b.comms[65540u32] then 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[262148u32:=true]; lp= b.lp; med= b.med; } else 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[65540u32:=true]; lp= b.lp; med= b.med; } else 
None in 
(match b with 
 | None -> None
 | Some b -> if b.comms[393216u32] then 
None else 
Some {  aslen= b.aslen; bgpAd= b.bgpAd; comms= b.comms; lp= b.lp; med= b.med; }
)
)
 | 58n~76n -> (match d with 
 | (prefix,prefixLen) -> let b=if isProtocol prot  3u2  then 
if b.comms[65540u32] then 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[262148u32:=true]; lp= b.lp; med= b.med; } else 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[65540u32:=true]; lp= b.lp; med= b.med; } else 
None in 
(match b with 
 | None -> None
 | Some b -> if b.comms[327684u32] then 
None else 
Some {  aslen= b.aslen; bgpAd= b.bgpAd; comms= b.comms; lp= b.lp; med= b.med; }
)
)
 | 58n~72n -> (match d with 
 | (prefix,prefixLen) -> let b=if isProtocol prot  3u2  then 
if b.comms[65540u32] then 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[262148u32:=true]; lp= b.lp; med= b.med; } else 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[65540u32:=true]; lp= b.lp; med= b.med; } else 
None in 
(match b with 
 | None -> None
 | Some b -> if b.comms[393216u32] then 
None else 
Some {  aslen= b.aslen; bgpAd= b.bgpAd; comms= b.comms; lp= b.lp; med= b.med; }
)
)
 | 58n~74n -> (match d with 
 | (prefix,prefixLen) -> let b=if isProtocol prot  3u2  then 
if b.comms[65540u32] then 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[262148u32:=true]; lp= b.lp; med= b.med; } else 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[65540u32:=true]; lp= b.lp; med= b.med; } else 
None in 
(match b with 
 | None -> None
 | Some b -> if b.comms[327684u32] then 
None else 
Some {  aslen= b.aslen; bgpAd= b.bgpAd; comms= b.comms; lp= b.lp; med= b.med; }
)
)
 | 59n~73n -> (match d with 
 | (prefix,prefixLen) -> let b=if isProtocol prot  3u2  then 
if b.comms[65540u32] then 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[262148u32:=true]; lp= b.lp; med= b.med; } else 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[65540u32:=true]; lp= b.lp; med= b.med; } else 
None in 
(match b with 
 | None -> None
 | Some b -> if b.comms[327684u32] then 
None else 
Some {  aslen= b.aslen; bgpAd= b.bgpAd; comms= b.comms; lp= b.lp; med= b.med; }
)
)
 | 59n~64n -> (match d with 
 | (prefix,prefixLen) -> let b=if isProtocol prot  3u2  then 
if b.comms[65540u32] then 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[262148u32:=true]; lp= b.lp; med= b.med; } else 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[65540u32:=true]; lp= b.lp; med= b.med; } else 
None in 
(match b with 
 | None -> None
 | Some b -> if b.comms[327684u32] then 
None else 
Some {  aslen= b.aslen; bgpAd= b.bgpAd; comms= b.comms; lp= b.lp; med= b.med; }
)
)
 | 59n~76n -> (match d with 
 | (prefix,prefixLen) -> let b=if isProtocol prot  3u2  then 
if b.comms[65540u32] then 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[262148u32:=true]; lp= b.lp; med= b.med; } else 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[65540u32:=true]; lp= b.lp; med= b.med; } else 
None in 
(match b with 
 | None -> None
 | Some b -> if b.comms[327684u32] then 
None else 
Some {  aslen= b.aslen; bgpAd= b.bgpAd; comms= b.comms; lp= b.lp; med= b.med; }
)
)
 | 59n~57n -> (match d with 
 | (prefix,prefixLen) -> let b=if isProtocol prot  3u2  then 
if b.comms[65540u32] then 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[262148u32:=true]; lp= b.lp; med= b.med; } else 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[65540u32:=true]; lp= b.lp; med= b.med; } else 
None in 
(match b with 
 | None -> None
 | Some b -> if b.comms[393216u32] then 
None else 
Some {  aslen= b.aslen; bgpAd= b.bgpAd; comms= b.comms; lp= b.lp; med= b.med; }
)
)
 | 59n~68n -> (match d with 
 | (prefix,prefixLen) -> let b=if isProtocol prot  3u2  then 
if b.comms[65540u32] then 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[262148u32:=true]; lp= b.lp; med= b.med; } else 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[65540u32:=true]; lp= b.lp; med= b.med; } else 
None in 
(match b with 
 | None -> None
 | Some b -> if b.comms[393216u32] then 
None else 
Some {  aslen= b.aslen; bgpAd= b.bgpAd; comms= b.comms; lp= b.lp; med= b.med; }
)
)
 | 59n~74n -> (match d with 
 | (prefix,prefixLen) -> let b=if isProtocol prot  3u2  then 
if b.comms[65540u32] then 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[262148u32:=true]; lp= b.lp; med= b.med; } else 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[65540u32:=true]; lp= b.lp; med= b.med; } else 
None in 
(match b with 
 | None -> None
 | Some b -> if b.comms[327684u32] then 
None else 
Some {  aslen= b.aslen; bgpAd= b.bgpAd; comms= b.comms; lp= b.lp; med= b.med; }
)
)
 | 59n~67n -> (match d with 
 | (prefix,prefixLen) -> let b=if isProtocol prot  3u2  then 
if b.comms[65540u32] then 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[262148u32:=true]; lp= b.lp; med= b.med; } else 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[65540u32:=true]; lp= b.lp; med= b.med; } else 
None in 
(match b with 
 | None -> None
 | Some b -> if b.comms[393216u32] then 
None else 
Some {  aslen= b.aslen; bgpAd= b.bgpAd; comms= b.comms; lp= b.lp; med= b.med; }
)
)
 | 59n~56n -> (match d with 
 | (prefix,prefixLen) -> let b=if isProtocol prot  3u2  then 
if b.comms[65540u32] then 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[262148u32:=true]; lp= b.lp; med= b.med; } else 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[65540u32:=true]; lp= b.lp; med= b.med; } else 
None in 
(match b with 
 | None -> None
 | Some b -> if b.comms[393216u32] then 
None else 
Some {  aslen= b.aslen; bgpAd= b.bgpAd; comms= b.comms; lp= b.lp; med= b.med; }
)
)
 | 60n~10n -> (match d with 
 | (prefix,prefixLen) -> let b=if isProtocol prot  3u2  then 
if b.comms[65541u32] then 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[262149u32:=true]; lp= b.lp; med= b.med; } else 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[65541u32:=true]; lp= b.lp; med= b.med; } else 
None in 
(match b with 
 | None -> None
 | Some b -> if b.comms[327685u32] then 
None else 
Some {  aslen= b.aslen; bgpAd= b.bgpAd; comms= b.comms; lp= b.lp; med= b.med; }
)
)
 | 60n~49n -> (match d with 
 | (prefix,prefixLen) -> let b=if isProtocol prot  3u2  then 
if b.comms[65541u32] then 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[262149u32:=true]; lp= b.lp; med= b.med; } else 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[65541u32:=true]; lp= b.lp; med= b.med; } else 
None in 
(match b with 
 | None -> None
 | Some b -> if b.comms[393216u32] then 
None else 
Some {  aslen= b.aslen; bgpAd= b.bgpAd; comms= b.comms; lp= b.lp; med= b.med; }
)
)
 | 60n~16n -> (match d with 
 | (prefix,prefixLen) -> let b=if isProtocol prot  3u2  then 
if b.comms[65541u32] then 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[262149u32:=true]; lp= b.lp; med= b.med; } else 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[65541u32:=true]; lp= b.lp; med= b.med; } else 
None in 
(match b with 
 | None -> None
 | Some b -> if b.comms[327685u32] then 
None else 
Some {  aslen= b.aslen; bgpAd= b.bgpAd; comms= b.comms; lp= b.lp; med= b.med; }
)
)
 | 60n~18n -> (match d with 
 | (prefix,prefixLen) -> let b=if isProtocol prot  3u2  then 
if b.comms[65541u32] then 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[262149u32:=true]; lp= b.lp; med= b.med; } else 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[65541u32:=true]; lp= b.lp; med= b.med; } else 
None in 
(match b with 
 | None -> None
 | Some b -> if b.comms[327685u32] then 
None else 
Some {  aslen= b.aslen; bgpAd= b.bgpAd; comms= b.comms; lp= b.lp; med= b.med; }
)
)
 | 60n~55n -> (match d with 
 | (prefix,prefixLen) -> let b=if isProtocol prot  3u2  then 
if b.comms[65541u32] then 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[262149u32:=true]; lp= b.lp; med= b.med; } else 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[65541u32:=true]; lp= b.lp; med= b.med; } else 
None in 
(match b with 
 | None -> None
 | Some b -> if b.comms[393216u32] then 
None else 
Some {  aslen= b.aslen; bgpAd= b.bgpAd; comms= b.comms; lp= b.lp; med= b.med; }
)
)
 | 60n~8n -> (match d with 
 | (prefix,prefixLen) -> let b=if isProtocol prot  3u2  then 
if b.comms[65541u32] then 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[262149u32:=true]; lp= b.lp; med= b.med; } else 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[65541u32:=true]; lp= b.lp; med= b.med; } else 
None in 
(match b with 
 | None -> None
 | Some b -> if b.comms[327685u32] then 
None else 
Some {  aslen= b.aslen; bgpAd= b.bgpAd; comms= b.comms; lp= b.lp; med= b.med; }
)
)
 | 60n~54n -> (match d with 
 | (prefix,prefixLen) -> let b=if isProtocol prot  3u2  then 
if b.comms[65541u32] then 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[262149u32:=true]; lp= b.lp; med= b.med; } else 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[65541u32:=true]; lp= b.lp; med= b.med; } else 
None in 
(match b with 
 | None -> None
 | Some b -> if b.comms[393216u32] then 
None else 
Some {  aslen= b.aslen; bgpAd= b.bgpAd; comms= b.comms; lp= b.lp; med= b.med; }
)
)
 | 60n~52n -> (match d with 
 | (prefix,prefixLen) -> let b=if isProtocol prot  3u2  then 
if b.comms[65541u32] then 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[262149u32:=true]; lp= b.lp; med= b.med; } else 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[65541u32:=true]; lp= b.lp; med= b.med; } else 
None in 
(match b with 
 | None -> None
 | Some b -> if b.comms[393216u32] then 
None else 
Some {  aslen= b.aslen; bgpAd= b.bgpAd; comms= b.comms; lp= b.lp; med= b.med; }
)
)
 | 61n~8n -> (match d with 
 | (prefix,prefixLen) -> let b=if isProtocol prot  3u2  then 
if b.comms[65541u32] then 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[262149u32:=true]; lp= b.lp; med= b.med; } else 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[65541u32:=true]; lp= b.lp; med= b.med; } else 
None in 
(match b with 
 | None -> None
 | Some b -> if b.comms[327685u32] then 
None else 
Some {  aslen= b.aslen; bgpAd= b.bgpAd; comms= b.comms; lp= b.lp; med= b.med; }
)
)
 | 61n~16n -> (match d with 
 | (prefix,prefixLen) -> let b=if isProtocol prot  3u2  then 
if b.comms[65541u32] then 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[262149u32:=true]; lp= b.lp; med= b.med; } else 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[65541u32:=true]; lp= b.lp; med= b.med; } else 
None in 
(match b with 
 | None -> None
 | Some b -> if b.comms[327685u32] then 
None else 
Some {  aslen= b.aslen; bgpAd= b.bgpAd; comms= b.comms; lp= b.lp; med= b.med; }
)
)
 | 61n~46n -> (match d with 
 | (prefix,prefixLen) -> let b=if isProtocol prot  3u2  then 
if b.comms[65541u32] then 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[262149u32:=true]; lp= b.lp; med= b.med; } else 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[65541u32:=true]; lp= b.lp; med= b.med; } else 
None in 
(match b with 
 | None -> None
 | Some b -> if b.comms[393216u32] then 
None else 
Some {  aslen= b.aslen; bgpAd= b.bgpAd; comms= b.comms; lp= b.lp; med= b.med; }
)
)
 | 61n~10n -> (match d with 
 | (prefix,prefixLen) -> let b=if isProtocol prot  3u2  then 
if b.comms[65541u32] then 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[262149u32:=true]; lp= b.lp; med= b.med; } else 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[65541u32:=true]; lp= b.lp; med= b.med; } else 
None in 
(match b with 
 | None -> None
 | Some b -> if b.comms[327685u32] then 
None else 
Some {  aslen= b.aslen; bgpAd= b.bgpAd; comms= b.comms; lp= b.lp; med= b.med; }
)
)
 | 61n~41n -> (match d with 
 | (prefix,prefixLen) -> let b=if isProtocol prot  3u2  then 
if b.comms[65541u32] then 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[262149u32:=true]; lp= b.lp; med= b.med; } else 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[65541u32:=true]; lp= b.lp; med= b.med; } else 
None in 
(match b with 
 | None -> None
 | Some b -> if b.comms[393216u32] then 
None else 
Some {  aslen= b.aslen; bgpAd= b.bgpAd; comms= b.comms; lp= b.lp; med= b.med; }
)
)
 | 61n~18n -> (match d with 
 | (prefix,prefixLen) -> let b=if isProtocol prot  3u2  then 
if b.comms[65541u32] then 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[262149u32:=true]; lp= b.lp; med= b.med; } else 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[65541u32:=true]; lp= b.lp; med= b.med; } else 
None in 
(match b with 
 | None -> None
 | Some b -> if b.comms[327685u32] then 
None else 
Some {  aslen= b.aslen; bgpAd= b.bgpAd; comms= b.comms; lp= b.lp; med= b.med; }
)
)
 | 61n~43n -> (match d with 
 | (prefix,prefixLen) -> let b=if isProtocol prot  3u2  then 
if b.comms[65541u32] then 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[262149u32:=true]; lp= b.lp; med= b.med; } else 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[65541u32:=true]; lp= b.lp; med= b.med; } else 
None in 
(match b with 
 | None -> None
 | Some b -> if b.comms[393216u32] then 
None else 
Some {  aslen= b.aslen; bgpAd= b.bgpAd; comms= b.comms; lp= b.lp; med= b.med; }
)
)
 | 61n~40n -> (match d with 
 | (prefix,prefixLen) -> let b=if isProtocol prot  3u2  then 
if b.comms[65541u32] then 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[262149u32:=true]; lp= b.lp; med= b.med; } else 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[65541u32:=true]; lp= b.lp; med= b.med; } else 
None in 
(match b with 
 | None -> None
 | Some b -> if b.comms[393216u32] then 
None else 
Some {  aslen= b.aslen; bgpAd= b.bgpAd; comms= b.comms; lp= b.lp; med= b.med; }
)
)
 | 62n~16n -> (match d with 
 | (prefix,prefixLen) -> let b=if isProtocol prot  3u2  then 
if b.comms[65541u32] then 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[262149u32:=true]; lp= b.lp; med= b.med; } else 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[65541u32:=true]; lp= b.lp; med= b.med; } else 
None in 
(match b with 
 | None -> None
 | Some b -> if b.comms[327685u32] then 
None else 
Some {  aslen= b.aslen; bgpAd= b.bgpAd; comms= b.comms; lp= b.lp; med= b.med; }
)
)
 | 62n~71n -> (match d with 
 | (prefix,prefixLen) -> let b=if isProtocol prot  3u2  then 
if b.comms[65541u32] then 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[262149u32:=true]; lp= b.lp; med= b.med; } else 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[65541u32:=true]; lp= b.lp; med= b.med; } else 
None in 
(match b with 
 | None -> None
 | Some b -> if b.comms[393216u32] then 
None else 
Some {  aslen= b.aslen; bgpAd= b.bgpAd; comms= b.comms; lp= b.lp; med= b.med; }
)
)
 | 62n~10n -> (match d with 
 | (prefix,prefixLen) -> let b=if isProtocol prot  3u2  then 
if b.comms[65541u32] then 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[262149u32:=true]; lp= b.lp; med= b.med; } else 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[65541u32:=true]; lp= b.lp; med= b.med; } else 
None in 
(match b with 
 | None -> None
 | Some b -> if b.comms[327685u32] then 
None else 
Some {  aslen= b.aslen; bgpAd= b.bgpAd; comms= b.comms; lp= b.lp; med= b.med; }
)
)
 | 62n~72n -> (match d with 
 | (prefix,prefixLen) -> let b=if isProtocol prot  3u2  then 
if b.comms[65541u32] then 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[262149u32:=true]; lp= b.lp; med= b.med; } else 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[65541u32:=true]; lp= b.lp; med= b.med; } else 
None in 
(match b with 
 | None -> None
 | Some b -> if b.comms[393216u32] then 
None else 
Some {  aslen= b.aslen; bgpAd= b.bgpAd; comms= b.comms; lp= b.lp; med= b.med; }
)
)
 | 62n~18n -> (match d with 
 | (prefix,prefixLen) -> let b=if isProtocol prot  3u2  then 
if b.comms[65541u32] then 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[262149u32:=true]; lp= b.lp; med= b.med; } else 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[65541u32:=true]; lp= b.lp; med= b.med; } else 
None in 
(match b with 
 | None -> None
 | Some b -> if b.comms[327685u32] then 
None else 
Some {  aslen= b.aslen; bgpAd= b.bgpAd; comms= b.comms; lp= b.lp; med= b.med; }
)
)
 | 62n~70n -> (match d with 
 | (prefix,prefixLen) -> let b=if isProtocol prot  3u2  then 
if b.comms[65541u32] then 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[262149u32:=true]; lp= b.lp; med= b.med; } else 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[65541u32:=true]; lp= b.lp; med= b.med; } else 
None in 
(match b with 
 | None -> None
 | Some b -> if b.comms[393216u32] then 
None else 
Some {  aslen= b.aslen; bgpAd= b.bgpAd; comms= b.comms; lp= b.lp; med= b.med; }
)
)
 | 62n~8n -> (match d with 
 | (prefix,prefixLen) -> let b=if isProtocol prot  3u2  then 
if b.comms[65541u32] then 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[262149u32:=true]; lp= b.lp; med= b.med; } else 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[65541u32:=true]; lp= b.lp; med= b.med; } else 
None in 
(match b with 
 | None -> None
 | Some b -> if b.comms[327685u32] then 
None else 
Some {  aslen= b.aslen; bgpAd= b.bgpAd; comms= b.comms; lp= b.lp; med= b.med; }
)
)
 | 62n~66n -> (match d with 
 | (prefix,prefixLen) -> let b=if isProtocol prot  3u2  then 
if b.comms[65541u32] then 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[262149u32:=true]; lp= b.lp; med= b.med; } else 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[65541u32:=true]; lp= b.lp; med= b.med; } else 
None in 
(match b with 
 | None -> None
 | Some b -> if b.comms[393216u32] then 
None else 
Some {  aslen= b.aslen; bgpAd= b.bgpAd; comms= b.comms; lp= b.lp; med= b.med; }
)
)
 | 63n~10n -> (match d with 
 | (prefix,prefixLen) -> let b=if isProtocol prot  3u2  then 
if b.comms[65541u32] then 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[262149u32:=true]; lp= b.lp; med= b.med; } else 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[65541u32:=true]; lp= b.lp; med= b.med; } else 
None in 
(match b with 
 | None -> None
 | Some b -> if b.comms[327685u32] then 
None else 
Some {  aslen= b.aslen; bgpAd= b.bgpAd; comms= b.comms; lp= b.lp; med= b.med; }
)
)
 | 63n~16n -> (match d with 
 | (prefix,prefixLen) -> let b=if isProtocol prot  3u2  then 
if b.comms[65541u32] then 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[262149u32:=true]; lp= b.lp; med= b.med; } else 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[65541u32:=true]; lp= b.lp; med= b.med; } else 
None in 
(match b with 
 | None -> None
 | Some b -> if b.comms[327685u32] then 
None else 
Some {  aslen= b.aslen; bgpAd= b.bgpAd; comms= b.comms; lp= b.lp; med= b.med; }
)
)
 | 63n~67n -> (match d with 
 | (prefix,prefixLen) -> let b=if isProtocol prot  3u2  then 
if b.comms[65541u32] then 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[262149u32:=true]; lp= b.lp; med= b.med; } else 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[65541u32:=true]; lp= b.lp; med= b.med; } else 
None in 
(match b with 
 | None -> None
 | Some b -> if b.comms[393216u32] then 
None else 
Some {  aslen= b.aslen; bgpAd= b.bgpAd; comms= b.comms; lp= b.lp; med= b.med; }
)
)
 | 63n~56n -> (match d with 
 | (prefix,prefixLen) -> let b=if isProtocol prot  3u2  then 
if b.comms[65541u32] then 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[262149u32:=true]; lp= b.lp; med= b.med; } else 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[65541u32:=true]; lp= b.lp; med= b.med; } else 
None in 
(match b with 
 | None -> None
 | Some b -> if b.comms[393216u32] then 
None else 
Some {  aslen= b.aslen; bgpAd= b.bgpAd; comms= b.comms; lp= b.lp; med= b.med; }
)
)
 | 63n~68n -> (match d with 
 | (prefix,prefixLen) -> let b=if isProtocol prot  3u2  then 
if b.comms[65541u32] then 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[262149u32:=true]; lp= b.lp; med= b.med; } else 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[65541u32:=true]; lp= b.lp; med= b.med; } else 
None in 
(match b with 
 | None -> None
 | Some b -> if b.comms[393216u32] then 
None else 
Some {  aslen= b.aslen; bgpAd= b.bgpAd; comms= b.comms; lp= b.lp; med= b.med; }
)
)
 | 63n~18n -> (match d with 
 | (prefix,prefixLen) -> let b=if isProtocol prot  3u2  then 
if b.comms[65541u32] then 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[262149u32:=true]; lp= b.lp; med= b.med; } else 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[65541u32:=true]; lp= b.lp; med= b.med; } else 
None in 
(match b with 
 | None -> None
 | Some b -> if b.comms[327685u32] then 
None else 
Some {  aslen= b.aslen; bgpAd= b.bgpAd; comms= b.comms; lp= b.lp; med= b.med; }
)
)
 | 63n~57n -> (match d with 
 | (prefix,prefixLen) -> let b=if isProtocol prot  3u2  then 
if b.comms[65541u32] then 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[262149u32:=true]; lp= b.lp; med= b.med; } else 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[65541u32:=true]; lp= b.lp; med= b.med; } else 
None in 
(match b with 
 | None -> None
 | Some b -> if b.comms[393216u32] then 
None else 
Some {  aslen= b.aslen; bgpAd= b.bgpAd; comms= b.comms; lp= b.lp; med= b.med; }
)
)
 | 63n~8n -> (match d with 
 | (prefix,prefixLen) -> let b=if isProtocol prot  3u2  then 
if b.comms[65541u32] then 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[262149u32:=true]; lp= b.lp; med= b.med; } else 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[65541u32:=true]; lp= b.lp; med= b.med; } else 
None in 
(match b with 
 | None -> None
 | Some b -> if b.comms[327685u32] then 
None else 
Some {  aslen= b.aslen; bgpAd= b.bgpAd; comms= b.comms; lp= b.lp; med= b.med; }
)
)
 | 64n~59n -> (match d with 
 | (prefix,prefixLen) -> let b=if prefixLen = 24u6 && 1174419200u32 <=u32 prefix && prefix <u32 1174419456u32 then 
if b.comms[131076u32] then 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[327684u32:=true]; lp= b.lp; med= b.med; } else 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[131076u32:=true]; lp= b.lp; med= b.med; } else 
if isProtocol prot  3u2  then 
if b.comms[131076u32] then 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[327684u32:=true]; lp= b.lp; med= b.med; } else 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[131076u32:=true]; lp= b.lp; med= b.med; } else 
None in 
(match b with 
 | None -> None
 | Some b -> if b.comms[262148u32] then 
None else 
Some {  aslen= b.aslen; bgpAd= b.bgpAd; comms= b.comms; lp= b.lp; med= b.med; }
)
)
 | 64n~65n -> (match d with 
 | (prefix,prefixLen) -> let b=if prefixLen = 24u6 && 1174419200u32 <=u32 prefix && prefix <u32 1174419456u32 then 
if b.comms[131076u32] then 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[327684u32:=true]; lp= b.lp; med= b.med; } else 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[131076u32:=true]; lp= b.lp; med= b.med; } else 
if isProtocol prot  3u2  then 
if b.comms[131076u32] then 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[327684u32:=true]; lp= b.lp; med= b.med; } else 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[131076u32:=true]; lp= b.lp; med= b.med; } else 
None in 
(match b with 
 | None -> None
 | Some b -> if b.comms[262148u32] then 
None else 
Some {  aslen= b.aslen; bgpAd= b.bgpAd; comms= b.comms; lp= b.lp; med= b.med; }
)
)
 | 64n~75n -> (match d with 
 | (prefix,prefixLen) -> let b=if prefixLen = 24u6 && 1174419200u32 <=u32 prefix && prefix <u32 1174419456u32 then 
if b.comms[131076u32] then 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[327684u32:=true]; lp= b.lp; med= b.med; } else 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[131076u32:=true]; lp= b.lp; med= b.med; } else 
if isProtocol prot  3u2  then 
if b.comms[131076u32] then 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[327684u32:=true]; lp= b.lp; med= b.med; } else 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[131076u32:=true]; lp= b.lp; med= b.med; } else 
None in 
(match b with 
 | None -> None
 | Some b -> if b.comms[262148u32] then 
None else 
Some {  aslen= b.aslen; bgpAd= b.bgpAd; comms= b.comms; lp= b.lp; med= b.med; }
)
)
 | 64n~58n -> (match d with 
 | (prefix,prefixLen) -> let b=if prefixLen = 24u6 && 1174419200u32 <=u32 prefix && prefix <u32 1174419456u32 then 
if b.comms[131076u32] then 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[327684u32:=true]; lp= b.lp; med= b.med; } else 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[131076u32:=true]; lp= b.lp; med= b.med; } else 
if isProtocol prot  3u2  then 
if b.comms[131076u32] then 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[327684u32:=true]; lp= b.lp; med= b.med; } else 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[131076u32:=true]; lp= b.lp; med= b.med; } else 
None in 
(match b with 
 | None -> None
 | Some b -> if b.comms[262148u32] then 
None else 
Some {  aslen= b.aslen; bgpAd= b.bgpAd; comms= b.comms; lp= b.lp; med= b.med; }
)
)
 | 65n~54n -> (match d with 
 | (prefix,prefixLen) -> let b=if isProtocol prot  3u2  then 
if b.comms[65540u32] then 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[262148u32:=true]; lp= b.lp; med= b.med; } else 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[65540u32:=true]; lp= b.lp; med= b.med; } else 
None in 
(match b with 
 | None -> None
 | Some b -> if b.comms[393216u32] then 
None else 
Some {  aslen= b.aslen; bgpAd= b.bgpAd; comms= b.comms; lp= b.lp; med= b.med; }
)
)
 | 65n~76n -> (match d with 
 | (prefix,prefixLen) -> let b=if isProtocol prot  3u2  then 
if b.comms[65540u32] then 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[262148u32:=true]; lp= b.lp; med= b.med; } else 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[65540u32:=true]; lp= b.lp; med= b.med; } else 
None in 
(match b with 
 | None -> None
 | Some b -> if b.comms[327684u32] then 
None else 
Some {  aslen= b.aslen; bgpAd= b.bgpAd; comms= b.comms; lp= b.lp; med= b.med; }
)
)
 | 65n~52n -> (match d with 
 | (prefix,prefixLen) -> let b=if isProtocol prot  3u2  then 
if b.comms[65540u32] then 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[262148u32:=true]; lp= b.lp; med= b.med; } else 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[65540u32:=true]; lp= b.lp; med= b.med; } else 
None in 
(match b with 
 | None -> None
 | Some b -> if b.comms[393216u32] then 
None else 
Some {  aslen= b.aslen; bgpAd= b.bgpAd; comms= b.comms; lp= b.lp; med= b.med; }
)
)
 | 65n~64n -> (match d with 
 | (prefix,prefixLen) -> let b=if isProtocol prot  3u2  then 
if b.comms[65540u32] then 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[262148u32:=true]; lp= b.lp; med= b.med; } else 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[65540u32:=true]; lp= b.lp; med= b.med; } else 
None in 
(match b with 
 | None -> None
 | Some b -> if b.comms[327684u32] then 
None else 
Some {  aslen= b.aslen; bgpAd= b.bgpAd; comms= b.comms; lp= b.lp; med= b.med; }
)
)
 | 65n~73n -> (match d with 
 | (prefix,prefixLen) -> let b=if isProtocol prot  3u2  then 
if b.comms[65540u32] then 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[262148u32:=true]; lp= b.lp; med= b.med; } else 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[65540u32:=true]; lp= b.lp; med= b.med; } else 
None in 
(match b with 
 | None -> None
 | Some b -> if b.comms[327684u32] then 
None else 
Some {  aslen= b.aslen; bgpAd= b.bgpAd; comms= b.comms; lp= b.lp; med= b.med; }
)
)
 | 65n~49n -> (match d with 
 | (prefix,prefixLen) -> let b=if isProtocol prot  3u2  then 
if b.comms[65540u32] then 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[262148u32:=true]; lp= b.lp; med= b.med; } else 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[65540u32:=true]; lp= b.lp; med= b.med; } else 
None in 
(match b with 
 | None -> None
 | Some b -> if b.comms[393216u32] then 
None else 
Some {  aslen= b.aslen; bgpAd= b.bgpAd; comms= b.comms; lp= b.lp; med= b.med; }
)
)
 | 65n~55n -> (match d with 
 | (prefix,prefixLen) -> let b=if isProtocol prot  3u2  then 
if b.comms[65540u32] then 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[262148u32:=true]; lp= b.lp; med= b.med; } else 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[65540u32:=true]; lp= b.lp; med= b.med; } else 
None in 
(match b with 
 | None -> None
 | Some b -> if b.comms[393216u32] then 
None else 
Some {  aslen= b.aslen; bgpAd= b.bgpAd; comms= b.comms; lp= b.lp; med= b.med; }
)
)
 | 65n~74n -> (match d with 
 | (prefix,prefixLen) -> let b=if isProtocol prot  3u2  then 
if b.comms[65540u32] then 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[262148u32:=true]; lp= b.lp; med= b.med; } else 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[65540u32:=true]; lp= b.lp; med= b.med; } else 
None in 
(match b with 
 | None -> None
 | Some b -> if b.comms[327684u32] then 
None else 
Some {  aslen= b.aslen; bgpAd= b.bgpAd; comms= b.comms; lp= b.lp; med= b.med; }
)
)
 | 66n~79n -> (match d with 
 | (prefix,prefixLen) -> let b=if isProtocol prot  3u2  then 
if b.comms[196608u32] then 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[393216u32:=true]; lp= b.lp; med= b.med; } else 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[196608u32:=true]; lp= b.lp; med= b.med; } else 
None in 
(match b with 
 | None -> None
 | Some b -> if b.comms[262147u32] then 
None else 
Some {  aslen= b.aslen; bgpAd= b.bgpAd; comms= b.comms; lp= b.lp; med= b.med; }
)
)
 | 66n~9n -> (match d with 
 | (prefix,prefixLen) -> let b=if isProtocol prot  3u2  then 
if b.comms[196608u32] then 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[393216u32:=true]; lp= b.lp; med= b.med; } else 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[196608u32:=true]; lp= b.lp; med= b.med; } else 
None in 
(match b with 
 | None -> None
 | Some b -> if b.comms[262146u32] then 
None else 
Some {  aslen= b.aslen; bgpAd= b.bgpAd; comms= b.comms; lp= b.lp; med= b.med; }
)
)
 | 66n~14n -> (match d with 
 | (prefix,prefixLen) -> let b=if isProtocol prot  3u2  then 
if b.comms[196608u32] then 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[393216u32:=true]; lp= b.lp; med= b.med; } else 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[196608u32:=true]; lp= b.lp; med= b.med; } else 
None in 
(match b with 
 | None -> None
 | Some b -> if b.comms[262151u32] then 
None else 
Some {  aslen= b.aslen; bgpAd= b.bgpAd; comms= b.comms; lp= b.lp; med= b.med; }
)
)
 | 66n~50n -> (match d with 
 | (prefix,prefixLen) -> let b=if isProtocol prot  3u2  then 
if b.comms[196608u32] then 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[393216u32:=true]; lp= b.lp; med= b.med; } else 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[196608u32:=true]; lp= b.lp; med= b.med; } else 
None in 
(match b with 
 | None -> None
 | Some b -> if b.comms[262144u32] then 
None else 
Some {  aslen= b.aslen; bgpAd= b.bgpAd; comms= b.comms; lp= b.lp; med= b.med; }
)
)
 | 66n~58n -> (match d with 
 | (prefix,prefixLen) -> let b=if isProtocol prot  3u2  then 
if b.comms[196608u32] then 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[393216u32:=true]; lp= b.lp; med= b.med; } else 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[196608u32:=true]; lp= b.lp; med= b.med; } else 
None in 
(match b with 
 | None -> None
 | Some b -> if b.comms[262148u32] then 
None else 
Some {  aslen= b.aslen; bgpAd= b.bgpAd; comms= b.comms; lp= b.lp; med= b.med; }
)
)
 | 66n~25n -> (match d with 
 | (prefix,prefixLen) -> let b=if isProtocol prot  3u2  then 
if b.comms[196608u32] then 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[393216u32:=true]; lp= b.lp; med= b.med; } else 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[196608u32:=true]; lp= b.lp; med= b.med; } else 
None in 
(match b with 
 | None -> None
 | Some b -> if b.comms[262145u32] then 
None else 
Some {  aslen= b.aslen; bgpAd= b.bgpAd; comms= b.comms; lp= b.lp; med= b.med; }
)
)
 | 66n~30n -> (match d with 
 | (prefix,prefixLen) -> let b=if isProtocol prot  3u2  then 
if b.comms[196608u32] then 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[393216u32:=true]; lp= b.lp; med= b.med; } else 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[196608u32:=true]; lp= b.lp; med= b.med; } else 
None in 
(match b with 
 | None -> None
 | Some b -> if b.comms[262150u32] then 
None else 
Some {  aslen= b.aslen; bgpAd= b.bgpAd; comms= b.comms; lp= b.lp; med= b.med; }
)
)
 | 66n~62n -> (match d with 
 | (prefix,prefixLen) -> let b=if isProtocol prot  3u2  then 
if b.comms[196608u32] then 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[393216u32:=true]; lp= b.lp; med= b.med; } else 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[196608u32:=true]; lp= b.lp; med= b.med; } else 
None in 
(match b with 
 | None -> None
 | Some b -> if b.comms[262149u32] then 
None else 
Some {  aslen= b.aslen; bgpAd= b.bgpAd; comms= b.comms; lp= b.lp; med= b.med; }
)
)
 | 67n~53n -> (match d with 
 | (prefix,prefixLen) -> let b=if isProtocol prot  3u2  then 
if b.comms[196608u32] then 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[393216u32:=true]; lp= b.lp; med= b.med; } else 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[196608u32:=true]; lp= b.lp; med= b.med; } else 
None in 
(match b with 
 | None -> None
 | Some b -> if b.comms[262144u32] then 
None else 
Some {  aslen= b.aslen; bgpAd= b.bgpAd; comms= b.comms; lp= b.lp; med= b.med; }
)
)
 | 67n~11n -> (match d with 
 | (prefix,prefixLen) -> let b=if isProtocol prot  3u2  then 
if b.comms[196608u32] then 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[393216u32:=true]; lp= b.lp; med= b.med; } else 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[196608u32:=true]; lp= b.lp; med= b.med; } else 
None in 
(match b with 
 | None -> None
 | Some b -> if b.comms[262146u32] then 
None else 
Some {  aslen= b.aslen; bgpAd= b.bgpAd; comms= b.comms; lp= b.lp; med= b.med; }
)
)
 | 67n~38n -> (match d with 
 | (prefix,prefixLen) -> let b=if isProtocol prot  3u2  then 
if b.comms[196608u32] then 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[393216u32:=true]; lp= b.lp; med= b.med; } else 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[196608u32:=true]; lp= b.lp; med= b.med; } else 
None in 
(match b with 
 | None -> None
 | Some b -> if b.comms[262150u32] then 
None else 
Some {  aslen= b.aslen; bgpAd= b.bgpAd; comms= b.comms; lp= b.lp; med= b.med; }
)
)
 | 67n~63n -> (match d with 
 | (prefix,prefixLen) -> let b=if isProtocol prot  3u2  then 
if b.comms[196608u32] then 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[393216u32:=true]; lp= b.lp; med= b.med; } else 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[196608u32:=true]; lp= b.lp; med= b.med; } else 
None in 
(match b with 
 | None -> None
 | Some b -> if b.comms[262149u32] then 
None else 
Some {  aslen= b.aslen; bgpAd= b.bgpAd; comms= b.comms; lp= b.lp; med= b.med; }
)
)
 | 67n~59n -> (match d with 
 | (prefix,prefixLen) -> let b=if isProtocol prot  3u2  then 
if b.comms[196608u32] then 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[393216u32:=true]; lp= b.lp; med= b.med; } else 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[196608u32:=true]; lp= b.lp; med= b.med; } else 
None in 
(match b with 
 | None -> None
 | Some b -> if b.comms[262148u32] then 
None else 
Some {  aslen= b.aslen; bgpAd= b.bgpAd; comms= b.comms; lp= b.lp; med= b.med; }
)
)
 | 67n~32n -> (match d with 
 | (prefix,prefixLen) -> let b=if isProtocol prot  3u2  then 
if b.comms[196608u32] then 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[393216u32:=true]; lp= b.lp; med= b.med; } else 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[196608u32:=true]; lp= b.lp; med= b.med; } else 
None in 
(match b with 
 | None -> None
 | Some b -> if b.comms[262145u32] then 
None else 
Some {  aslen= b.aslen; bgpAd= b.bgpAd; comms= b.comms; lp= b.lp; med= b.med; }
)
)
 | 67n~15n -> (match d with 
 | (prefix,prefixLen) -> let b=if isProtocol prot  3u2  then 
if b.comms[196608u32] then 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[393216u32:=true]; lp= b.lp; med= b.med; } else 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[196608u32:=true]; lp= b.lp; med= b.med; } else 
None in 
(match b with 
 | None -> None
 | Some b -> if b.comms[262151u32] then 
None else 
Some {  aslen= b.aslen; bgpAd= b.bgpAd; comms= b.comms; lp= b.lp; med= b.med; }
)
)
 | 67n~77n -> (match d with 
 | (prefix,prefixLen) -> let b=if isProtocol prot  3u2  then 
if b.comms[196608u32] then 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[393216u32:=true]; lp= b.lp; med= b.med; } else 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[196608u32:=true]; lp= b.lp; med= b.med; } else 
None in 
(match b with 
 | None -> None
 | Some b -> if b.comms[262147u32] then 
None else 
Some {  aslen= b.aslen; bgpAd= b.bgpAd; comms= b.comms; lp= b.lp; med= b.med; }
)
)
 | 68n~63n -> (match d with 
 | (prefix,prefixLen) -> let b=if isProtocol prot  3u2  then 
if b.comms[196608u32] then 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[393216u32:=true]; lp= b.lp; med= b.med; } else 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[196608u32:=true]; lp= b.lp; med= b.med; } else 
None in 
(match b with 
 | None -> None
 | Some b -> if b.comms[262149u32] then 
None else 
Some {  aslen= b.aslen; bgpAd= b.bgpAd; comms= b.comms; lp= b.lp; med= b.med; }
)
)
 | 68n~11n -> (match d with 
 | (prefix,prefixLen) -> let b=if isProtocol prot  3u2  then 
if b.comms[196608u32] then 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[393216u32:=true]; lp= b.lp; med= b.med; } else 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[196608u32:=true]; lp= b.lp; med= b.med; } else 
None in 
(match b with 
 | None -> None
 | Some b -> if b.comms[262146u32] then 
None else 
Some {  aslen= b.aslen; bgpAd= b.bgpAd; comms= b.comms; lp= b.lp; med= b.med; }
)
)
 | 68n~77n -> (match d with 
 | (prefix,prefixLen) -> let b=if isProtocol prot  3u2  then 
if b.comms[196608u32] then 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[393216u32:=true]; lp= b.lp; med= b.med; } else 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[196608u32:=true]; lp= b.lp; med= b.med; } else 
None in 
(match b with 
 | None -> None
 | Some b -> if b.comms[262147u32] then 
None else 
Some {  aslen= b.aslen; bgpAd= b.bgpAd; comms= b.comms; lp= b.lp; med= b.med; }
)
)
 | 68n~32n -> (match d with 
 | (prefix,prefixLen) -> let b=if isProtocol prot  3u2  then 
if b.comms[196608u32] then 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[393216u32:=true]; lp= b.lp; med= b.med; } else 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[196608u32:=true]; lp= b.lp; med= b.med; } else 
None in 
(match b with 
 | None -> None
 | Some b -> if b.comms[262145u32] then 
None else 
Some {  aslen= b.aslen; bgpAd= b.bgpAd; comms= b.comms; lp= b.lp; med= b.med; }
)
)
 | 68n~59n -> (match d with 
 | (prefix,prefixLen) -> let b=if isProtocol prot  3u2  then 
if b.comms[196608u32] then 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[393216u32:=true]; lp= b.lp; med= b.med; } else 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[196608u32:=true]; lp= b.lp; med= b.med; } else 
None in 
(match b with 
 | None -> None
 | Some b -> if b.comms[262148u32] then 
None else 
Some {  aslen= b.aslen; bgpAd= b.bgpAd; comms= b.comms; lp= b.lp; med= b.med; }
)
)
 | 68n~38n -> (match d with 
 | (prefix,prefixLen) -> let b=if isProtocol prot  3u2  then 
if b.comms[196608u32] then 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[393216u32:=true]; lp= b.lp; med= b.med; } else 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[196608u32:=true]; lp= b.lp; med= b.med; } else 
None in 
(match b with 
 | None -> None
 | Some b -> if b.comms[262150u32] then 
None else 
Some {  aslen= b.aslen; bgpAd= b.bgpAd; comms= b.comms; lp= b.lp; med= b.med; }
)
)
 | 68n~53n -> (match d with 
 | (prefix,prefixLen) -> let b=if isProtocol prot  3u2  then 
if b.comms[196608u32] then 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[393216u32:=true]; lp= b.lp; med= b.med; } else 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[196608u32:=true]; lp= b.lp; med= b.med; } else 
None in 
(match b with 
 | None -> None
 | Some b -> if b.comms[262144u32] then 
None else 
Some {  aslen= b.aslen; bgpAd= b.bgpAd; comms= b.comms; lp= b.lp; med= b.med; }
)
)
 | 68n~15n -> (match d with 
 | (prefix,prefixLen) -> let b=if isProtocol prot  3u2  then 
if b.comms[196608u32] then 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[393216u32:=true]; lp= b.lp; med= b.med; } else 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[196608u32:=true]; lp= b.lp; med= b.med; } else 
None in 
(match b with 
 | None -> None
 | Some b -> if b.comms[262151u32] then 
None else 
Some {  aslen= b.aslen; bgpAd= b.bgpAd; comms= b.comms; lp= b.lp; med= b.med; }
)
)
 | 69n~40n -> (match d with 
 | (prefix,prefixLen) -> let b=if isProtocol prot  3u2  then 
if b.comms[65539u32] then 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[262147u32:=true]; lp= b.lp; med= b.med; } else 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[65539u32:=true]; lp= b.lp; med= b.med; } else 
None in 
(match b with 
 | None -> None
 | Some b -> if b.comms[393216u32] then 
None else 
Some {  aslen= b.aslen; bgpAd= b.bgpAd; comms= b.comms; lp= b.lp; med= b.med; }
)
)
 | 69n~48n -> (match d with 
 | (prefix,prefixLen) -> let b=if isProtocol prot  3u2  then 
if b.comms[65539u32] then 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[262147u32:=true]; lp= b.lp; med= b.med; } else 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[65539u32:=true]; lp= b.lp; med= b.med; } else 
None in 
(match b with 
 | None -> None
 | Some b -> if b.comms[327683u32] then 
None else 
Some {  aslen= b.aslen; bgpAd= b.bgpAd; comms= b.comms; lp= b.lp; med= b.med; }
)
)
 | 69n~45n -> (match d with 
 | (prefix,prefixLen) -> let b=if isProtocol prot  3u2  then 
if b.comms[65539u32] then 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[262147u32:=true]; lp= b.lp; med= b.med; } else 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[65539u32:=true]; lp= b.lp; med= b.med; } else 
None in 
(match b with 
 | None -> None
 | Some b -> if b.comms[327683u32] then 
None else 
Some {  aslen= b.aslen; bgpAd= b.bgpAd; comms= b.comms; lp= b.lp; med= b.med; }
)
)
 | 69n~42n -> (match d with 
 | (prefix,prefixLen) -> let b=if isProtocol prot  3u2  then 
if b.comms[65539u32] then 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[262147u32:=true]; lp= b.lp; med= b.med; } else 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[65539u32:=true]; lp= b.lp; med= b.med; } else 
None in 
(match b with 
 | None -> None
 | Some b -> if b.comms[327683u32] then 
None else 
Some {  aslen= b.aslen; bgpAd= b.bgpAd; comms= b.comms; lp= b.lp; med= b.med; }
)
)
 | 69n~41n -> (match d with 
 | (prefix,prefixLen) -> let b=if isProtocol prot  3u2  then 
if b.comms[65539u32] then 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[262147u32:=true]; lp= b.lp; med= b.med; } else 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[65539u32:=true]; lp= b.lp; med= b.med; } else 
None in 
(match b with 
 | None -> None
 | Some b -> if b.comms[393216u32] then 
None else 
Some {  aslen= b.aslen; bgpAd= b.bgpAd; comms= b.comms; lp= b.lp; med= b.med; }
)
)
 | 69n~43n -> (match d with 
 | (prefix,prefixLen) -> let b=if isProtocol prot  3u2  then 
if b.comms[65539u32] then 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[262147u32:=true]; lp= b.lp; med= b.med; } else 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[65539u32:=true]; lp= b.lp; med= b.med; } else 
None in 
(match b with 
 | None -> None
 | Some b -> if b.comms[393216u32] then 
None else 
Some {  aslen= b.aslen; bgpAd= b.bgpAd; comms= b.comms; lp= b.lp; med= b.med; }
)
)
 | 69n~46n -> (match d with 
 | (prefix,prefixLen) -> let b=if isProtocol prot  3u2  then 
if b.comms[65539u32] then 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[262147u32:=true]; lp= b.lp; med= b.med; } else 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[65539u32:=true]; lp= b.lp; med= b.med; } else 
None in 
(match b with 
 | None -> None
 | Some b -> if b.comms[393216u32] then 
None else 
Some {  aslen= b.aslen; bgpAd= b.bgpAd; comms= b.comms; lp= b.lp; med= b.med; }
)
)
 | 69n~51n -> (match d with 
 | (prefix,prefixLen) -> let b=if isProtocol prot  3u2  then 
if b.comms[65539u32] then 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[262147u32:=true]; lp= b.lp; med= b.med; } else 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[65539u32:=true]; lp= b.lp; med= b.med; } else 
None in 
(match b with 
 | None -> None
 | Some b -> if b.comms[327683u32] then 
None else 
Some {  aslen= b.aslen; bgpAd= b.bgpAd; comms= b.comms; lp= b.lp; med= b.med; }
)
)
 | 70n~58n -> (match d with 
 | (prefix,prefixLen) -> let b=if isProtocol prot  3u2  then 
if b.comms[196608u32] then 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[393216u32:=true]; lp= b.lp; med= b.med; } else 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[196608u32:=true]; lp= b.lp; med= b.med; } else 
None in 
(match b with 
 | None -> None
 | Some b -> if b.comms[262148u32] then 
None else 
Some {  aslen= b.aslen; bgpAd= b.bgpAd; comms= b.comms; lp= b.lp; med= b.med; }
)
)
 | 70n~62n -> (match d with 
 | (prefix,prefixLen) -> let b=if isProtocol prot  3u2  then 
if b.comms[196608u32] then 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[393216u32:=true]; lp= b.lp; med= b.med; } else 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[196608u32:=true]; lp= b.lp; med= b.med; } else 
None in 
(match b with 
 | None -> None
 | Some b -> if b.comms[262149u32] then 
None else 
Some {  aslen= b.aslen; bgpAd= b.bgpAd; comms= b.comms; lp= b.lp; med= b.med; }
)
)
 | 70n~25n -> (match d with 
 | (prefix,prefixLen) -> let b=if isProtocol prot  3u2  then 
if b.comms[196608u32] then 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[393216u32:=true]; lp= b.lp; med= b.med; } else 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[196608u32:=true]; lp= b.lp; med= b.med; } else 
None in 
(match b with 
 | None -> None
 | Some b -> if b.comms[262145u32] then 
None else 
Some {  aslen= b.aslen; bgpAd= b.bgpAd; comms= b.comms; lp= b.lp; med= b.med; }
)
)
 | 70n~14n -> (match d with 
 | (prefix,prefixLen) -> let b=if isProtocol prot  3u2  then 
if b.comms[196608u32] then 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[393216u32:=true]; lp= b.lp; med= b.med; } else 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[196608u32:=true]; lp= b.lp; med= b.med; } else 
None in 
(match b with 
 | None -> None
 | Some b -> if b.comms[262151u32] then 
None else 
Some {  aslen= b.aslen; bgpAd= b.bgpAd; comms= b.comms; lp= b.lp; med= b.med; }
)
)
 | 70n~30n -> (match d with 
 | (prefix,prefixLen) -> let b=if isProtocol prot  3u2  then 
if b.comms[196608u32] then 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[393216u32:=true]; lp= b.lp; med= b.med; } else 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[196608u32:=true]; lp= b.lp; med= b.med; } else 
None in 
(match b with 
 | None -> None
 | Some b -> if b.comms[262150u32] then 
None else 
Some {  aslen= b.aslen; bgpAd= b.bgpAd; comms= b.comms; lp= b.lp; med= b.med; }
)
)
 | 70n~50n -> (match d with 
 | (prefix,prefixLen) -> let b=if isProtocol prot  3u2  then 
if b.comms[196608u32] then 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[393216u32:=true]; lp= b.lp; med= b.med; } else 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[196608u32:=true]; lp= b.lp; med= b.med; } else 
None in 
(match b with 
 | None -> None
 | Some b -> if b.comms[262144u32] then 
None else 
Some {  aslen= b.aslen; bgpAd= b.bgpAd; comms= b.comms; lp= b.lp; med= b.med; }
)
)
 | 70n~79n -> (match d with 
 | (prefix,prefixLen) -> let b=if isProtocol prot  3u2  then 
if b.comms[196608u32] then 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[393216u32:=true]; lp= b.lp; med= b.med; } else 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[196608u32:=true]; lp= b.lp; med= b.med; } else 
None in 
(match b with 
 | None -> None
 | Some b -> if b.comms[262147u32] then 
None else 
Some {  aslen= b.aslen; bgpAd= b.bgpAd; comms= b.comms; lp= b.lp; med= b.med; }
)
)
 | 70n~9n -> (match d with 
 | (prefix,prefixLen) -> let b=if isProtocol prot  3u2  then 
if b.comms[196608u32] then 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[393216u32:=true]; lp= b.lp; med= b.med; } else 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[196608u32:=true]; lp= b.lp; med= b.med; } else 
None in 
(match b with 
 | None -> None
 | Some b -> if b.comms[262146u32] then 
None else 
Some {  aslen= b.aslen; bgpAd= b.bgpAd; comms= b.comms; lp= b.lp; med= b.med; }
)
)
 | 71n~58n -> (match d with 
 | (prefix,prefixLen) -> let b=if isProtocol prot  3u2  then 
if b.comms[196608u32] then 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[393216u32:=true]; lp= b.lp; med= b.med; } else 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[196608u32:=true]; lp= b.lp; med= b.med; } else 
None in 
(match b with 
 | None -> None
 | Some b -> if b.comms[262148u32] then 
None else 
Some {  aslen= b.aslen; bgpAd= b.bgpAd; comms= b.comms; lp= b.lp; med= b.med; }
)
)
 | 71n~50n -> (match d with 
 | (prefix,prefixLen) -> let b=if isProtocol prot  3u2  then 
if b.comms[196608u32] then 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[393216u32:=true]; lp= b.lp; med= b.med; } else 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[196608u32:=true]; lp= b.lp; med= b.med; } else 
None in 
(match b with 
 | None -> None
 | Some b -> if b.comms[262144u32] then 
None else 
Some {  aslen= b.aslen; bgpAd= b.bgpAd; comms= b.comms; lp= b.lp; med= b.med; }
)
)
 | 71n~25n -> (match d with 
 | (prefix,prefixLen) -> let b=if isProtocol prot  3u2  then 
if b.comms[196608u32] then 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[393216u32:=true]; lp= b.lp; med= b.med; } else 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[196608u32:=true]; lp= b.lp; med= b.med; } else 
None in 
(match b with 
 | None -> None
 | Some b -> if b.comms[262145u32] then 
None else 
Some {  aslen= b.aslen; bgpAd= b.bgpAd; comms= b.comms; lp= b.lp; med= b.med; }
)
)
 | 71n~14n -> (match d with 
 | (prefix,prefixLen) -> let b=if isProtocol prot  3u2  then 
if b.comms[196608u32] then 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[393216u32:=true]; lp= b.lp; med= b.med; } else 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[196608u32:=true]; lp= b.lp; med= b.med; } else 
None in 
(match b with 
 | None -> None
 | Some b -> if b.comms[262151u32] then 
None else 
Some {  aslen= b.aslen; bgpAd= b.bgpAd; comms= b.comms; lp= b.lp; med= b.med; }
)
)
 | 71n~30n -> (match d with 
 | (prefix,prefixLen) -> let b=if isProtocol prot  3u2  then 
if b.comms[196608u32] then 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[393216u32:=true]; lp= b.lp; med= b.med; } else 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[196608u32:=true]; lp= b.lp; med= b.med; } else 
None in 
(match b with 
 | None -> None
 | Some b -> if b.comms[262150u32] then 
None else 
Some {  aslen= b.aslen; bgpAd= b.bgpAd; comms= b.comms; lp= b.lp; med= b.med; }
)
)
 | 71n~62n -> (match d with 
 | (prefix,prefixLen) -> let b=if isProtocol prot  3u2  then 
if b.comms[196608u32] then 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[393216u32:=true]; lp= b.lp; med= b.med; } else 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[196608u32:=true]; lp= b.lp; med= b.med; } else 
None in 
(match b with 
 | None -> None
 | Some b -> if b.comms[262149u32] then 
None else 
Some {  aslen= b.aslen; bgpAd= b.bgpAd; comms= b.comms; lp= b.lp; med= b.med; }
)
)
 | 71n~9n -> (match d with 
 | (prefix,prefixLen) -> let b=if isProtocol prot  3u2  then 
if b.comms[196608u32] then 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[393216u32:=true]; lp= b.lp; med= b.med; } else 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[196608u32:=true]; lp= b.lp; med= b.med; } else 
None in 
(match b with 
 | None -> None
 | Some b -> if b.comms[262146u32] then 
None else 
Some {  aslen= b.aslen; bgpAd= b.bgpAd; comms= b.comms; lp= b.lp; med= b.med; }
)
)
 | 71n~79n -> (match d with 
 | (prefix,prefixLen) -> let b=if isProtocol prot  3u2  then 
if b.comms[196608u32] then 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[393216u32:=true]; lp= b.lp; med= b.med; } else 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[196608u32:=true]; lp= b.lp; med= b.med; } else 
None in 
(match b with 
 | None -> None
 | Some b -> if b.comms[262147u32] then 
None else 
Some {  aslen= b.aslen; bgpAd= b.bgpAd; comms= b.comms; lp= b.lp; med= b.med; }
)
)
 | 72n~79n -> (match d with 
 | (prefix,prefixLen) -> let b=if isProtocol prot  3u2  then 
if b.comms[196608u32] then 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[393216u32:=true]; lp= b.lp; med= b.med; } else 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[196608u32:=true]; lp= b.lp; med= b.med; } else 
None in 
(match b with 
 | None -> None
 | Some b -> if b.comms[262147u32] then 
None else 
Some {  aslen= b.aslen; bgpAd= b.bgpAd; comms= b.comms; lp= b.lp; med= b.med; }
)
)
 | 72n~14n -> (match d with 
 | (prefix,prefixLen) -> let b=if isProtocol prot  3u2  then 
if b.comms[196608u32] then 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[393216u32:=true]; lp= b.lp; med= b.med; } else 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[196608u32:=true]; lp= b.lp; med= b.med; } else 
None in 
(match b with 
 | None -> None
 | Some b -> if b.comms[262151u32] then 
None else 
Some {  aslen= b.aslen; bgpAd= b.bgpAd; comms= b.comms; lp= b.lp; med= b.med; }
)
)
 | 72n~50n -> (match d with 
 | (prefix,prefixLen) -> let b=if isProtocol prot  3u2  then 
if b.comms[196608u32] then 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[393216u32:=true]; lp= b.lp; med= b.med; } else 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[196608u32:=true]; lp= b.lp; med= b.med; } else 
None in 
(match b with 
 | None -> None
 | Some b -> if b.comms[262144u32] then 
None else 
Some {  aslen= b.aslen; bgpAd= b.bgpAd; comms= b.comms; lp= b.lp; med= b.med; }
)
)
 | 72n~25n -> (match d with 
 | (prefix,prefixLen) -> let b=if isProtocol prot  3u2  then 
if b.comms[196608u32] then 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[393216u32:=true]; lp= b.lp; med= b.med; } else 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[196608u32:=true]; lp= b.lp; med= b.med; } else 
None in 
(match b with 
 | None -> None
 | Some b -> if b.comms[262145u32] then 
None else 
Some {  aslen= b.aslen; bgpAd= b.bgpAd; comms= b.comms; lp= b.lp; med= b.med; }
)
)
 | 72n~58n -> (match d with 
 | (prefix,prefixLen) -> let b=if isProtocol prot  3u2  then 
if b.comms[196608u32] then 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[393216u32:=true]; lp= b.lp; med= b.med; } else 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[196608u32:=true]; lp= b.lp; med= b.med; } else 
None in 
(match b with 
 | None -> None
 | Some b -> if b.comms[262148u32] then 
None else 
Some {  aslen= b.aslen; bgpAd= b.bgpAd; comms= b.comms; lp= b.lp; med= b.med; }
)
)
 | 72n~30n -> (match d with 
 | (prefix,prefixLen) -> let b=if isProtocol prot  3u2  then 
if b.comms[196608u32] then 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[393216u32:=true]; lp= b.lp; med= b.med; } else 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[196608u32:=true]; lp= b.lp; med= b.med; } else 
None in 
(match b with 
 | None -> None
 | Some b -> if b.comms[262150u32] then 
None else 
Some {  aslen= b.aslen; bgpAd= b.bgpAd; comms= b.comms; lp= b.lp; med= b.med; }
)
)
 | 72n~62n -> (match d with 
 | (prefix,prefixLen) -> let b=if isProtocol prot  3u2  then 
if b.comms[196608u32] then 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[393216u32:=true]; lp= b.lp; med= b.med; } else 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[196608u32:=true]; lp= b.lp; med= b.med; } else 
None in 
(match b with 
 | None -> None
 | Some b -> if b.comms[262149u32] then 
None else 
Some {  aslen= b.aslen; bgpAd= b.bgpAd; comms= b.comms; lp= b.lp; med= b.med; }
)
)
 | 72n~9n -> (match d with 
 | (prefix,prefixLen) -> let b=if isProtocol prot  3u2  then 
if b.comms[196608u32] then 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[393216u32:=true]; lp= b.lp; med= b.med; } else 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[196608u32:=true]; lp= b.lp; med= b.med; } else 
None in 
(match b with 
 | None -> None
 | Some b -> if b.comms[262146u32] then 
None else 
Some {  aslen= b.aslen; bgpAd= b.bgpAd; comms= b.comms; lp= b.lp; med= b.med; }
)
)
 | 73n~75n -> (match d with 
 | (prefix,prefixLen) -> let b=if prefixLen = 24u6 && 1174418432u32 <=u32 prefix && prefix <u32 1174418688u32 then 
if b.comms[131076u32] then 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[327684u32:=true]; lp= b.lp; med= b.med; } else 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[131076u32:=true]; lp= b.lp; med= b.med; } else 
if isProtocol prot  3u2  then 
if b.comms[131076u32] then 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[327684u32:=true]; lp= b.lp; med= b.med; } else 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[131076u32:=true]; lp= b.lp; med= b.med; } else 
None in 
(match b with 
 | None -> None
 | Some b -> if b.comms[262148u32] then 
None else 
Some {  aslen= b.aslen; bgpAd= b.bgpAd; comms= b.comms; lp= b.lp; med= b.med; }
)
)
 | 73n~59n -> (match d with 
 | (prefix,prefixLen) -> let b=if prefixLen = 24u6 && 1174418432u32 <=u32 prefix && prefix <u32 1174418688u32 then 
if b.comms[131076u32] then 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[327684u32:=true]; lp= b.lp; med= b.med; } else 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[131076u32:=true]; lp= b.lp; med= b.med; } else 
if isProtocol prot  3u2  then 
if b.comms[131076u32] then 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[327684u32:=true]; lp= b.lp; med= b.med; } else 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[131076u32:=true]; lp= b.lp; med= b.med; } else 
None in 
(match b with 
 | None -> None
 | Some b -> if b.comms[262148u32] then 
None else 
Some {  aslen= b.aslen; bgpAd= b.bgpAd; comms= b.comms; lp= b.lp; med= b.med; }
)
)
 | 73n~65n -> (match d with 
 | (prefix,prefixLen) -> let b=if prefixLen = 24u6 && 1174418432u32 <=u32 prefix && prefix <u32 1174418688u32 then 
if b.comms[131076u32] then 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[327684u32:=true]; lp= b.lp; med= b.med; } else 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[131076u32:=true]; lp= b.lp; med= b.med; } else 
if isProtocol prot  3u2  then 
if b.comms[131076u32] then 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[327684u32:=true]; lp= b.lp; med= b.med; } else 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[131076u32:=true]; lp= b.lp; med= b.med; } else 
None in 
(match b with 
 | None -> None
 | Some b -> if b.comms[262148u32] then 
None else 
Some {  aslen= b.aslen; bgpAd= b.bgpAd; comms= b.comms; lp= b.lp; med= b.med; }
)
)
 | 73n~58n -> (match d with 
 | (prefix,prefixLen) -> let b=if prefixLen = 24u6 && 1174418432u32 <=u32 prefix && prefix <u32 1174418688u32 then 
if b.comms[131076u32] then 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[327684u32:=true]; lp= b.lp; med= b.med; } else 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[131076u32:=true]; lp= b.lp; med= b.med; } else 
if isProtocol prot  3u2  then 
if b.comms[131076u32] then 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[327684u32:=true]; lp= b.lp; med= b.med; } else 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[131076u32:=true]; lp= b.lp; med= b.med; } else 
None in 
(match b with 
 | None -> None
 | Some b -> if b.comms[262148u32] then 
None else 
Some {  aslen= b.aslen; bgpAd= b.bgpAd; comms= b.comms; lp= b.lp; med= b.med; }
)
)
 | 74n~75n -> (match d with 
 | (prefix,prefixLen) -> let b=if prefixLen = 24u6 && 1174418688u32 <=u32 prefix && prefix <u32 1174418944u32 then 
if b.comms[131076u32] then 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[327684u32:=true]; lp= b.lp; med= b.med; } else 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[131076u32:=true]; lp= b.lp; med= b.med; } else 
if isProtocol prot  3u2  then 
if b.comms[131076u32] then 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[327684u32:=true]; lp= b.lp; med= b.med; } else 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[131076u32:=true]; lp= b.lp; med= b.med; } else 
None in 
(match b with 
 | None -> None
 | Some b -> if b.comms[262148u32] then 
None else 
Some {  aslen= b.aslen; bgpAd= b.bgpAd; comms= b.comms; lp= b.lp; med= b.med; }
)
)
 | 74n~59n -> (match d with 
 | (prefix,prefixLen) -> let b=if prefixLen = 24u6 && 1174418688u32 <=u32 prefix && prefix <u32 1174418944u32 then 
if b.comms[131076u32] then 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[327684u32:=true]; lp= b.lp; med= b.med; } else 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[131076u32:=true]; lp= b.lp; med= b.med; } else 
if isProtocol prot  3u2  then 
if b.comms[131076u32] then 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[327684u32:=true]; lp= b.lp; med= b.med; } else 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[131076u32:=true]; lp= b.lp; med= b.med; } else 
None in 
(match b with 
 | None -> None
 | Some b -> if b.comms[262148u32] then 
None else 
Some {  aslen= b.aslen; bgpAd= b.bgpAd; comms= b.comms; lp= b.lp; med= b.med; }
)
)
 | 74n~58n -> (match d with 
 | (prefix,prefixLen) -> let b=if prefixLen = 24u6 && 1174418688u32 <=u32 prefix && prefix <u32 1174418944u32 then 
if b.comms[131076u32] then 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[327684u32:=true]; lp= b.lp; med= b.med; } else 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[131076u32:=true]; lp= b.lp; med= b.med; } else 
if isProtocol prot  3u2  then 
if b.comms[131076u32] then 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[327684u32:=true]; lp= b.lp; med= b.med; } else 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[131076u32:=true]; lp= b.lp; med= b.med; } else 
None in 
(match b with 
 | None -> None
 | Some b -> if b.comms[262148u32] then 
None else 
Some {  aslen= b.aslen; bgpAd= b.bgpAd; comms= b.comms; lp= b.lp; med= b.med; }
)
)
 | 74n~65n -> (match d with 
 | (prefix,prefixLen) -> let b=if prefixLen = 24u6 && 1174418688u32 <=u32 prefix && prefix <u32 1174418944u32 then 
if b.comms[131076u32] then 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[327684u32:=true]; lp= b.lp; med= b.med; } else 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[131076u32:=true]; lp= b.lp; med= b.med; } else 
if isProtocol prot  3u2  then 
if b.comms[131076u32] then 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[327684u32:=true]; lp= b.lp; med= b.med; } else 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[131076u32:=true]; lp= b.lp; med= b.med; } else 
None in 
(match b with 
 | None -> None
 | Some b -> if b.comms[262148u32] then 
None else 
Some {  aslen= b.aslen; bgpAd= b.bgpAd; comms= b.comms; lp= b.lp; med= b.med; }
)
)
 | 75n~76n -> (match d with 
 | (prefix,prefixLen) -> let b=if isProtocol prot  3u2  then 
if b.comms[65540u32] then 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[262148u32:=true]; lp= b.lp; med= b.med; } else 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[65540u32:=true]; lp= b.lp; med= b.med; } else 
None in 
(match b with 
 | None -> None
 | Some b -> if b.comms[327684u32] then 
None else 
Some {  aslen= b.aslen; bgpAd= b.bgpAd; comms= b.comms; lp= b.lp; med= b.med; }
)
)
 | 75n~46n -> (match d with 
 | (prefix,prefixLen) -> let b=if isProtocol prot  3u2  then 
if b.comms[65540u32] then 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[262148u32:=true]; lp= b.lp; med= b.med; } else 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[65540u32:=true]; lp= b.lp; med= b.med; } else 
None in 
(match b with 
 | None -> None
 | Some b -> if b.comms[393216u32] then 
None else 
Some {  aslen= b.aslen; bgpAd= b.bgpAd; comms= b.comms; lp= b.lp; med= b.med; }
)
)
 | 75n~64n -> (match d with 
 | (prefix,prefixLen) -> let b=if isProtocol prot  3u2  then 
if b.comms[65540u32] then 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[262148u32:=true]; lp= b.lp; med= b.med; } else 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[65540u32:=true]; lp= b.lp; med= b.med; } else 
None in 
(match b with 
 | None -> None
 | Some b -> if b.comms[327684u32] then 
None else 
Some {  aslen= b.aslen; bgpAd= b.bgpAd; comms= b.comms; lp= b.lp; med= b.med; }
)
)
 | 75n~40n -> (match d with 
 | (prefix,prefixLen) -> let b=if isProtocol prot  3u2  then 
if b.comms[65540u32] then 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[262148u32:=true]; lp= b.lp; med= b.med; } else 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[65540u32:=true]; lp= b.lp; med= b.med; } else 
None in 
(match b with 
 | None -> None
 | Some b -> if b.comms[393216u32] then 
None else 
Some {  aslen= b.aslen; bgpAd= b.bgpAd; comms= b.comms; lp= b.lp; med= b.med; }
)
)
 | 75n~41n -> (match d with 
 | (prefix,prefixLen) -> let b=if isProtocol prot  3u2  then 
if b.comms[65540u32] then 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[262148u32:=true]; lp= b.lp; med= b.med; } else 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[65540u32:=true]; lp= b.lp; med= b.med; } else 
None in 
(match b with 
 | None -> None
 | Some b -> if b.comms[393216u32] then 
None else 
Some {  aslen= b.aslen; bgpAd= b.bgpAd; comms= b.comms; lp= b.lp; med= b.med; }
)
)
 | 75n~73n -> (match d with 
 | (prefix,prefixLen) -> let b=if isProtocol prot  3u2  then 
if b.comms[65540u32] then 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[262148u32:=true]; lp= b.lp; med= b.med; } else 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[65540u32:=true]; lp= b.lp; med= b.med; } else 
None in 
(match b with 
 | None -> None
 | Some b -> if b.comms[327684u32] then 
None else 
Some {  aslen= b.aslen; bgpAd= b.bgpAd; comms= b.comms; lp= b.lp; med= b.med; }
)
)
 | 75n~74n -> (match d with 
 | (prefix,prefixLen) -> let b=if isProtocol prot  3u2  then 
if b.comms[65540u32] then 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[262148u32:=true]; lp= b.lp; med= b.med; } else 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[65540u32:=true]; lp= b.lp; med= b.med; } else 
None in 
(match b with 
 | None -> None
 | Some b -> if b.comms[327684u32] then 
None else 
Some {  aslen= b.aslen; bgpAd= b.bgpAd; comms= b.comms; lp= b.lp; med= b.med; }
)
)
 | 75n~43n -> (match d with 
 | (prefix,prefixLen) -> let b=if isProtocol prot  3u2  then 
if b.comms[65540u32] then 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[262148u32:=true]; lp= b.lp; med= b.med; } else 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[65540u32:=true]; lp= b.lp; med= b.med; } else 
None in 
(match b with 
 | None -> None
 | Some b -> if b.comms[393216u32] then 
None else 
Some {  aslen= b.aslen; bgpAd= b.bgpAd; comms= b.comms; lp= b.lp; med= b.med; }
)
)
 | 76n~65n -> (match d with 
 | (prefix,prefixLen) -> let b=if prefixLen = 24u6 && 1174418944u32 <=u32 prefix && prefix <u32 1174419200u32 then 
if b.comms[131076u32] then 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[327684u32:=true]; lp= b.lp; med= b.med; } else 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[131076u32:=true]; lp= b.lp; med= b.med; } else 
if isProtocol prot  3u2  then 
if b.comms[131076u32] then 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[327684u32:=true]; lp= b.lp; med= b.med; } else 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[131076u32:=true]; lp= b.lp; med= b.med; } else 
None in 
(match b with 
 | None -> None
 | Some b -> if b.comms[262148u32] then 
None else 
Some {  aslen= b.aslen; bgpAd= b.bgpAd; comms= b.comms; lp= b.lp; med= b.med; }
)
)
 | 76n~75n -> (match d with 
 | (prefix,prefixLen) -> let b=if prefixLen = 24u6 && 1174418944u32 <=u32 prefix && prefix <u32 1174419200u32 then 
if b.comms[131076u32] then 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[327684u32:=true]; lp= b.lp; med= b.med; } else 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[131076u32:=true]; lp= b.lp; med= b.med; } else 
if isProtocol prot  3u2  then 
if b.comms[131076u32] then 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[327684u32:=true]; lp= b.lp; med= b.med; } else 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[131076u32:=true]; lp= b.lp; med= b.med; } else 
None in 
(match b with 
 | None -> None
 | Some b -> if b.comms[262148u32] then 
None else 
Some {  aslen= b.aslen; bgpAd= b.bgpAd; comms= b.comms; lp= b.lp; med= b.med; }
)
)
 | 76n~59n -> (match d with 
 | (prefix,prefixLen) -> let b=if prefixLen = 24u6 && 1174418944u32 <=u32 prefix && prefix <u32 1174419200u32 then 
if b.comms[131076u32] then 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[327684u32:=true]; lp= b.lp; med= b.med; } else 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[131076u32:=true]; lp= b.lp; med= b.med; } else 
if isProtocol prot  3u2  then 
if b.comms[131076u32] then 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[327684u32:=true]; lp= b.lp; med= b.med; } else 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[131076u32:=true]; lp= b.lp; med= b.med; } else 
None in 
(match b with 
 | None -> None
 | Some b -> if b.comms[262148u32] then 
None else 
Some {  aslen= b.aslen; bgpAd= b.bgpAd; comms= b.comms; lp= b.lp; med= b.med; }
)
)
 | 76n~58n -> (match d with 
 | (prefix,prefixLen) -> let b=if prefixLen = 24u6 && 1174418944u32 <=u32 prefix && prefix <u32 1174419200u32 then 
if b.comms[131076u32] then 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[327684u32:=true]; lp= b.lp; med= b.med; } else 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[131076u32:=true]; lp= b.lp; med= b.med; } else 
if isProtocol prot  3u2  then 
if b.comms[131076u32] then 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[327684u32:=true]; lp= b.lp; med= b.med; } else 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[131076u32:=true]; lp= b.lp; med= b.med; } else 
None in 
(match b with 
 | None -> None
 | Some b -> if b.comms[262148u32] then 
None else 
Some {  aslen= b.aslen; bgpAd= b.bgpAd; comms= b.comms; lp= b.lp; med= b.med; }
)
)
 | 77n~68n -> (match d with 
 | (prefix,prefixLen) -> let b=if isProtocol prot  3u2  then 
if b.comms[65539u32] then 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[262147u32:=true]; lp= b.lp; med= b.med; } else 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[65539u32:=true]; lp= b.lp; med= b.med; } else 
None in 
(match b with 
 | None -> None
 | Some b -> if b.comms[393216u32] then 
None else 
Some {  aslen= b.aslen; bgpAd= b.bgpAd; comms= b.comms; lp= b.lp; med= b.med; }
)
)
 | 77n~48n -> (match d with 
 | (prefix,prefixLen) -> let b=if isProtocol prot  3u2  then 
if b.comms[65539u32] then 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[262147u32:=true]; lp= b.lp; med= b.med; } else 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[65539u32:=true]; lp= b.lp; med= b.med; } else 
None in 
(match b with 
 | None -> None
 | Some b -> if b.comms[327683u32] then 
None else 
Some {  aslen= b.aslen; bgpAd= b.bgpAd; comms= b.comms; lp= b.lp; med= b.med; }
)
)
 | 77n~67n -> (match d with 
 | (prefix,prefixLen) -> let b=if isProtocol prot  3u2  then 
if b.comms[65539u32] then 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[262147u32:=true]; lp= b.lp; med= b.med; } else 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[65539u32:=true]; lp= b.lp; med= b.med; } else 
None in 
(match b with 
 | None -> None
 | Some b -> if b.comms[393216u32] then 
None else 
Some {  aslen= b.aslen; bgpAd= b.bgpAd; comms= b.comms; lp= b.lp; med= b.med; }
)
)
 | 77n~57n -> (match d with 
 | (prefix,prefixLen) -> let b=if isProtocol prot  3u2  then 
if b.comms[65539u32] then 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[262147u32:=true]; lp= b.lp; med= b.med; } else 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[65539u32:=true]; lp= b.lp; med= b.med; } else 
None in 
(match b with 
 | None -> None
 | Some b -> if b.comms[393216u32] then 
None else 
Some {  aslen= b.aslen; bgpAd= b.bgpAd; comms= b.comms; lp= b.lp; med= b.med; }
)
)
 | 77n~45n -> (match d with 
 | (prefix,prefixLen) -> let b=if isProtocol prot  3u2  then 
if b.comms[65539u32] then 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[262147u32:=true]; lp= b.lp; med= b.med; } else 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[65539u32:=true]; lp= b.lp; med= b.med; } else 
None in 
(match b with 
 | None -> None
 | Some b -> if b.comms[327683u32] then 
None else 
Some {  aslen= b.aslen; bgpAd= b.bgpAd; comms= b.comms; lp= b.lp; med= b.med; }
)
)
 | 77n~51n -> (match d with 
 | (prefix,prefixLen) -> let b=if isProtocol prot  3u2  then 
if b.comms[65539u32] then 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[262147u32:=true]; lp= b.lp; med= b.med; } else 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[65539u32:=true]; lp= b.lp; med= b.med; } else 
None in 
(match b with 
 | None -> None
 | Some b -> if b.comms[327683u32] then 
None else 
Some {  aslen= b.aslen; bgpAd= b.bgpAd; comms= b.comms; lp= b.lp; med= b.med; }
)
)
 | 77n~56n -> (match d with 
 | (prefix,prefixLen) -> let b=if isProtocol prot  3u2  then 
if b.comms[65539u32] then 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[262147u32:=true]; lp= b.lp; med= b.med; } else 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[65539u32:=true]; lp= b.lp; med= b.med; } else 
None in 
(match b with 
 | None -> None
 | Some b -> if b.comms[393216u32] then 
None else 
Some {  aslen= b.aslen; bgpAd= b.bgpAd; comms= b.comms; lp= b.lp; med= b.med; }
)
)
 | 77n~42n -> (match d with 
 | (prefix,prefixLen) -> let b=if isProtocol prot  3u2  then 
if b.comms[65539u32] then 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[262147u32:=true]; lp= b.lp; med= b.med; } else 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[65539u32:=true]; lp= b.lp; med= b.med; } else 
None in 
(match b with 
 | None -> None
 | Some b -> if b.comms[327683u32] then 
None else 
Some {  aslen= b.aslen; bgpAd= b.bgpAd; comms= b.comms; lp= b.lp; med= b.med; }
)
)
 | 78n~48n -> (match d with 
 | (prefix,prefixLen) -> let b=if isProtocol prot  3u2  then 
if b.comms[65539u32] then 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[262147u32:=true]; lp= b.lp; med= b.med; } else 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[65539u32:=true]; lp= b.lp; med= b.med; } else 
None in 
(match b with 
 | None -> None
 | Some b -> if b.comms[327683u32] then 
None else 
Some {  aslen= b.aslen; bgpAd= b.bgpAd; comms= b.comms; lp= b.lp; med= b.med; }
)
)
 | 78n~45n -> (match d with 
 | (prefix,prefixLen) -> let b=if isProtocol prot  3u2  then 
if b.comms[65539u32] then 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[262147u32:=true]; lp= b.lp; med= b.med; } else 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[65539u32:=true]; lp= b.lp; med= b.med; } else 
None in 
(match b with 
 | None -> None
 | Some b -> if b.comms[327683u32] then 
None else 
Some {  aslen= b.aslen; bgpAd= b.bgpAd; comms= b.comms; lp= b.lp; med= b.med; }
)
)
 | 78n~54n -> (match d with 
 | (prefix,prefixLen) -> let b=if isProtocol prot  3u2  then 
if b.comms[65539u32] then 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[262147u32:=true]; lp= b.lp; med= b.med; } else 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[65539u32:=true]; lp= b.lp; med= b.med; } else 
None in 
(match b with 
 | None -> None
 | Some b -> if b.comms[393216u32] then 
None else 
Some {  aslen= b.aslen; bgpAd= b.bgpAd; comms= b.comms; lp= b.lp; med= b.med; }
)
)
 | 78n~52n -> (match d with 
 | (prefix,prefixLen) -> let b=if isProtocol prot  3u2  then 
if b.comms[65539u32] then 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[262147u32:=true]; lp= b.lp; med= b.med; } else 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[65539u32:=true]; lp= b.lp; med= b.med; } else 
None in 
(match b with 
 | None -> None
 | Some b -> if b.comms[393216u32] then 
None else 
Some {  aslen= b.aslen; bgpAd= b.bgpAd; comms= b.comms; lp= b.lp; med= b.med; }
)
)
 | 78n~49n -> (match d with 
 | (prefix,prefixLen) -> let b=if isProtocol prot  3u2  then 
if b.comms[65539u32] then 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[262147u32:=true]; lp= b.lp; med= b.med; } else 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[65539u32:=true]; lp= b.lp; med= b.med; } else 
None in 
(match b with 
 | None -> None
 | Some b -> if b.comms[393216u32] then 
None else 
Some {  aslen= b.aslen; bgpAd= b.bgpAd; comms= b.comms; lp= b.lp; med= b.med; }
)
)
 | 78n~55n -> (match d with 
 | (prefix,prefixLen) -> let b=if isProtocol prot  3u2  then 
if b.comms[65539u32] then 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[262147u32:=true]; lp= b.lp; med= b.med; } else 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[65539u32:=true]; lp= b.lp; med= b.med; } else 
None in 
(match b with 
 | None -> None
 | Some b -> if b.comms[393216u32] then 
None else 
Some {  aslen= b.aslen; bgpAd= b.bgpAd; comms= b.comms; lp= b.lp; med= b.med; }
)
)
 | 78n~42n -> (match d with 
 | (prefix,prefixLen) -> let b=if isProtocol prot  3u2  then 
if b.comms[65539u32] then 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[262147u32:=true]; lp= b.lp; med= b.med; } else 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[65539u32:=true]; lp= b.lp; med= b.med; } else 
None in 
(match b with 
 | None -> None
 | Some b -> if b.comms[327683u32] then 
None else 
Some {  aslen= b.aslen; bgpAd= b.bgpAd; comms= b.comms; lp= b.lp; med= b.med; }
)
)
 | 78n~51n -> (match d with 
 | (prefix,prefixLen) -> let b=if isProtocol prot  3u2  then 
if b.comms[65539u32] then 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[262147u32:=true]; lp= b.lp; med= b.med; } else 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[65539u32:=true]; lp= b.lp; med= b.med; } else 
None in 
(match b with 
 | None -> None
 | Some b -> if b.comms[327683u32] then 
None else 
Some {  aslen= b.aslen; bgpAd= b.bgpAd; comms= b.comms; lp= b.lp; med= b.med; }
)
)
 | 79n~66n -> (match d with 
 | (prefix,prefixLen) -> let b=if isProtocol prot  3u2  then 
if b.comms[65539u32] then 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[262147u32:=true]; lp= b.lp; med= b.med; } else 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[65539u32:=true]; lp= b.lp; med= b.med; } else 
None in 
(match b with 
 | None -> None
 | Some b -> if b.comms[393216u32] then 
None else 
Some {  aslen= b.aslen; bgpAd= b.bgpAd; comms= b.comms; lp= b.lp; med= b.med; }
)
)
 | 79n~42n -> (match d with 
 | (prefix,prefixLen) -> let b=if isProtocol prot  3u2  then 
if b.comms[65539u32] then 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[262147u32:=true]; lp= b.lp; med= b.med; } else 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[65539u32:=true]; lp= b.lp; med= b.med; } else 
None in 
(match b with 
 | None -> None
 | Some b -> if b.comms[327683u32] then 
None else 
Some {  aslen= b.aslen; bgpAd= b.bgpAd; comms= b.comms; lp= b.lp; med= b.med; }
)
)
 | 79n~51n -> (match d with 
 | (prefix,prefixLen) -> let b=if isProtocol prot  3u2  then 
if b.comms[65539u32] then 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[262147u32:=true]; lp= b.lp; med= b.med; } else 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[65539u32:=true]; lp= b.lp; med= b.med; } else 
None in 
(match b with 
 | None -> None
 | Some b -> if b.comms[327683u32] then 
None else 
Some {  aslen= b.aslen; bgpAd= b.bgpAd; comms= b.comms; lp= b.lp; med= b.med; }
)
)
 | 79n~70n -> (match d with 
 | (prefix,prefixLen) -> let b=if isProtocol prot  3u2  then 
if b.comms[65539u32] then 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[262147u32:=true]; lp= b.lp; med= b.med; } else 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[65539u32:=true]; lp= b.lp; med= b.med; } else 
None in 
(match b with 
 | None -> None
 | Some b -> if b.comms[393216u32] then 
None else 
Some {  aslen= b.aslen; bgpAd= b.bgpAd; comms= b.comms; lp= b.lp; med= b.med; }
)
)
 | 79n~45n -> (match d with 
 | (prefix,prefixLen) -> let b=if isProtocol prot  3u2  then 
if b.comms[65539u32] then 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[262147u32:=true]; lp= b.lp; med= b.med; } else 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[65539u32:=true]; lp= b.lp; med= b.med; } else 
None in 
(match b with 
 | None -> None
 | Some b -> if b.comms[327683u32] then 
None else 
Some {  aslen= b.aslen; bgpAd= b.bgpAd; comms= b.comms; lp= b.lp; med= b.med; }
)
)
 | 79n~72n -> (match d with 
 | (prefix,prefixLen) -> let b=if isProtocol prot  3u2  then 
if b.comms[65539u32] then 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[262147u32:=true]; lp= b.lp; med= b.med; } else 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[65539u32:=true]; lp= b.lp; med= b.med; } else 
None in 
(match b with 
 | None -> None
 | Some b -> if b.comms[393216u32] then 
None else 
Some {  aslen= b.aslen; bgpAd= b.bgpAd; comms= b.comms; lp= b.lp; med= b.med; }
)
)
 | 79n~71n -> (match d with 
 | (prefix,prefixLen) -> let b=if isProtocol prot  3u2  then 
if b.comms[65539u32] then 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[262147u32:=true]; lp= b.lp; med= b.med; } else 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[65539u32:=true]; lp= b.lp; med= b.med; } else 
None in 
(match b with 
 | None -> None
 | Some b -> if b.comms[393216u32] then 
None else 
Some {  aslen= b.aslen; bgpAd= b.bgpAd; comms= b.comms; lp= b.lp; med= b.med; }
)
)
 | 79n~48n -> (match d with 
 | (prefix,prefixLen) -> let b=if isProtocol prot  3u2  then 
if b.comms[65539u32] then 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[262147u32:=true]; lp= b.lp; med= b.med; } else 
Some {  aslen= b.aslen +u32 1u32; bgpAd= b.bgpAd; comms= b.comms[65539u32:=true]; lp= b.lp; med= b.med; } else 
None in 
(match b with 
 | None -> None
 | Some b -> if b.comms[327683u32] then 
None else 
Some {  aslen= b.aslen; bgpAd= b.bgpAd; comms= b.comms; lp= b.lp; med= b.med; }
)
)
)
) ) )
let transferOspf = (fun edge -> (fun o -> (match o with 
 | None -> None
 | Some o -> (match edge with 
 | _ -> None
)
) ) )
let init = (fun node -> (match node with 
 | 0n -> if d = (167778304u32,31u6) || d = (167777280u32,31u6) || d = (1174412288u32,32u6) || d = (167779328u32,31u6) || d = (1174412288u32,31u6) || d = (167776256u32,31u6) || d = (1174412290u32,31u6) then 
let c=Some 0u8 in 
let s=None in 
let o=None in 
let b=None in 
let fib=best c  s  o  b  in 
{  bgp= b; connected= c; ospf= o; selected= fib; static= s; } else 
if d = (1174412288u32,24u6) then 
let c=None in 
let s=Some 1u8 in 
let o=None in 
let b=Some {  aslen= 0u32; bgpAd= 20u8; comms= createDict false; lp= 100u32; med= 80u32; } in 
let fib=best c  s  o  b  in 
{  bgp= b; connected= c; ospf= o; selected= fib; static= s; } else 
{  bgp= None; connected= None; ospf= None; selected= None; static= None; }
 | 1n -> if d = (167777536u32,31u6) || d = (167776512u32,31u6) || d = (1174412544u32,32u6) || d = (167779584u32,31u6) || d = (167778560u32,31u6) || d = (1174412544u32,31u6) || d = (1174412546u32,31u6) then 
let c=Some 0u8 in 
let s=None in 
let o=None in 
let b=None in 
let fib=best c  s  o  b  in 
{  bgp= b; connected= c; ospf= o; selected= fib; static= s; } else 
if d = (1174412544u32,24u6) then 
let c=None in 
let s=Some 1u8 in 
let o=None in 
let b=Some {  aslen= 0u32; bgpAd= 20u8; comms= createDict false; lp= 100u32; med= 80u32; } in 
let fib=best c  s  o  b  in 
{  bgp= b; connected= c; ospf= o; selected= fib; static= s; } else 
{  bgp= None; connected= None; ospf= None; selected= None; static= None; }
 | 2n -> if d = (1174410752u32,31u6) || d = (1174410752u32,32u6) || d = (167773696u32,31u6) || d = (167772672u32,31u6) || d = (1174410754u32,31u6) || d = (167775744u32,31u6) || d = (167774720u32,31u6) then 
let c=Some 0u8 in 
let s=None in 
let o=None in 
let b=None in 
let fib=best c  s  o  b  in 
{  bgp= b; connected= c; ospf= o; selected= fib; static= s; } else 
if d = (1174410752u32,24u6) then 
let c=None in 
let s=Some 1u8 in 
let o=None in 
let b=Some {  aslen= 0u32; bgpAd= 20u8; comms= createDict false; lp= 100u32; med= 80u32; } in 
let fib=best c  s  o  b  in 
{  bgp= b; connected= c; ospf= o; selected= fib; static= s; } else 
{  bgp= None; connected= None; ospf= None; selected= None; static= None; }
 | 3n -> if d = (1174411008u32,31u6) || d = (1174411008u32,32u6) || d = (167773952u32,31u6) || d = (167772928u32,31u6) || d = (1174411010u32,31u6) || d = (167776000u32,31u6) || d = (167774976u32,31u6) then 
let c=Some 0u8 in 
let s=None in 
let o=None in 
let b=None in 
let fib=best c  s  o  b  in 
{  bgp= b; connected= c; ospf= o; selected= fib; static= s; } else 
if d = (1174411008u32,24u6) then 
let c=None in 
let s=Some 1u8 in 
let o=None in 
let b=Some {  aslen= 0u32; bgpAd= 20u8; comms= createDict false; lp= 100u32; med= 80u32; } in 
let fib=best c  s  o  b  in 
{  bgp= b; connected= c; ospf= o; selected= fib; static= s; } else 
{  bgp= None; connected= None; ospf= None; selected= None; static= None; }
 | 4n -> if d = (167798784u32,31u6) || d = (167797760u32,31u6) || d = (167799808u32,31u6) || d = (1174422530u32,31u6) || d = (167796736u32,31u6) || d = (1174422528u32,31u6) || d = (1174422528u32,32u6) then 
let c=Some 0u8 in 
let s=None in 
let o=None in 
let b=None in 
let fib=best c  s  o  b  in 
{  bgp= b; connected= c; ospf= o; selected= fib; static= s; } else 
if d = (1174422528u32,24u6) then 
let c=None in 
let s=Some 1u8 in 
let o=None in 
let b=Some {  aslen= 0u32; bgpAd= 20u8; comms= createDict false; lp= 100u32; med= 80u32; } in 
let fib=best c  s  o  b  in 
{  bgp= b; connected= c; ospf= o; selected= fib; static= s; } else 
{  bgp= None; connected= None; ospf= None; selected= None; static= None; }
 | 5n -> if d = (167799040u32,31u6) || d = (167798016u32,31u6) || d = (167800064u32,31u6) || d = (1174422786u32,31u6) || d = (167796992u32,31u6) || d = (1174422784u32,31u6) || d = (1174422784u32,32u6) then 
let c=Some 0u8 in 
let s=None in 
let o=None in 
let b=None in 
let fib=best c  s  o  b  in 
{  bgp= b; connected= c; ospf= o; selected= fib; static= s; } else 
if d = (1174422784u32,24u6) then 
let c=None in 
let s=Some 1u8 in 
let o=None in 
let b=Some {  aslen= 0u32; bgpAd= 20u8; comms= createDict false; lp= 100u32; med= 80u32; } in 
let fib=best c  s  o  b  in 
{  bgp= b; connected= c; ospf= o; selected= fib; static= s; } else 
{  bgp= None; connected= None; ospf= None; selected= None; static= None; }
 | 6n -> if d = (167802624u32,31u6) || d = (167802368u32,31u6) || d = (167802112u32,31u6) || d = (167801856u32,31u6) || d = (1174423808u32,32u6) || d = (167819008u32,31u6) || d = (167821056u32,31u6) || d = (167814912u32,31u6) || d = (167816960u32,31u6) then 
let c=Some 0u8 in 
let s=None in 
let o=None in 
let b=None in 
let fib=best c  s  o  b  in 
{  bgp= b; connected= c; ospf= o; selected= fib; static= s; } else 
{  bgp= None; connected= None; ospf= None; selected= None; static= None; }
 | 7n -> if d = (167801600u32,31u6) || d = (167801344u32,31u6) || d = (167801088u32,31u6) || d = (167800832u32,31u6) || d = (1174423552u32,32u6) || d = (167810816u32,31u6) || d = (167812864u32,31u6) || d = (167806720u32,31u6) || d = (167808768u32,31u6) then 
let c=Some 0u8 in 
let s=None in 
let o=None in 
let b=None in 
let fib=best c  s  o  b  in 
{  bgp= b; connected= c; ospf= o; selected= fib; static= s; } else 
{  bgp= None; connected= None; ospf= None; selected= None; static= None; }
 | 8n -> if d = (167795200u32,31u6) || d = (167794176u32,31u6) || d = (167796224u32,31u6) || d = (167793152u32,31u6) || d = (1174420992u32,32u6) || d = (1174420992u32,31u6) || d = (1174420994u32,31u6) then 
let c=Some 0u8 in 
let s=None in 
let o=None in 
let b=None in 
let fib=best c  s  o  b  in 
{  bgp= b; connected= c; ospf= o; selected= fib; static= s; } else 
if d = (1174420992u32,24u6) then 
let c=None in 
let s=Some 1u8 in 
let o=None in 
let b=Some {  aslen= 0u32; bgpAd= 20u8; comms= createDict false; lp= 100u32; med= 80u32; } in 
let fib=best c  s  o  b  in 
{  bgp= b; connected= c; ospf= o; selected= fib; static= s; } else 
{  bgp= None; connected= None; ospf= None; selected= None; static= None; }
 | 9n -> if d = (167836160u32,31u6) || d = (167832064u32,31u6) || d = (167834112u32,31u6) || d = (167830016u32,31u6) || d = (167784192u32,31u6) || d = (167783936u32,31u6) || d = (167783680u32,31u6) || d = (167783424u32,31u6) || d = (1174414080u32,32u6) then 
let c=Some 0u8 in 
let s=None in 
let o=None in 
let b=None in 
let fib=best c  s  o  b  in 
{  bgp= b; connected= c; ospf= o; selected= fib; static= s; } else 
{  bgp= None; connected= None; ospf= None; selected= None; static= None; }
 | 10n -> if d = (167794432u32,31u6) || d = (167793408u32,31u6) || d = (167796480u32,31u6) || d = (167795456u32,31u6) || d = (1174421248u32,32u6) || d = (1174421248u32,31u6) || d = (1174421250u32,31u6) then 
let c=Some 0u8 in 
let s=None in 
let o=None in 
let b=None in 
let fib=best c  s  o  b  in 
{  bgp= b; connected= c; ospf= o; selected= fib; static= s; } else 
if d = (1174421248u32,24u6) then 
let c=None in 
let s=Some 1u8 in 
let o=None in 
let b=Some {  aslen= 0u32; bgpAd= 20u8; comms= createDict false; lp= 100u32; med= 80u32; } in 
let fib=best c  s  o  b  in 
{  bgp= b; connected= c; ospf= o; selected= fib; static= s; } else 
{  bgp= None; connected= None; ospf= None; selected= None; static= None; }
 | 11n -> if d = (167827968u32,31u6) || d = (167823872u32,31u6) || d = (167825920u32,31u6) || d = (167821824u32,31u6) || d = (167782656u32,31u6) || d = (167782400u32,31u6) || d = (167783168u32,31u6) || d = (167782912u32,31u6) || d = (1174413824u32,32u6) then 
let c=Some 0u8 in 
let s=None in 
let o=None in 
let b=None in 
let fib=best c  s  o  b  in 
{  bgp= b; connected= c; ospf= o; selected= fib; static= s; } else 
{  bgp= None; connected= None; ospf= None; selected= None; static= None; }
 | 12n -> if d = (1174410240u32,31u6) || d = (1174410240u32,32u6) || d = (167774208u32,31u6) || d = (167773184u32,31u6) || d = (167772160u32,31u6) || d = (1174410242u32,31u6) || d = (167775232u32,31u6) then 
let c=Some 0u8 in 
let s=None in 
let o=None in 
let b=None in 
let fib=best c  s  o  b  in 
{  bgp= b; connected= c; ospf= o; selected= fib; static= s; } else 
if d = (1174410240u32,24u6) then 
let c=None in 
let s=Some 1u8 in 
let o=None in 
let b=Some {  aslen= 0u32; bgpAd= 20u8; comms= createDict false; lp= 100u32; med= 80u32; } in 
let fib=best c  s  o  b  in 
{  bgp= b; connected= c; ospf= o; selected= fib; static= s; } else 
{  bgp= None; connected= None; ospf= None; selected= None; static= None; }
 | 13n -> if d = (1174410496u32,31u6) || d = (1174410496u32,32u6) || d = (167773440u32,31u6) || d = (167772416u32,31u6) || d = (1174410498u32,31u6) || d = (167775488u32,31u6) || d = (167774464u32,31u6) then 
let c=Some 0u8 in 
let s=None in 
let o=None in 
let b=None in 
let fib=best c  s  o  b  in 
{  bgp= b; connected= c; ospf= o; selected= fib; static= s; } else 
if d = (1174410496u32,24u6) then 
let c=None in 
let s=Some 1u8 in 
let o=None in 
let b=Some {  aslen= 0u32; bgpAd= 20u8; comms= createDict false; lp= 100u32; med= 80u32; } in 
let fib=best c  s  o  b  in 
{  bgp= b; connected= c; ospf= o; selected= fib; static= s; } else 
{  bgp= None; connected= None; ospf= None; selected= None; static= None; }
 | 14n -> if d = (167837440u32,31u6) || d = (167804672u32,31u6) || d = (167804160u32,31u6) || d = (167804416u32,31u6) || d = (167803904u32,31u6) || d = (167833344u32,31u6) || d = (167835392u32,31u6) || d = (167831296u32,31u6) || d = (1174424320u32,32u6) then 
let c=Some 0u8 in 
let s=None in 
let o=None in 
let b=None in 
let fib=best c  s  o  b  in 
{  bgp= b; connected= c; ospf= o; selected= fib; static= s; } else 
{  bgp= None; connected= None; ospf= None; selected= None; static= None; }
 | 15n -> if d = (167803648u32,31u6) || d = (167803392u32,31u6) || d = (167803136u32,31u6) || d = (167802880u32,31u6) || d = (167827200u32,31u6) || d = (167829248u32,31u6) || d = (167823104u32,31u6) || d = (167825152u32,31u6) || d = (1174424064u32,32u6) then 
let c=Some 0u8 in 
let s=None in 
let o=None in 
let b=None in 
let fib=best c  s  o  b  in 
{  bgp= b; connected= c; ospf= o; selected= fib; static= s; } else 
{  bgp= None; connected= None; ospf= None; selected= None; static= None; }
 | 16n -> if d = (167794688u32,31u6) || d = (167793664u32,31u6) || d = (167795712u32,31u6) || d = (167792640u32,31u6) || d = (1174420480u32,32u6) || d = (1174420480u32,31u6) || d = (1174420482u32,31u6) then 
let c=Some 0u8 in 
let s=None in 
let o=None in 
let b=None in 
let fib=best c  s  o  b  in 
{  bgp= b; connected= c; ospf= o; selected= fib; static= s; } else 
if d = (1174420480u32,24u6) then 
let c=None in 
let s=Some 1u8 in 
let o=None in 
let b=Some {  aslen= 0u32; bgpAd= 20u8; comms= createDict false; lp= 100u32; med= 80u32; } in 
let fib=best c  s  o  b  in 
{  bgp= b; connected= c; ospf= o; selected= fib; static= s; } else 
{  bgp= None; connected= None; ospf= None; selected= None; static= None; }
 | 17n -> if d = (167819776u32,31u6) || d = (167781632u32,31u6) || d = (167781376u32,31u6) || d = (167782144u32,31u6) || d = (167781888u32,31u6) || d = (167815680u32,31u6) || d = (167817728u32,31u6) || d = (1174413568u32,32u6) || d = (167813632u32,31u6) then 
let c=Some 0u8 in 
let s=None in 
let o=None in 
let b=None in 
let fib=best c  s  o  b  in 
{  bgp= b; connected= c; ospf= o; selected= fib; static= s; } else 
{  bgp= None; connected= None; ospf= None; selected= None; static= None; }
 | 18n -> if d = (167794944u32,31u6) || d = (167793920u32,31u6) || d = (167795968u32,31u6) || d = (167792896u32,31u6) || d = (1174420736u32,32u6) || d = (1174420736u32,31u6) || d = (1174420738u32,31u6) then 
let c=Some 0u8 in 
let s=None in 
let o=None in 
let b=None in 
let fib=best c  s  o  b  in 
{  bgp= b; connected= c; ospf= o; selected= fib; static= s; } else 
if d = (1174420736u32,24u6) then 
let c=None in 
let s=Some 1u8 in 
let o=None in 
let b=Some {  aslen= 0u32; bgpAd= 20u8; comms= createDict false; lp= 100u32; med= 80u32; } in 
let fib=best c  s  o  b  in 
{  bgp= b; connected= c; ospf= o; selected= fib; static= s; } else 
{  bgp= None; connected= None; ospf= None; selected= None; static= None; }
 | 19n -> if d = (167805440u32,31u6) || d = (167781120u32,31u6) || d = (167780864u32,31u6) || d = (167811584u32,31u6) || d = (1174413312u32,32u6) || d = (167780608u32,31u6) || d = (167780352u32,31u6) || d = (167807488u32,31u6) || d = (167809536u32,31u6) then 
let c=Some 0u8 in 
let s=None in 
let o=None in 
let b=None in 
let fib=best c  s  o  b  in 
{  bgp= b; connected= c; ospf= o; selected= fib; static= s; } else 
{  bgp= None; connected= None; ospf= None; selected= None; static= None; }
 | 20n -> if d = (1174414594u32,31u6) || d = (167782656u32,31u6) || d = (167781632u32,31u6) || d = (1174414592u32,31u6) || d = (167783680u32,31u6) || d = (1174414592u32,32u6) || d = (167780608u32,31u6) then 
let c=Some 0u8 in 
let s=None in 
let o=None in 
let b=None in 
let fib=best c  s  o  b  in 
{  bgp= b; connected= c; ospf= o; selected= fib; static= s; } else 
if d = (1174414592u32,24u6) then 
let c=None in 
let s=Some 1u8 in 
let o=None in 
let b=Some {  aslen= 0u32; bgpAd= 20u8; comms= createDict false; lp= 100u32; med= 80u32; } in 
let fib=best c  s  o  b  in 
{  bgp= b; connected= c; ospf= o; selected= fib; static= s; } else 
{  bgp= None; connected= None; ospf= None; selected= None; static= None; }
 | 21n -> if d = (1174414850u32,31u6) || d = (167781888u32,31u6) || d = (167780864u32,31u6) || d = (1174414848u32,31u6) || d = (167783936u32,31u6) || d = (167782912u32,31u6) || d = (1174414848u32,32u6) then 
let c=Some 0u8 in 
let s=None in 
let o=None in 
let b=None in 
let fib=best c  s  o  b  in 
{  bgp= b; connected= c; ospf= o; selected= fib; static= s; } else 
if d = (1174414848u32,24u6) then 
let c=None in 
let s=Some 1u8 in 
let o=None in 
let b=Some {  aslen= 0u32; bgpAd= 20u8; comms= createDict false; lp= 100u32; med= 80u32; } in 
let fib=best c  s  o  b  in 
{  bgp= b; connected= c; ospf= o; selected= fib; static= s; } else 
{  bgp= None; connected= None; ospf= None; selected= None; static= None; }
 | 22n -> if d = (1174415106u32,31u6) || d = (167782144u32,31u6) || d = (167781120u32,31u6) || d = (1174415104u32,31u6) || d = (167784192u32,31u6) || d = (167783168u32,31u6) || d = (1174415104u32,32u6) then 
let c=Some 0u8 in 
let s=None in 
let o=None in 
let b=None in 
let fib=best c  s  o  b  in 
{  bgp= b; connected= c; ospf= o; selected= fib; static= s; } else 
if d = (1174415104u32,24u6) then 
let c=None in 
let s=Some 1u8 in 
let o=None in 
let b=Some {  aslen= 0u32; bgpAd= 20u8; comms= createDict false; lp= 100u32; med= 80u32; } in 
let fib=best c  s  o  b  in 
{  bgp= b; connected= c; ospf= o; selected= fib; static= s; } else 
{  bgp= None; connected= None; ospf= None; selected= None; static= None; }
 | 23n -> if d = (167803136u32,31u6) || d = (167802112u32,31u6) || d = (167804160u32,31u6) || d = (167801088u32,31u6) || d = (1174424834u32,31u6) || d = (1174424832u32,32u6) || d = (1174424832u32,31u6) then 
let c=Some 0u8 in 
let s=None in 
let o=None in 
let b=None in 
let fib=best c  s  o  b  in 
{  bgp= b; connected= c; ospf= o; selected= fib; static= s; } else 
if d = (1174424832u32,24u6) then 
let c=None in 
let s=Some 1u8 in 
let o=None in 
let b=Some {  aslen= 0u32; bgpAd= 20u8; comms= createDict false; lp= 100u32; med= 80u32; } in 
let fib=best c  s  o  b  in 
{  bgp= b; connected= c; ospf= o; selected= fib; static= s; } else 
{  bgp= None; connected= None; ospf= None; selected= None; static= None; }
 | 24n -> if d = (167803392u32,31u6) || d = (167802368u32,31u6) || d = (167804416u32,31u6) || d = (167801344u32,31u6) || d = (1174425090u32,31u6) || d = (1174425088u32,32u6) || d = (1174425088u32,31u6) then 
let c=Some 0u8 in 
let s=None in 
let o=None in 
let b=None in 
let fib=best c  s  o  b  in 
{  bgp= b; connected= c; ospf= o; selected= fib; static= s; } else 
if d = (1174425088u32,24u6) then 
let c=None in 
let s=Some 1u8 in 
let o=None in 
let b=Some {  aslen= 0u32; bgpAd= 20u8; comms= createDict false; lp= 100u32; med= 80u32; } in 
let fib=best c  s  o  b  in 
{  bgp= b; connected= c; ospf= o; selected= fib; static= s; } else 
{  bgp= None; connected= None; ospf= None; selected= None; static= None; }
 | 25n -> if d = (167835904u32,31u6) || d = (167831808u32,31u6) || d = (167833856u32,31u6) || d = (167829760u32,31u6) || d = (1174412032u32,32u6) || d = (167780096u32,31u6) || d = (167779840u32,31u6) || d = (167779584u32,31u6) || d = (167779328u32,31u6) then 
let c=Some 0u8 in 
let s=None in 
let o=None in 
let b=None in 
let fib=best c  s  o  b  in 
{  bgp= b; connected= c; ospf= o; selected= fib; static= s; } else 
{  bgp= None; connected= None; ospf= None; selected= None; static= None; }
 | 26n -> if d = (167803648u32,31u6) || d = (167802624u32,31u6) || d = (167804672u32,31u6) || d = (167801600u32,31u6) || d = (1174425346u32,31u6) || d = (1174425344u32,32u6) || d = (1174425344u32,31u6) then 
let c=Some 0u8 in 
let s=None in 
let o=None in 
let b=None in 
let fib=best c  s  o  b  in 
{  bgp= b; connected= c; ospf= o; selected= fib; static= s; } else 
if d = (1174425344u32,24u6) then 
let c=None in 
let s=Some 1u8 in 
let o=None in 
let b=Some {  aslen= 0u32; bgpAd= 20u8; comms= createDict false; lp= 100u32; med= 80u32; } in 
let fib=best c  s  o  b  in 
{  bgp= b; connected= c; ospf= o; selected= fib; static= s; } else 
{  bgp= None; connected= None; ospf= None; selected= None; static= None; }
 | 27n -> if d = (1174414338u32,31u6) || d = (167782400u32,31u6) || d = (167781376u32,31u6) || d = (1174414336u32,31u6) || d = (167783424u32,31u6) || d = (1174414336u32,32u6) || d = (167780352u32,31u6) then 
let c=Some 0u8 in 
let s=None in 
let o=None in 
let b=None in 
let fib=best c  s  o  b  in 
{  bgp= b; connected= c; ospf= o; selected= fib; static= s; } else 
if d = (1174414336u32,24u6) then 
let c=None in 
let s=Some 1u8 in 
let o=None in 
let b=Some {  aslen= 0u32; bgpAd= 20u8; comms= createDict false; lp= 100u32; med= 80u32; } in 
let fib=best c  s  o  b  in 
{  bgp= b; connected= c; ospf= o; selected= fib; static= s; } else 
{  bgp= None; connected= None; ospf= None; selected= None; static= None; }
 | 28n -> if d = (167805184u32,31u6) || d = (167777024u32,31u6) || d = (167776768u32,31u6) || d = (167776512u32,31u6) || d = (167811328u32,31u6) || d = (1174411264u32,32u6) || d = (167807232u32,31u6) || d = (167776256u32,31u6) || d = (167809280u32,31u6) then 
let c=Some 0u8 in 
let s=None in 
let o=None in 
let b=None in 
let fib=best c  s  o  b  in 
{  bgp= b; connected= c; ospf= o; selected= fib; static= s; } else 
{  bgp= None; connected= None; ospf= None; selected= None; static= None; }
 | 29n -> if d = (167777792u32,31u6) || d = (167776768u32,31u6) || d = (1174412800u32,32u6) || d = (167779840u32,31u6) || d = (167778816u32,31u6) || d = (1174412800u32,31u6) || d = (1174412802u32,31u6) then 
let c=Some 0u8 in 
let s=None in 
let o=None in 
let b=None in 
let fib=best c  s  o  b  in 
{  bgp= b; connected= c; ospf= o; selected= fib; static= s; } else 
if d = (1174412800u32,24u6) then 
let c=None in 
let s=Some 1u8 in 
let o=None in 
let b=Some {  aslen= 0u32; bgpAd= 20u8; comms= createDict false; lp= 100u32; med= 80u32; } in 
let fib=best c  s  o  b  in 
{  bgp= b; connected= c; ospf= o; selected= fib; static= s; } else 
{  bgp= None; connected= None; ospf= None; selected= None; static= None; }
 | 30n -> if d = (167837184u32,31u6) || d = (167833088u32,31u6) || d = (167835136u32,31u6) || d = (167800576u32,31u6) || d = (167800320u32,31u6) || d = (167800064u32,31u6) || d = (167799808u32,31u6) || d = (167831040u32,31u6) || d = (1174422272u32,32u6) then 
let c=Some 0u8 in 
let s=None in 
let o=None in 
let b=None in 
let fib=best c  s  o  b  in 
{  bgp= b; connected= c; ospf= o; selected= fib; static= s; } else 
{  bgp= None; connected= None; ospf= None; selected= None; static= None; }
 | 31n -> if d = (167778048u32,31u6) || d = (167777024u32,31u6) || d = (1174413056u32,32u6) || d = (167780096u32,31u6) || d = (167779072u32,31u6) || d = (1174413056u32,31u6) || d = (1174413058u32,31u6) then 
let c=Some 0u8 in 
let s=None in 
let o=None in 
let b=None in 
let fib=best c  s  o  b  in 
{  bgp= b; connected= c; ospf= o; selected= fib; static= s; } else 
if d = (1174413056u32,24u6) then 
let c=None in 
let s=Some 1u8 in 
let o=None in 
let b=Some {  aslen= 0u32; bgpAd= 20u8; comms= createDict false; lp= 100u32; med= 80u32; } in 
let fib=best c  s  o  b  in 
{  bgp= b; connected= c; ospf= o; selected= fib; static= s; } else 
{  bgp= None; connected= None; ospf= None; selected= None; static= None; }
 | 32n -> if d = (167827712u32,31u6) || d = (167823616u32,31u6) || d = (167825664u32,31u6) || d = (167821568u32,31u6) || d = (167778304u32,31u6) || d = (1174411776u32,32u6) || d = (167779072u32,31u6) || d = (167778816u32,31u6) || d = (167778560u32,31u6) then 
let c=Some 0u8 in 
let s=None in 
let o=None in 
let b=None in 
let fib=best c  s  o  b  in 
{  bgp= b; connected= c; ospf= o; selected= fib; static= s; } else 
{  bgp= None; connected= None; ospf= None; selected= None; static= None; }
 | 33n -> if d = (167802880u32,31u6) || d = (167801856u32,31u6) || d = (167803904u32,31u6) || d = (167800832u32,31u6) || d = (1174424578u32,31u6) || d = (1174424576u32,32u6) || d = (1174424576u32,31u6) then 
let c=Some 0u8 in 
let s=None in 
let o=None in 
let b=None in 
let fib=best c  s  o  b  in 
{  bgp= b; connected= c; ospf= o; selected= fib; static= s; } else 
if d = (1174424576u32,24u6) then 
let c=None in 
let s=Some 1u8 in 
let o=None in 
let b=Some {  aslen= 0u32; bgpAd= 20u8; comms= createDict false; lp= 100u32; med= 80u32; } in 
let fib=best c  s  o  b  in 
{  bgp= b; connected= c; ospf= o; selected= fib; static= s; } else 
{  bgp= None; connected= None; ospf= None; selected= None; static= None; }
 | 34n -> if d = (167819520u32,31u6) || d = (167815424u32,31u6) || d = (167817472u32,31u6) || d = (167778048u32,31u6) || d = (167777792u32,31u6) || d = (167777536u32,31u6) || d = (167777280u32,31u6) || d = (1174411520u32,32u6) || d = (167813376u32,31u6) then 
let c=Some 0u8 in 
let s=None in 
let o=None in 
let b=None in 
let fib=best c  s  o  b  in 
{  bgp= b; connected= c; ospf= o; selected= fib; static= s; } else 
{  bgp= None; connected= None; ospf= None; selected= None; static= None; }
 | 35n -> if d = (167797504u32,31u6) || d = (167797248u32,31u6) || d = (167796992u32,31u6) || d = (167796736u32,31u6) || d = (1174421504u32,32u6) || d = (167810560u32,31u6) || d = (167812608u32,31u6) || d = (167806464u32,31u6) || d = (167808512u32,31u6) then 
let c=Some 0u8 in 
let s=None in 
let o=None in 
let b=None in 
let fib=best c  s  o  b  in 
{  bgp= b; connected= c; ospf= o; selected= fib; static= s; } else 
{  bgp= None; connected= None; ospf= None; selected= None; static= None; }
 | 36n -> if d = (167799296u32,31u6) || d = (167798272u32,31u6) || d = (167800320u32,31u6) || d = (1174423042u32,31u6) || d = (167797248u32,31u6) || d = (1174423040u32,31u6) || d = (1174423040u32,32u6) then 
let c=Some 0u8 in 
let s=None in 
let o=None in 
let b=None in 
let fib=best c  s  o  b  in 
{  bgp= b; connected= c; ospf= o; selected= fib; static= s; } else 
if d = (1174423040u32,24u6) then 
let c=None in 
let s=Some 1u8 in 
let o=None in 
let b=Some {  aslen= 0u32; bgpAd= 20u8; comms= createDict false; lp= 100u32; med= 80u32; } in 
let fib=best c  s  o  b  in 
{  bgp= b; connected= c; ospf= o; selected= fib; static= s; } else 
{  bgp= None; connected= None; ospf= None; selected= None; static= None; }
 | 37n -> if d = (167799552u32,31u6) || d = (167798528u32,31u6) || d = (167800576u32,31u6) || d = (1174423298u32,31u6) || d = (167797504u32,31u6) || d = (1174423296u32,31u6) || d = (1174423296u32,32u6) then 
let c=Some 0u8 in 
let s=None in 
let o=None in 
let b=None in 
let fib=best c  s  o  b  in 
{  bgp= b; connected= c; ospf= o; selected= fib; static= s; } else 
if d = (1174423296u32,24u6) then 
let c=None in 
let s=Some 1u8 in 
let o=None in 
let b=Some {  aslen= 0u32; bgpAd= 20u8; comms= createDict false; lp= 100u32; med= 80u32; } in 
let fib=best c  s  o  b  in 
{  bgp= b; connected= c; ospf= o; selected= fib; static= s; } else 
{  bgp= None; connected= None; ospf= None; selected= None; static= None; }
 | 38n -> if d = (167799552u32,31u6) || d = (167799296u32,31u6) || d = (167799040u32,31u6) || d = (167798784u32,31u6) || d = (167828992u32,31u6) || d = (167824896u32,31u6) || d = (167826944u32,31u6) || d = (1174422016u32,32u6) || d = (167822848u32,31u6) then 
let c=Some 0u8 in 
let s=None in 
let o=None in 
let b=None in 
let fib=best c  s  o  b  in 
{  bgp= b; connected= c; ospf= o; selected= fib; static= s; } else 
{  bgp= None; connected= None; ospf= None; selected= None; static= None; }
 | 39n -> if d = (167798016u32,31u6) || d = (167797760u32,31u6) || d = (167798528u32,31u6) || d = (167798272u32,31u6) || d = (167818752u32,31u6) || d = (1174421760u32,32u6) || d = (167820800u32,31u6) || d = (167814656u32,31u6) || d = (167816704u32,31u6) then 
let c=Some 0u8 in 
let s=None in 
let o=None in 
let b=None in 
let fib=best c  s  o  b  in 
{  bgp= b; connected= c; ospf= o; selected= fib; static= s; } else 
{  bgp= None; connected= None; ospf= None; selected= None; static= None; }
 | 40n -> if d = (167807232u32,31u6) || d = (167806976u32,31u6) || d = (167807744u32,31u6) || d = (167808000u32,31u6) || d = (167807488u32,31u6) || d = (167808768u32,31u6) || d = (167808256u32,31u6) || d = (167808512u32,31u6) || d = (1174405376u32,32u6) then 
let c=Some 0u8 in 
let s=None in 
let o=None in 
let b=None in 
let fib=best c  s  o  b  in 
{  bgp= b; connected= c; ospf= o; selected= fib; static= s; } else 
{  bgp= None; connected= None; ospf= None; selected= None; static= None; }
 | 41n -> if d = (167805184u32,31u6) || d = (167804928u32,31u6) || d = (167805696u32,31u6) || d = (167805952u32,31u6) || d = (167805440u32,31u6) || d = (167806720u32,31u6) || d = (167806208u32,31u6) || d = (167806464u32,31u6) || d = (1174405120u32,32u6) then 
let c=Some 0u8 in 
let s=None in 
let o=None in 
let b=None in 
let fib=best c  s  o  b  in 
{  bgp= b; connected= c; ospf= o; selected= fib; static= s; } else 
{  bgp= None; connected= None; ospf= None; selected= None; static= None; }
 | 42n -> if d = (167786496u32,31u6) || d = (167785472u32,31u6) || d = (167787520u32,31u6) || d = (1174416386u32,31u6) || d = (1174416384u32,32u6) || d = (167784448u32,31u6) || d = (1174416384u32,31u6) then 
let c=Some 0u8 in 
let s=None in 
let o=None in 
let b=None in 
let fib=best c  s  o  b  in 
{  bgp= b; connected= c; ospf= o; selected= fib; static= s; } else 
if d = (1174416384u32,24u6) then 
let c=None in 
let s=Some 1u8 in 
let o=None in 
let b=Some {  aslen= 0u32; bgpAd= 20u8; comms= createDict false; lp= 100u32; med= 80u32; } in 
let fib=best c  s  o  b  in 
{  bgp= b; connected= c; ospf= o; selected= fib; static= s; } else 
{  bgp= None; connected= None; ospf= None; selected= None; static= None; }
 | 43n -> if d = (167811328u32,31u6) || d = (167811072u32,31u6) || d = (167811840u32,31u6) || d = (167812096u32,31u6) || d = (167811584u32,31u6) || d = (167812864u32,31u6) || d = (167812352u32,31u6) || d = (167812608u32,31u6) || d = (1174405888u32,32u6) then 
let c=Some 0u8 in 
let s=None in 
let o=None in 
let b=None in 
let fib=best c  s  o  b  in 
{  bgp= b; connected= c; ospf= o; selected= fib; static= s; } else 
{  bgp= None; connected= None; ospf= None; selected= None; static= None; }
 | 44n -> if d = (167819264u32,31u6) || d = (167815168u32,31u6) || d = (167817216u32,31u6) || d = (167813120u32,31u6) || d = (1174409472u32,32u6) || d = (167773952u32,31u6) || d = (167773696u32,31u6) || d = (167773440u32,31u6) || d = (167773184u32,31u6) then 
let c=Some 0u8 in 
let s=None in 
let o=None in 
let b=None in 
let fib=best c  s  o  b  in 
{  bgp= b; connected= c; ospf= o; selected= fib; static= s; } else 
{  bgp= None; connected= None; ospf= None; selected= None; static= None; }
 | 45n -> if d = (167786752u32,31u6) || d = (167785728u32,31u6) || d = (167787776u32,31u6) || d = (1174416642u32,31u6) || d = (1174416640u32,32u6) || d = (167784704u32,31u6) || d = (1174416640u32,31u6) then 
let c=Some 0u8 in 
let s=None in 
let o=None in 
let b=None in 
let fib=best c  s  o  b  in 
{  bgp= b; connected= c; ospf= o; selected= fib; static= s; } else 
if d = (1174416640u32,24u6) then 
let c=None in 
let s=Some 1u8 in 
let o=None in 
let b=Some {  aslen= 0u32; bgpAd= 20u8; comms= createDict false; lp= 100u32; med= 80u32; } in 
let fib=best c  s  o  b  in 
{  bgp= b; connected= c; ospf= o; selected= fib; static= s; } else 
{  bgp= None; connected= None; ospf= None; selected= None; static= None; }
 | 46n -> if d = (167810816u32,31u6) || d = (167810304u32,31u6) || d = (167810560u32,31u6) || d = (167809280u32,31u6) || d = (167809024u32,31u6) || d = (167809792u32,31u6) || d = (167810048u32,31u6) || d = (167809536u32,31u6) || d = (1174405632u32,32u6) then 
let c=Some 0u8 in 
let s=None in 
let o=None in 
let b=None in 
let fib=best c  s  o  b  in 
{  bgp= b; connected= c; ospf= o; selected= fib; static= s; } else 
{  bgp= None; connected= None; ospf= None; selected= None; static= None; }
 | 47n -> if d = (167804928u32,31u6) || d = (167811072u32,31u6) || d = (167772928u32,31u6) || d = (167772672u32,31u6) || d = (167772416u32,31u6) || d = (167772160u32,31u6) || d = (167806976u32,31u6) || d = (1174409216u32,32u6) || d = (167809024u32,31u6) then 
let c=Some 0u8 in 
let s=None in 
let o=None in 
let b=None in 
let fib=best c  s  o  b  in 
{  bgp= b; connected= c; ospf= o; selected= fib; static= s; } else 
{  bgp= None; connected= None; ospf= None; selected= None; static= None; }
 | 48n -> if d = (167785984u32,31u6) || d = (167784960u32,31u6) || d = (167788032u32,31u6) || d = (167787008u32,31u6) || d = (1174416898u32,31u6) || d = (1174416896u32,32u6) || d = (1174416896u32,31u6) then 
let c=Some 0u8 in 
let s=None in 
let o=None in 
let b=None in 
let fib=best c  s  o  b  in 
{  bgp= b; connected= c; ospf= o; selected= fib; static= s; } else 
if d = (1174416896u32,24u6) then 
let c=None in 
let s=Some 1u8 in 
let o=None in 
let b=Some {  aslen= 0u32; bgpAd= 20u8; comms= createDict false; lp= 100u32; med= 80u32; } in 
let fib=best c  s  o  b  in 
{  bgp= b; connected= c; ospf= o; selected= fib; static= s; } else 
{  bgp= None; connected= None; ospf= None; selected= None; static= None; }
 | 49n -> if d = (167816448u32,31u6) || d = (167815424u32,31u6) || d = (167815168u32,31u6) || d = (167815936u32,31u6) || d = (167816192u32,31u6) || d = (167815680u32,31u6) || d = (167816960u32,31u6) || d = (167816704u32,31u6) || d = (1174406400u32,32u6) then 
let c=Some 0u8 in 
let s=None in 
let o=None in 
let b=None in 
let fib=best c  s  o  b  in 
{  bgp= b; connected= c; ospf= o; selected= fib; static= s; } else 
{  bgp= None; connected= None; ospf= None; selected= None; static= None; }
 | 50n -> if d = (167835648u32,31u6) || d = (167831552u32,31u6) || d = (167833600u32,31u6) || d = (167829504u32,31u6) || d = (1174409984u32,32u6) || d = (167776000u32,31u6) || d = (167775744u32,31u6) || d = (167775488u32,31u6) || d = (167775232u32,31u6) then 
let c=Some 0u8 in 
let s=None in 
let o=None in 
let b=None in 
let fib=best c  s  o  b  in 
{  bgp= b; connected= c; ospf= o; selected= fib; static= s; } else 
{  bgp= None; connected= None; ospf= None; selected= None; static= None; }
 | 51n -> if d = (167786240u32,31u6) || d = (167785216u32,31u6) || d = (167788288u32,31u6) || d = (167787264u32,31u6) || d = (1174417154u32,31u6) || d = (1174417152u32,32u6) || d = (1174417152u32,31u6) then 
let c=Some 0u8 in 
let s=None in 
let o=None in 
let b=None in 
let fib=best c  s  o  b  in 
{  bgp= b; connected= c; ospf= o; selected= fib; static= s; } else 
if d = (1174417152u32,24u6) then 
let c=None in 
let s=Some 1u8 in 
let o=None in 
let b=Some {  aslen= 0u32; bgpAd= 20u8; comms= createDict false; lp= 100u32; med= 80u32; } in 
let fib=best c  s  o  b  in 
{  bgp= b; connected= c; ospf= o; selected= fib; static= s; } else 
{  bgp= None; connected= None; ospf= None; selected= None; static= None; }
 | 52n -> if d = (167814912u32,31u6) || d = (167814656u32,31u6) || d = (167814400u32,31u6) || d = (167813376u32,31u6) || d = (167813120u32,31u6) || d = (167813888u32,31u6) || d = (167814144u32,31u6) || d = (167813632u32,31u6) || d = (1174406144u32,32u6) then 
let c=Some 0u8 in 
let s=None in 
let o=None in 
let b=None in 
let fib=best c  s  o  b  in 
{  bgp= b; connected= c; ospf= o; selected= fib; static= s; } else 
{  bgp= None; connected= None; ospf= None; selected= None; static= None; }
 | 53n -> if d = (167827456u32,31u6) || d = (167823360u32,31u6) || d = (167825408u32,31u6) || d = (167821312u32,31u6) || d = (1174409728u32,32u6) || d = (167774208u32,31u6) || d = (167774976u32,31u6) || d = (167774720u32,31u6) || d = (167774464u32,31u6) then 
let c=Some 0u8 in 
let s=None in 
let o=None in 
let b=None in 
let fib=best c  s  o  b  in 
{  bgp= b; connected= c; ospf= o; selected= fib; static= s; } else 
{  bgp= None; connected= None; ospf= None; selected= None; static= None; }
 | 54n -> if d = (167820544u32,31u6) || d = (167819520u32,31u6) || d = (167819264u32,31u6) || d = (167820032u32,31u6) || d = (167820288u32,31u6) || d = (167819776u32,31u6) || d = (167821056u32,31u6) || d = (167820800u32,31u6) || d = (1174406912u32,32u6) then 
let c=Some 0u8 in 
let s=None in 
let o=None in 
let b=None in 
let fib=best c  s  o  b  in 
{  bgp= b; connected= c; ospf= o; selected= fib; static= s; } else 
{  bgp= None; connected= None; ospf= None; selected= None; static= None; }
 | 55n -> if d = (167819008u32,31u6) || d = (167818752u32,31u6) || d = (167818496u32,31u6) || d = (167817472u32,31u6) || d = (167817216u32,31u6) || d = (167817984u32,31u6) || d = (167818240u32,31u6) || d = (167817728u32,31u6) || d = (1174406656u32,32u6) then 
let c=Some 0u8 in 
let s=None in 
let o=None in 
let b=None in 
let fib=best c  s  o  b  in 
{  bgp= b; connected= c; ospf= o; selected= fib; static= s; } else 
{  bgp= None; connected= None; ospf= None; selected= None; static= None; }
 | 56n -> if d = (167824640u32,31u6) || d = (167823616u32,31u6) || d = (167824384u32,31u6) || d = (167823360u32,31u6) || d = (167824128u32,31u6) || d = (167824896u32,31u6) || d = (167823872u32,31u6) || d = (167825152u32,31u6) || d = (1174407424u32,32u6) then 
let c=Some 0u8 in 
let s=None in 
let o=None in 
let b=None in 
let fib=best c  s  o  b  in 
{  bgp= b; connected= c; ospf= o; selected= fib; static= s; } else 
{  bgp= None; connected= None; ospf= None; selected= None; static= None; }
 | 57n -> if d = (167823104u32,31u6) || d = (167822592u32,31u6) || d = (167821568u32,31u6) || d = (167822336u32,31u6) || d = (167821312u32,31u6) || d = (167822080u32,31u6) || d = (167822848u32,31u6) || d = (167821824u32,31u6) || d = (1174407168u32,32u6) then 
let c=Some 0u8 in 
let s=None in 
let o=None in 
let b=None in 
let fib=best c  s  o  b  in 
{  bgp= b; connected= c; ospf= o; selected= fib; static= s; } else 
{  bgp= None; connected= None; ospf= None; selected= None; static= None; }
 | 58n -> if d = (167836672u32,31u6) || d = (167832576u32,31u6) || d = (167834624u32,31u6) || d = (167830528u32,31u6) || d = (167792384u32,31u6) || d = (167792128u32,31u6) || d = (167791872u32,31u6) || d = (167791616u32,31u6) || d = (1174418176u32,32u6) then 
let c=Some 0u8 in 
let s=None in 
let o=None in 
let b=None in 
let fib=best c  s  o  b  in 
{  bgp= b; connected= c; ospf= o; selected= fib; static= s; } else 
{  bgp= None; connected= None; ospf= None; selected= None; static= None; }
 | 59n -> if d = (167828480u32,31u6) || d = (167791104u32,31u6) || d = (167790848u32,31u6) || d = (167790592u32,31u6) || d = (167824384u32,31u6) || d = (167791360u32,31u6) || d = (167826432u32,31u6) || d = (167822336u32,31u6) || d = (1174417920u32,32u6) then 
let c=Some 0u8 in 
let s=None in 
let o=None in 
let b=None in 
let fib=best c  s  o  b  in 
{  bgp= b; connected= c; ospf= o; selected= fib; static= s; } else 
{  bgp= None; connected= None; ospf= None; selected= None; static= None; }
 | 60n -> if d = (167794432u32,31u6) || d = (167794176u32,31u6) || d = (167793920u32,31u6) || d = (167793664u32,31u6) || d = (167820544u32,31u6) || d = (1174419712u32,32u6) || d = (167816448u32,31u6) || d = (167818496u32,31u6) || d = (167814400u32,31u6) then 
let c=Some 0u8 in 
let s=None in 
let o=None in 
let b=None in 
let fib=best c  s  o  b  in 
{  bgp= b; connected= c; ospf= o; selected= fib; static= s; } else 
{  bgp= None; connected= None; ospf= None; selected= None; static= None; }
 | 61n -> if d = (167793408u32,31u6) || d = (167793152u32,31u6) || d = (167792896u32,31u6) || d = (167792640u32,31u6) || d = (1174419456u32,32u6) || d = (167810304u32,31u6) || d = (167812352u32,31u6) || d = (167806208u32,31u6) || d = (167808256u32,31u6) then 
let c=Some 0u8 in 
let s=None in 
let o=None in 
let b=None in 
let fib=best c  s  o  b  in 
{  bgp= b; connected= c; ospf= o; selected= fib; static= s; } else 
{  bgp= None; connected= None; ospf= None; selected= None; static= None; }
 | 62n -> if d = (167836928u32,31u6) || d = (167832832u32,31u6) || d = (167834880u32,31u6) || d = (167796480u32,31u6) || d = (167796224u32,31u6) || d = (167795968u32,31u6) || d = (167795712u32,31u6) || d = (167830784u32,31u6) || d = (1174420224u32,32u6) then 
let c=Some 0u8 in 
let s=None in 
let o=None in 
let b=None in 
let fib=best c  s  o  b  in 
{  bgp= b; connected= c; ospf= o; selected= fib; static= s; } else 
{  bgp= None; connected= None; ospf= None; selected= None; static= None; }
 | 63n -> if d = (167795200u32,31u6) || d = (167794944u32,31u6) || d = (167794688u32,31u6) || d = (167828736u32,31u6) || d = (167795456u32,31u6) || d = (167824640u32,31u6) || d = (167826688u32,31u6) || d = (1174419968u32,32u6) || d = (167822592u32,31u6) then 
let c=Some 0u8 in 
let s=None in 
let o=None in 
let b=None in 
let fib=best c  s  o  b  in 
{  bgp= b; connected= c; ospf= o; selected= fib; static= s; } else 
{  bgp= None; connected= None; ospf= None; selected= None; static= None; }
 | 64n -> if d = (167790336u32,31u6) || d = (167789312u32,31u6) || d = (167792384u32,31u6) || d = (167791360u32,31u6) || d = (1174419200u32,31u6) || d = (1174419200u32,32u6) || d = (1174419202u32,31u6) then 
let c=Some 0u8 in 
let s=None in 
let o=None in 
let b=None in 
let fib=best c  s  o  b  in 
{  bgp= b; connected= c; ospf= o; selected= fib; static= s; } else 
if d = (1174419200u32,24u6) then 
let c=None in 
let s=Some 1u8 in 
let o=None in 
let b=Some {  aslen= 0u32; bgpAd= 20u8; comms= createDict false; lp= 100u32; med= 80u32; } in 
let fib=best c  s  o  b  in 
{  bgp= b; connected= c; ospf= o; selected= fib; static= s; } else 
{  bgp= None; connected= None; ospf= None; selected= None; static= None; }
 | 65n -> if d = (167790336u32,31u6) || d = (167790080u32,31u6) || d = (167789824u32,31u6) || d = (167789568u32,31u6) || d = (167820288u32,31u6) || d = (167816192u32,31u6) || d = (1174417664u32,32u6) || d = (167818240u32,31u6) || d = (167814144u32,31u6) then 
let c=Some 0u8 in 
let s=None in 
let o=None in 
let b=None in 
let fib=best c  s  o  b  in 
{  bgp= b; connected= c; ospf= o; selected= fib; static= s; } else 
{  bgp= None; connected= None; ospf= None; selected= None; static= None; }
 | 66n -> if d = (167829760u32,31u6) || d = (167829504u32,31u6) || d = (167831296u32,31u6) || d = (167830784u32,31u6) || d = (167830272u32,31u6) || d = (167830016u32,31u6) || d = (167831040u32,31u6) || d = (167830528u32,31u6) || d = (1174408192u32,32u6) then 
let c=Some 0u8 in 
let s=None in 
let o=None in 
let b=None in 
let fib=best c  s  o  b  in 
{  bgp= b; connected= c; ospf= o; selected= fib; static= s; } else 
{  bgp= None; connected= None; ospf= None; selected= None; static= None; }
 | 67n -> if d = (167828736u32,31u6) || d = (167827712u32,31u6) || d = (167828480u32,31u6) || d = (167827456u32,31u6) || d = (167828224u32,31u6) || d = (167828992u32,31u6) || d = (167827968u32,31u6) || d = (167829248u32,31u6) || d = (1174407936u32,32u6) then 
let c=Some 0u8 in 
let s=None in 
let o=None in 
let b=None in 
let fib=best c  s  o  b  in 
{  bgp= b; connected= c; ospf= o; selected= fib; static= s; } else 
{  bgp= None; connected= None; ospf= None; selected= None; static= None; }
 | 68n -> if d = (167827200u32,31u6) || d = (167826688u32,31u6) || d = (167825664u32,31u6) || d = (167826432u32,31u6) || d = (167825408u32,31u6) || d = (167826176u32,31u6) || d = (167826944u32,31u6) || d = (167825920u32,31u6) || d = (1174407680u32,32u6) then 
let c=Some 0u8 in 
let s=None in 
let o=None in 
let b=None in 
let fib=best c  s  o  b  in 
{  bgp= b; connected= c; ospf= o; selected= fib; static= s; } else 
{  bgp= None; connected= None; ospf= None; selected= None; static= None; }
 | 69n -> if d = (167805696u32,31u6) || d = (167785216u32,31u6) || d = (167784960u32,31u6) || d = (167784704u32,31u6) || d = (167784448u32,31u6) || d = (1174415360u32,32u6) || d = (167811840u32,31u6) || d = (167807744u32,31u6) || d = (167809792u32,31u6) then 
let c=Some 0u8 in 
let s=None in 
let o=None in 
let b=None in 
let fib=best c  s  o  b  in 
{  bgp= b; connected= c; ospf= o; selected= fib; static= s; } else 
{  bgp= None; connected= None; ospf= None; selected= None; static= None; }
 | 70n -> if d = (167835904u32,31u6) || d = (167835648u32,31u6) || d = (167837440u32,31u6) || d = (167836928u32,31u6) || d = (167836416u32,31u6) || d = (167836160u32,31u6) || d = (167837184u32,31u6) || d = (167836672u32,31u6) || d = (1174408960u32,32u6) then 
let c=Some 0u8 in 
let s=None in 
let o=None in 
let b=None in 
let fib=best c  s  o  b  in 
{  bgp= b; connected= c; ospf= o; selected= fib; static= s; } else 
{  bgp= None; connected= None; ospf= None; selected= None; static= None; }
 | 71n -> if d = (167833856u32,31u6) || d = (167833600u32,31u6) || d = (167835392u32,31u6) || d = (167834880u32,31u6) || d = (167834368u32,31u6) || d = (167834112u32,31u6) || d = (167835136u32,31u6) || d = (167834624u32,31u6) || d = (1174408704u32,32u6) then 
let c=Some 0u8 in 
let s=None in 
let o=None in 
let b=None in 
let fib=best c  s  o  b  in 
{  bgp= b; connected= c; ospf= o; selected= fib; static= s; } else 
{  bgp= None; connected= None; ospf= None; selected= None; static= None; }
 | 72n -> if d = (167831808u32,31u6) || d = (167831552u32,31u6) || d = (167833344u32,31u6) || d = (167832832u32,31u6) || d = (167832320u32,31u6) || d = (167832064u32,31u6) || d = (167833088u32,31u6) || d = (167832576u32,31u6) || d = (1174408448u32,32u6) then 
let c=Some 0u8 in 
let s=None in 
let o=None in 
let b=None in 
let fib=best c  s  o  b  in 
{  bgp= b; connected= c; ospf= o; selected= fib; static= s; } else 
{  bgp= None; connected= None; ospf= None; selected= None; static= None; }
 | 73n -> if d = (167790592u32,31u6) || d = (167789568u32,31u6) || d = (167791616u32,31u6) || d = (1174418432u32,31u6) || d = (167788544u32,31u6) || d = (1174418432u32,32u6) || d = (1174418434u32,31u6) then 
let c=Some 0u8 in 
let s=None in 
let o=None in 
let b=None in 
let fib=best c  s  o  b  in 
{  bgp= b; connected= c; ospf= o; selected= fib; static= s; } else 
if d = (1174418432u32,24u6) then 
let c=None in 
let s=Some 1u8 in 
let o=None in 
let b=Some {  aslen= 0u32; bgpAd= 20u8; comms= createDict false; lp= 100u32; med= 80u32; } in 
let fib=best c  s  o  b  in 
{  bgp= b; connected= c; ospf= o; selected= fib; static= s; } else 
{  bgp= None; connected= None; ospf= None; selected= None; static= None; }
 | 74n -> if d = (167790848u32,31u6) || d = (167789824u32,31u6) || d = (167791872u32,31u6) || d = (1174418688u32,31u6) || d = (167788800u32,31u6) || d = (1174418688u32,32u6) || d = (1174418690u32,31u6) then 
let c=Some 0u8 in 
let s=None in 
let o=None in 
let b=None in 
let fib=best c  s  o  b  in 
{  bgp= b; connected= c; ospf= o; selected= fib; static= s; } else 
if d = (1174418688u32,24u6) then 
let c=None in 
let s=Some 1u8 in 
let o=None in 
let b=Some {  aslen= 0u32; bgpAd= 20u8; comms= createDict false; lp= 100u32; med= 80u32; } in 
let fib=best c  s  o  b  in 
{  bgp= b; connected= c; ospf= o; selected= fib; static= s; } else 
{  bgp= None; connected= None; ospf= None; selected= None; static= None; }
 | 75n -> if d = (167805952u32,31u6) || d = (167789312u32,31u6) || d = (167789056u32,31u6) || d = (167788800u32,31u6) || d = (167788544u32,31u6) || d = (1174417408u32,32u6) || d = (167812096u32,31u6) || d = (167808000u32,31u6) || d = (167810048u32,31u6) then 
let c=Some 0u8 in 
let s=None in 
let o=None in 
let b=None in 
let fib=best c  s  o  b  in 
{  bgp= b; connected= c; ospf= o; selected= fib; static= s; } else 
{  bgp= None; connected= None; ospf= None; selected= None; static= None; }
 | 76n -> if d = (167791104u32,31u6) || d = (167790080u32,31u6) || d = (167792128u32,31u6) || d = (1174418944u32,31u6) || d = (167789056u32,31u6) || d = (1174418944u32,32u6) || d = (1174418946u32,31u6) then 
let c=Some 0u8 in 
let s=None in 
let o=None in 
let b=None in 
let fib=best c  s  o  b  in 
{  bgp= b; connected= c; ospf= o; selected= fib; static= s; } else 
if d = (1174418944u32,24u6) then 
let c=None in 
let s=Some 1u8 in 
let o=None in 
let b=Some {  aslen= 0u32; bgpAd= 20u8; comms= createDict false; lp= 100u32; med= 80u32; } in 
let fib=best c  s  o  b  in 
{  bgp= b; connected= c; ospf= o; selected= fib; static= s; } else 
{  bgp= None; connected= None; ospf= None; selected= None; static= None; }
 | 77n -> if d = (167828224u32,31u6) || d = (167824128u32,31u6) || d = (167826176u32,31u6) || d = (167786752u32,31u6) || d = (167786496u32,31u6) || d = (167787264u32,31u6) || d = (167787008u32,31u6) || d = (167822080u32,31u6) || d = (1174415872u32,32u6) then 
let c=Some 0u8 in 
let s=None in 
let o=None in 
let b=None in 
let fib=best c  s  o  b  in 
{  bgp= b; connected= c; ospf= o; selected= fib; static= s; } else 
{  bgp= None; connected= None; ospf= None; selected= None; static= None; }
 | 78n -> if d = (167786240u32,31u6) || d = (167785984u32,31u6) || d = (167785728u32,31u6) || d = (167785472u32,31u6) || d = (167820032u32,31u6) || d = (167815936u32,31u6) || d = (167817984u32,31u6) || d = (1174415616u32,32u6) || d = (167813888u32,31u6) then 
let c=Some 0u8 in 
let s=None in 
let o=None in 
let b=None in 
let fib=best c  s  o  b  in 
{  bgp= b; connected= c; ospf= o; selected= fib; static= s; } else 
{  bgp= None; connected= None; ospf= None; selected= None; static= None; }
 | 79n -> if d = (167836416u32,31u6) || d = (167832320u32,31u6) || d = (167834368u32,31u6) || d = (167830272u32,31u6) || d = (167788288u32,31u6) || d = (167787776u32,31u6) || d = (167788032u32,31u6) || d = (167787520u32,31u6) || d = (1174416128u32,32u6) then 
let c=Some 0u8 in 
let s=None in 
let o=None in 
let b=None in 
let fib=best c  s  o  b  in 
{  bgp= b; connected= c; ospf= o; selected= fib; static= s; } else 
{  bgp= None; connected= None; ospf= None; selected= None; static= None; }
 | _ -> {  bgp= None; connected= None; ospf= None; selected= None; static= None; }
) )
let merge = (fun node -> (fun x -> (fun y -> mergeValues x  y  ) ) )
let trans = (fun edge -> (fun x -> let o=transferOspf edge  x.ospf  in 
let b=transferBgp edge  x  in 
let x=({  bgp= b; connected= None; ospf= o; selected= None; static= None; } : {  bgp: option[{  aslen: int32; bgpAd: int8; comms: dict[int32,bool]; lp: int32; med: int32; }]; connected: option[int8]; ospf: option[{  areaId: int32; areaType: int2; ospfAd: int8; weight: int16; }]; selected: option[int2]; static: option[int8]; }) in 
let b=(match x.bgp with 
 | Some b -> if b.comms[0u32] then 
None else 
Some b
 | None -> None
) in 
{  bgp= b; connected= None; ospf= o; selected= None; static= None; } ) )
let assert_node = (fun node -> (fun x -> if d = (1174410240u32,24u6) then 
(match x.selected with 
 | None -> false
 | _ -> (match x.bgp with 
 | None -> false
 | Some b -> ! (b.comms[0u32])
)
) else 
true ) )
let sol = solution {init = init; trans = trans; merge = merge}
let edges = {51n-69n;11n-22n;68n-59n;72n-58n;73n-59n;9n-22n;48n-69n;60n-54n;26n-7n;7n-41n;78n-54n;66n-58n;36n-39n;76n-59n;54n-65n;17n-52n;70n-58n;38n-5n;7n-46n;67n-59n;23n-7n;48n-77n;42n-69n;26n-15n;33n-7n;14n-33n;62n-70n;78n-49n;36n-35n;56n-11n;62n-18n;42n-79n;21n-17n;37n-30n;24n-15n;71n-79n;22n-19n;38n-57n;14n-71n;23n-15n;54n-17n;79n-42n;75n-43n;45n-69n;52n-44n;63n-18n;51n-77n;77n-56n;54n-78n;38n-68n;36n-30n;74n-59n;22n-17n;57n-11n;30n-5n;17n-22n;5n-35n;40n-19n;72n-30n;5n-30n;61n-18n;59n-74n;10n-61n;31n-28n;27n-19n;58n-74n;50n-13n;4n-35n;46n-19n;71n-30n;43n-28n;4n-30n;59n-57n;77n-67n;27n-9n;15n-68n;53n-57n;58n-71n;72n-62n;53n-13n;21n-19n;19n-21n;52n-65n;43n-19n;70n-14n;79n-70n;8n-61n;46n-75n;62n-72n;6n-55n;41n-19n;57n-53n;15n-57n;60n-18n;25n-0n;20n-9n;28n-46n;14n-66n;53n-68n;65n-74n;35n-4n;57n-38n;24n-14n;79n-45n;55n-65n;75n-40n;44n-52n;16n-61n;38n-36n;41n-75n;22n-9n;32n-56n;18n-61n;40n-75n;56n-38n;64n-59n;15n-23n;54n-39n;21n-9n;64n-75n;9n-66n;66n-62n;66n-30n;40n-47n;69n-43n;37n-39n;61n-41n;49n-65n;47n-3n;32n-67n;71n-58n;29n-28n;20n-19n;30n-36n;12n-47n;0n-32n;40n-69n;2n-53n;16n-62n;56n-59n;41n-61n;15n-24n;19n-43n;74n-75n;44n-54n;1n-25n;78n-48n;46n-69n;56n-32n;3n-53n;77n-48n;76n-75n;65n-52n;25n-71n;13n-47n;0n-25n;39n-36n;35n-41n;35n-43n;57n-32n;41n-47n;19n-46n;14n-23n;1n-32n;57n-15n;18n-63n;34n-54n;46n-61n;3n-50n;6n-24n;69n-48n;3n-47n;79n-66n;9n-71n;65n-55n;61n-40n;19n-41n;34n-49n;69n-40n;1n-28n;11n-67n;29n-32n;19n-27n;0n-28n;67n-11n;47n-2n;65n-54n;13n-50n;43n-69n;40n-61n;32n-0n;16n-63n;56n-15n;70n-30n;59n-76n;2n-50n;2n-47n;44n-55n;48n-79n;11n-56n;25n-72n;35n-40n;73n-75n;59n-56n;77n-57n;55n-78n;34n-0n;28n-29n;14n-72n;49n-78n;61n-8n;50n-70n;50n-66n;59n-67n;47n-43n;17n-55n;47n-41n;31n-32n;33n-15n;50n-2n;49n-44n;5n-39n;39n-54n;28n-0n;34n-29n;55n-44n;8n-63n;68n-11n;44n-2n;72n-79n;12n-50n;10n-63n;45n-77n;78n-52n;15n-56n;65n-76n;62n-71n;54n-44n;33n-14n;66n-79n;30n-71n;42n-77n;52n-78n;55n-17n;7n-24n;77n-68n;41n-69n;28n-40n;75n-76n;15n-67n;53n-2n;39n-49n;17n-21n;7n-40n;67n-32n;76n-58n;32n-68n;56n-63n;14n-70n;67n-15n;11n-21n;39n-5n;68n-32n;74n-58n;52n-34n;51n-78n;57n-63n;73n-58n;37n-38n;17n-20n;49n-6n;60n-55n;32n-57n;67n-38n;27n-17n;78n-55n;24n-6n;64n-58n;62n-16n;55n-34n;45n-78n;17n-49n;42n-78n;54n-34n;14n-24n;11n-27n;60n-52n;21n-11n;25n-29n;68n-38n;7n-43n;45n-79n;26n-6n;79n-71n;20n-11n;58n-72n;75n-41n;9n-21n;20n-17n;55n-39n;28n-1n;32n-29n;67n-77n;52n-6n;6n-49n;62n-66n;60n-8n;58n-76n;68n-77n;72n-50n;28n-43n;53n-12n;19n-22n;71n-14n;70n-25n;66n-50n;47n-46n;70n-50n;44n-12n;71n-25n;10n-60n;63n-8n;27n-11n;34n-52n;66n-9n;35n-36n;43n-61n;30n-4n;68n-53n;31n-25n;40n-7n;23n-6n;38n-67n;72n-9n;9n-27n;66n-25n;41n-7n;12n-53n;67n-53n;33n-6n;71n-9n;69n-51n;62n-8n;69n-42n;13n-53n;9n-70n;49n-34n;48n-78n;47n-12n;38n-56n;38n-4n;69n-41n;61n-43n;50n-71n;71n-50n;4n-39n;72n-25n;29n-25n;25n-70n;77n-51n;46n-47n;7n-23n;13n-44n;43n-35n;14n-26n;69n-45n;76n-65n;68n-63n;35n-46n;30n-66n;43n-47n;2n-44n;7n-33n;63n-68n;6n-23n;57n-59n;18n-62n;78n-45n;79n-51n;64n-65n;73n-65n;69n-46n;52n-60n;44n-3n;38n-37n;44n-49n;11n-57n;39n-52n;78n-51n;78n-42n;16n-60n;70n-9n;63n-57n;77n-45n;46n-7n;0n-34n;8n-62n;46n-35n;30n-72n;75n-64n;15n-33n;15n-26n;77n-42n;75n-73n;10n-62n;55n-60n;17n-54n;56n-53n;47n-13n;49n-17n;30n-70n;18n-60n;75n-74n;28n-41n;30n-37n;7n-26n;71n-62n;70n-79n;53n-3n;9n-72n;63n-56n;61n-46n;8n-60n;41n-35n;6n-33n;43n-7n;28n-31n;65n-73n;65n-64n;6n-26n;66n-14n;40n-35n;52n-17n;44n-13n;43n-75n;12n-44n;49n-60n;59n-68n;63n-67n;46n-28n;50n-3n;70n-62n;31n-34n;4n-38n;56n-77n;39n-4n;50n-12n;47n-40n;50n-72n;32n-1n;17n-27n;58n-70n;34n-31n;63n-10n;53n-67n;57n-77n;6n-54n;25n-1n;72n-14n;59n-73n;60n-10n;29n-34n;39n-55n;61n-10n;40n-28n;35n-5n;61n-16n;53n-56n;23n-14n;32n-31n;62n-10n;34n-1n;5n-38n;52n-39n;25n-66n;11n-68n;51n-79n;58n-66n;9n-20n;26n-14n;55n-6n;63n-16n;22n-11n;79n-48n;49n-39n;36n-38n;37n-35n;6n-52n;60n-16n;54n-60n;41n-28n;59n-64n;75n-46n;34n-55n;35n-37n;3n-44n;79n-72n;68n-15n;19n-40n;1n-34n;24n-7n;25n-31n;58n-73n;58n-64n;74n-65n;65n-49n;39n-37n;67n-63n;60n-49n;11n-20n;54n-6n;19n-20n;}
let nodes = 80
assert foldNodes ((fun k -> (fun v -> (fun acc -> acc && assert_node k  v  ) ) )) sol true
let protoStatic = 1u8
let protoOspf = 2u8
let protoConn = 0u8
let protoBgp = 3u8
let ospfIntraArea = 0u2
let ospfInterArea = 1u2
let ospfE2 = 3u2
let ospfE1 = 2u2
let tagDown = (fun e -> (fun b -> {  aslen= b.aslen; bgpAd= b.bgpAd; comms= (match e with 
 | u~_ -> if u = down then 
b.comms[0u32:=true] else 
b.comms
); lp= b.lp; med= b.med; } ) )
symbolic down : tnode
require ! (down = 12n)
(* {edge=0, edge=1, edge=2, edge=3, edge=4, edge=5, aggregation=6, aggregation=7, edge=8, aggregation=9, edge=10, aggregation=11, edge=12, edge=13, aggregation=14, aggregation=15, edge=16, aggregation=17, edge=18, aggregation=19, edge=20, edge=21, edge=22, edge=23, edge=24, aggregation=25, edge=26, edge=27, aggregation=28, edge=29, aggregation=30, edge=31, aggregation=32, edge=33, aggregation=34, aggregation=35, edge=36, edge=37, aggregation=38, aggregation=39, core=40, core=41, edge=42, core=43, aggregation=44, edge=45, core=46, aggregation=47, edge=48, core=49, aggregation=50, edge=51, core=52, aggregation=53, core=54, core=55, core=56, core=57, aggregation=58, aggregation=59, aggregation=60, aggregation=61, aggregation=62, aggregation=63, edge=64, aggregation=65, core=66, core=67, core=68, aggregation=69, core=70, core=71, core=72, edge=73, edge=74, aggregation=75, edge=76, aggregation=77, aggregation=78, aggregation=79} *)
