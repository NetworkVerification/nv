type ospfType = {ospfAd: int8; weight: int16; areaType:int2; areaId: int;}
type bgpType = {bgpAd: int8; lp: int; aslen: int; med:int; comms:set[int];}
type rib = {
    connected:option[int8];
    static:option[int8];
    ospf:option[ospfType];
    bgp:option[bgpType];
    selected:option[int2]; }
type attribute = dict[(int,int5), rib]

let edges = {
  3-16; (*core-0,Serial0 --> aggregation-8,Serial0*)
  13-12; (*aggregation-5,Serial3 --> edge-7,Serial1*)
  8-1; (*aggregation-16,Serial1 --> core-1,Serial3*)
  6-7; (*aggregation-17,Serial3 --> core-2,Serial1*)
  19-16; (*edge-10,Serial0 --> aggregation-8,Serial2*)
  14-3; (*aggregation-4,Serial0 --> core-0,Serial2*)
  6-4; (*aggregation-17,Serial0 --> core-3,Serial1*)
  4-13; (*core-3,Serial2 --> aggregation-5,Serial1*)
  9-18; (*edge-14,Serial0 --> aggregation-12,Serial2*)
  17-0; (*aggregation-13,Serial3 --> edge-15,Serial1*)
  8-2; (*aggregation-16,Serial2 --> edge-18,Serial0*)
  3-14; (*core-0,Serial2 --> aggregation-4,Serial0*)
  18-3; (*aggregation-12,Serial0 --> core-0,Serial1*)
  1-8; (*core-1,Serial3 --> aggregation-16,Serial1*)
  7-15; (*core-2,Serial0 --> aggregation-9,Serial3*)
  15-5; (*aggregation-9,Serial2 --> edge-11,Serial1*)
  18-0; (*aggregation-12,Serial3 --> edge-15,Serial0*)
  10-8; (*edge-19,Serial0 --> aggregation-16,Serial3*)
  5-16; (*edge-11,Serial0 --> aggregation-8,Serial3*)
  6-2; (*aggregation-17,Serial1 --> edge-18,Serial1*)
  7-17; (*core-2,Serial3 --> aggregation-13,Serial0*)
  15-4; (*aggregation-9,Serial0 --> core-3,Serial0*)
  0-18; (*edge-15,Serial0 --> aggregation-12,Serial3*)
  7-6; (*core-2,Serial1 --> aggregation-17,Serial3*)
  16-5; (*aggregation-8,Serial3 --> edge-11,Serial0*)
  13-7; (*aggregation-5,Serial0 --> core-2,Serial2*)
  16-19; (*aggregation-8,Serial2 --> edge-10,Serial0*)
  14-11; (*aggregation-4,Serial2 --> edge-6,Serial0*)
  11-13; (*edge-6,Serial1 --> aggregation-5,Serial2*)
  3-18; (*core-0,Serial1 --> aggregation-12,Serial0*)
  9-17; (*edge-14,Serial1 --> aggregation-13,Serial2*)
  6-10; (*aggregation-17,Serial2 --> edge-19,Serial1*)
  13-4; (*aggregation-5,Serial1 --> core-3,Serial2*)
  2-6; (*edge-18,Serial1 --> aggregation-17,Serial1*)
  18-1; (*aggregation-12,Serial1 --> core-1,Serial1*)
  15-19; (*aggregation-9,Serial1 --> edge-10,Serial1*)
  1-14; (*core-1,Serial2 --> aggregation-4,Serial1*)
  2-8; (*edge-18,Serial0 --> aggregation-16,Serial2*)
  8-3; (*aggregation-16,Serial0 --> core-0,Serial3*)
  17-4; (*aggregation-13,Serial1 --> core-3,Serial3*)
  18-9; (*aggregation-12,Serial2 --> edge-14,Serial0*)
  0-17; (*edge-15,Serial1 --> aggregation-13,Serial3*)
  7-13; (*core-2,Serial2 --> aggregation-5,Serial0*)
  4-17; (*core-3,Serial3 --> aggregation-13,Serial1*)
  14-1; (*aggregation-4,Serial1 --> core-1,Serial2*)
  8-10; (*aggregation-16,Serial3 --> edge-19,Serial0*)
  10-6; (*edge-19,Serial1 --> aggregation-17,Serial2*)
  1-18; (*core-1,Serial1 --> aggregation-12,Serial1*)
  15-7; (*aggregation-9,Serial3 --> core-2,Serial0*)
  11-14; (*edge-6,Serial0 --> aggregation-4,Serial2*)
  12-13; (*edge-7,Serial1 --> aggregation-5,Serial3*)
  17-7; (*aggregation-13,Serial0 --> core-2,Serial3*)
  3-8; (*core-0,Serial3 --> aggregation-16,Serial0*)
  17-9; (*aggregation-13,Serial2 --> edge-14,Serial1*)
  13-11; (*aggregation-5,Serial2 --> edge-6,Serial1*)
  16-1; (*aggregation-8,Serial1 --> core-1,Serial0*)
  16-3; (*aggregation-8,Serial0 --> core-0,Serial0*)
  4-15; (*core-3,Serial0 --> aggregation-9,Serial0*)
  19-15; (*edge-10,Serial1 --> aggregation-9,Serial1*)
  12-14; (*edge-7,Serial0 --> aggregation-4,Serial3*)
  14-12; (*aggregation-4,Serial3 --> edge-7,Serial0*)
  1-16; (*core-1,Serial0 --> aggregation-8,Serial1*)
  4-6; (*core-3,Serial1 --> aggregation-17,Serial0*)
  5-15; (*edge-11,Serial1 --> aggregation-9,Serial2*)
}

let nodes = 20

let ospfIntraArea = 0u2
let ospfInterArea = 1u2
let ospfE1 = 2u2
let ospfE2 = 3u2

let protoConn = 0u8
let protoStatic = 1u8
let protoOspf = 2u8
let protoBgp = 3u8

let isProtocol fib x =
  match fib with
  | None -> false
  | Some y -> x = y
let min x y = x <u8 y

let pickOption f x y =
  match (x,y) with
  | (None, _) -> false  | (_, None) -> true
  | (Some a, Some b) -> f a b

let betterOspf o1 o2 =
  if o1.areaType >u2 o2.areaType then true
  else if o2.areaType >u2 o1.areaType then false
  else if o1.weight <=u16 o2.weight then true else false

let betterBgp b1 b2 =
  if b1.lp > b2.lp then true
  else if b2.lp > b1.lp then false
  else if b1.aslen < b2.aslen then true
  else if b2.aslen < b1.aslen then false
  else if b1.med >= b2.med then true else false

let betterEqOption o1 o2 =
  match (o1,o2) with
  | (_, None) -> true
  | (None, _) -> false
  | (Some a, Some b) -> a <=u8 b

let best c s o b =
  match (c,s,o,b) with
  | (None,None,None,None) -> None
  | _ ->
      let o = match o with | None -> None | Some o -> Some o.ospfAd in
      let b = match b with | None -> None | Some b -> Some b.bgpAd in
      let (x,p1) = if betterEqOption c s then (c,0u2) else (s,1u2) in
      let (y,p2) = if betterEqOption o b then (o,2u2) else (b,3u2) in
      Some (if betterEqOption x y then p1 else p2)

let mergeValues x y =
  let c = if (pickOption min x.connected y.connected) then x.connected else y.connected in
  let s = if (pickOption min x.static y.static) then x.static else y.static in
  let o = if (pickOption betterOspf x.ospf y.ospf) then x.ospf else y.ospf in
  let b = if (pickOption betterBgp x.bgp y.bgp) then x.bgp else y.bgp in
  { connected = c;
    static = s;
    ospf = o;
    bgp = b;
    selected = best c s o b}

let merge node x y = combine mergeValues x y

let init node =
  let d = createDict ({connected=None; static=None; ospf=None; bgp=None; selected=None;}) in
  match node with
  | 0n ->
    let c = Some 0u8 in
    let s = None in
    let o = None in
    let b = None in
    let fib = best c s o b in
    let route = {connected=c; static=s; ospf=o; bgp=b; selected=fib;} in
    let d = d[(1174408962, 31u5) := route] in
    let d = d[(1174408960, 32u5) := route] in
    let d = d[(167774976, 31u5) := route] in
    let d = d[(167774464, 31u5) := route] in
    let d = d[(1174408960, 31u5) := route] in
    let c = None in
    let s = Some 1u8 in
    let o = None in
    let b = Some {bgpAd=20u8; lp=100; aslen=0; med=80; comms={};} in
    let fib = best c s o b in
    let route = {connected=c; static=s; ospf=o; bgp=b; selected=fib;} in
    let d = d[(1174408960, 24u5) := route] in
      d
  | 1n ->
    let c = Some 0u8 in
    let s = None in
    let o = None in
    let b = None in
    let fib = best c s o b in
    let route = {connected=c; static=s; ospf=o; bgp=b; selected=fib;} in
    let d = d[(167778048, 31u5) := route] in
    let d = d[(167777280, 31u5) := route] in
    let d = d[(167777792, 31u5) := route] in
    let d = d[(167777536, 31u5) := route] in
    let d = d[(1174405376, 32u5) := route] in
      d
  | 2n ->
    let c = Some 0u8 in
    let s = None in
    let o = None in
    let b = None in
    let fib = best c s o b in
    let route = {connected=c; static=s; ospf=o; bgp=b; selected=fib;} in
    let d = d[(1174409728, 31u5) := route] in
    let d = d[(1174409728, 32u5) := route] in
    let d = d[(1174409730, 31u5) := route] in
    let d = d[(167775744, 31u5) := route] in
    let d = d[(167775232, 31u5) := route] in
    let c = None in
    let s = Some 1u8 in
    let o = None in
    let b = Some {bgpAd=20u8; lp=100; aslen=0; med=80; comms={};} in
    let fib = best c s o b in
    let route = {connected=c; static=s; ospf=o; bgp=b; selected=fib;} in
    let d = d[(1174409728, 24u5) := route] in
      d
  | 3n ->
    let c = Some 0u8 in
    let s = None in
    let o = None in
    let b = None in
    let fib = best c s o b in
    let route = {connected=c; static=s; ospf=o; bgp=b; selected=fib;} in
    let d = d[(167777024, 31u5) := route] in
    let d = d[(167776768, 31u5) := route] in
    let d = d[(167776512, 31u5) := route] in
    let d = d[(167776256, 31u5) := route] in
    let d = d[(1174405120, 32u5) := route] in
      d
  | 4n ->
    let c = Some 0u8 in
    let s = None in
    let o = None in
    let b = None in
    let fib = best c s o b in
    let route = {connected=c; static=s; ospf=o; bgp=b; selected=fib;} in
    let d = d[(167779840, 31u5) := route] in
    let d = d[(167779328, 31u5) := route] in
    let d = d[(167780096, 31u5) := route] in
    let d = d[(167779584, 31u5) := route] in
    let d = d[(1174405888, 32u5) := route] in
      d
  | 5n ->
    let c = Some 0u8 in
    let s = None in
    let o = None in
    let b = None in
    let fib = best c s o b in
    let route = {connected=c; static=s; ospf=o; bgp=b; selected=fib;} in
    let d = d[(1174407938, 31u5) := route] in
    let d = d[(167773952, 31u5) := route] in
    let d = d[(167773440, 31u5) := route] in
    let d = d[(1174407936, 32u5) := route] in
    let d = d[(1174407936, 31u5) := route] in
    let c = None in
    let s = Some 1u8 in
    let o = None in
    let b = Some {bgpAd=20u8; lp=100; aslen=0; med=80; comms={};} in
    let fib = best c s o b in
    let route = {connected=c; static=s; ospf=o; bgp=b; selected=fib;} in
    let d = d[(1174407936, 24u5) := route] in
      d
  | 6n ->
    let c = Some 0u8 in
    let s = None in
    let o = None in
    let b = None in
    let fib = best c s o b in
    let route = {connected=c; static=s; ospf=o; bgp=b; selected=fib;} in
    let d = d[(167779072, 31u5) := route] in
    let d = d[(167780096, 31u5) := route] in
    let d = d[(1174409472, 32u5) := route] in
    let d = d[(167776000, 31u5) := route] in
    let d = d[(167775744, 31u5) := route] in
      d
  | 7n ->
    let c = Some 0u8 in
    let s = None in
    let o = None in
    let b = None in
    let fib = best c s o b in
    let route = {connected=c; static=s; ospf=o; bgp=b; selected=fib;} in
    let d = d[(167778304, 31u5) := route] in
    let d = d[(167778816, 31u5) := route] in
    let d = d[(167779072, 31u5) := route] in
    let d = d[(167778560, 31u5) := route] in
    let d = d[(1174405632, 32u5) := route] in
      d
  | 8n ->
    let c = Some 0u8 in
    let s = None in
    let o = None in
    let b = None in
    let fib = best c s o b in
    let route = {connected=c; static=s; ospf=o; bgp=b; selected=fib;} in
    let d = d[(167778048, 31u5) := route] in
    let d = d[(167777024, 31u5) := route] in
    let d = d[(1174409216, 32u5) := route] in
    let d = d[(167775488, 31u5) := route] in
    let d = d[(167775232, 31u5) := route] in
      d
  | 9n ->
    let c = Some 0u8 in
    let s = None in
    let o = None in
    let b = None in
    let fib = best c s o b in
    let route = {connected=c; static=s; ospf=o; bgp=b; selected=fib;} in
    let d = d[(1174408706, 31u5) := route] in
    let d = d[(167774208, 31u5) := route] in
    let d = d[(1174408704, 32u5) := route] in
    let d = d[(167774720, 31u5) := route] in
    let d = d[(1174408704, 31u5) := route] in
    let c = None in
    let s = Some 1u8 in
    let o = None in
    let b = Some {bgpAd=20u8; lp=100; aslen=0; med=80; comms={};} in
    let fib = best c s o b in
    let route = {connected=c; static=s; ospf=o; bgp=b; selected=fib;} in
    let d = d[(1174408704, 24u5) := route] in
      d
  | 10n ->
    let c = Some 0u8 in
    let s = None in
    let o = None in
    let b = None in
    let fib = best c s o b in
    let route = {connected=c; static=s; ospf=o; bgp=b; selected=fib;} in
    let d = d[(1174409984, 31u5) := route] in
    let d = d[(1174409984, 32u5) := route] in
    let d = d[(1174409986, 31u5) := route] in
    let d = d[(167776000, 31u5) := route] in
    let d = d[(167775488, 31u5) := route] in
    let c = None in
    let s = Some 1u8 in
    let o = None in
    let b = Some {bgpAd=20u8; lp=100; aslen=0; med=80; comms={};} in
    let fib = best c s o b in
    let route = {connected=c; static=s; ospf=o; bgp=b; selected=fib;} in
    let d = d[(1174409984, 24u5) := route] in
      d
  | 11n ->
    let c = Some 0u8 in
    let s = None in
    let o = None in
    let b = None in
    let fib = best c s o b in
    let route = {connected=c; static=s; ospf=o; bgp=b; selected=fib;} in
    let d = d[(1174406658, 31u5) := route] in
    let d = d[(167772672, 31u5) := route] in
    let d = d[(167772160, 31u5) := route] in
    let d = d[(1174406656, 31u5) := route] in
    let d = d[(1174406656, 32u5) := route] in
    let c = None in
    let s = Some 1u8 in
    let o = None in
    let b = Some {bgpAd=20u8; lp=100; aslen=0; med=80; comms={};} in
    let fib = best c s o b in
    let route = {connected=c; static=s; ospf=o; bgp=b; selected=fib;} in
    let d = d[(1174406656, 24u5) := route] in
      d
  | 12n ->
    let c = Some 0u8 in
    let s = None in
    let o = None in
    let b = None in
    let fib = best c s o b in
    let route = {connected=c; static=s; ospf=o; bgp=b; selected=fib;} in
    let d = d[(1174406914, 31u5) := route] in
    let d = d[(167772928, 31u5) := route] in
    let d = d[(167772416, 31u5) := route] in
    let d = d[(1174406912, 31u5) := route] in
    let d = d[(1174406912, 32u5) := route] in
    let c = None in
    let s = Some 1u8 in
    let o = None in
    let b = Some {bgpAd=20u8; lp=100; aslen=0; med=80; comms={};} in
    let fib = best c s o b in
    let route = {connected=c; static=s; ospf=o; bgp=b; selected=fib;} in
    let d = d[(1174406912, 24u5) := route] in
      d
  | 13n ->
    let c = Some 0u8 in
    let s = None in
    let o = None in
    let b = None in
    let fib = best c s o b in
    let route = {connected=c; static=s; ospf=o; bgp=b; selected=fib;} in
    let d = d[(167778304, 31u5) := route] in
    let d = d[(167779328, 31u5) := route] in
    let d = d[(167772928, 31u5) := route] in
    let d = d[(167772672, 31u5) := route] in
    let d = d[(1174406400, 32u5) := route] in
      d
  | 14n ->
    let c = Some 0u8 in
    let s = None in
    let o = None in
    let b = None in
    let fib = best c s o b in
    let route = {connected=c; static=s; ospf=o; bgp=b; selected=fib;} in
    let d = d[(167777280, 31u5) := route] in
    let d = d[(167772416, 31u5) := route] in
    let d = d[(167772160, 31u5) := route] in
    let d = d[(167776256, 31u5) := route] in
    let d = d[(1174406144, 32u5) := route] in
      d
  | 15n ->
    let c = Some 0u8 in
    let s = None in
    let o = None in
    let b = None in
    let fib = best c s o b in
    let route = {connected=c; static=s; ospf=o; bgp=b; selected=fib;} in
    let d = d[(167778560, 31u5) := route] in
    let d = d[(167779584, 31u5) := route] in
    let d = d[(167773952, 31u5) := route] in
    let d = d[(167773696, 31u5) := route] in
    let d = d[(1174407424, 32u5) := route] in
      d
  | 16n ->
    let c = Some 0u8 in
    let s = None in
    let o = None in
    let b = None in
    let fib = best c s o b in
    let route = {connected=c; static=s; ospf=o; bgp=b; selected=fib;} in
    let d = d[(167777536, 31u5) := route] in
    let d = d[(167776512, 31u5) := route] in
    let d = d[(167773440, 31u5) := route] in
    let d = d[(167773184, 31u5) := route] in
    let d = d[(1174407168, 32u5) := route] in
      d
  | 17n ->
    let c = Some 0u8 in
    let s = None in
    let o = None in
    let b = None in
    let fib = best c s o b in
    let route = {connected=c; static=s; ospf=o; bgp=b; selected=fib;} in
    let d = d[(167779840, 31u5) := route] in
    let d = d[(167778816, 31u5) := route] in
    let d = d[(1174408448, 32u5) := route] in
    let d = d[(167774976, 31u5) := route] in
    let d = d[(167774720, 31u5) := route] in
      d
  | 18n ->
    let c = Some 0u8 in
    let s = None in
    let o = None in
    let b = None in
    let fib = best c s o b in
    let route = {connected=c; static=s; ospf=o; bgp=b; selected=fib;} in
    let d = d[(167777792, 31u5) := route] in
    let d = d[(167776768, 31u5) := route] in
    let d = d[(167774208, 31u5) := route] in
    let d = d[(1174408192, 32u5) := route] in
    let d = d[(167774464, 31u5) := route] in
      d
  | 19n ->
    let c = Some 0u8 in
    let s = None in
    let o = None in
    let b = None in
    let fib = best c s o b in
    let route = {connected=c; static=s; ospf=o; bgp=b; selected=fib;} in
    let d = d[(1174407682, 31u5) := route] in
    let d = d[(167773696, 31u5) := route] in
    let d = d[(167773184, 31u5) := route] in
    let d = d[(1174407680, 32u5) := route] in
    let d = d[(1174407680, 31u5) := route] in
    let c = None in
    let s = Some 1u8 in
    let o = None in
    let b = Some {bgpAd=20u8; lp=100; aslen=0; med=80; comms={};} in
    let fib = best c s o b in
    let route = {connected=c; static=s; ospf=o; bgp=b; selected=fib;} in
    let d = d[(1174407680, 24u5) := route] in
      d
  | _ -> d

 let transferOspf edge o =
   match o with
   | None -> None
   | Some o -> (
   match edge with
   | _ -> None
)

 let transferBgpImpPol policy x =
  match x.bgp with
  | None -> {x with bgp=None}
  | Some b ->
    {x with bgp=policy x.selected b}

 let transferBgpPol policy x =
  let b = match x.selected with
          | None -> None
          | Some 0u2 -> Some {bgpAd = 20u8; lp = 100; aslen = 0; med = 80; comms = {}}
          | Some 1u2 -> Some {bgpAd = 20u8; lp = 100; aslen = 0; med = 80; comms = {}}
          | Some 2u2 -> Some {bgpAd = 20u8; lp = 100; aslen = 0; med = 80; comms = {}}
          | Some 3u2 -> x.bgp
  in
  match b with
  | None -> {x with bgp=None}
  | Some b ->
    {x with bgp=policy x.selected b}

 let transferBgp e x0 =
  match e with
   | (0~18) ->
     let x1 =
     mapIf (fun p -> let (prefix, prefixLen) = p in
                   (((prefixLen = 24u5) && ((prefix >= 1174408960) && (prefix < 1174409216)))))
         (transferBgpPol (fun prot b ->
               (if b.comms[131074] then
(Some {bgpAd= b.bgpAd; lp= b.lp; aslen= b.aslen + 1; med= b.med;comms= b.comms[327682:= true];})
else
(Some {bgpAd= b.bgpAd; lp= b.lp; aslen= b.aslen + 1; med= b.med;comms= b.comms[131074:= true];})))) x0
     in
     let x2 =
     mapIf (fun p -> let (prefix, prefixLen) = p in
                   (!(((prefixLen = 24u5) && ((prefix >= 1174408960) && (prefix < 1174409216))))))
         (transferBgpPol (fun prot b ->
               (if (isProtocol prot 3u2) then
(if b.comms[131074] then
(Some {bgpAd= b.bgpAd; lp= b.lp; aslen= b.aslen + 1; med= b.med;comms= b.comms[327682:= true];})
else
(Some {bgpAd= b.bgpAd; lp= b.lp; aslen= b.aslen + 1; med= b.med;comms= b.comms[131074:= true];}))
else
None))) x1
     in
     map (transferBgpImpPol (fun prot b ->
           (if b.comms[262146] then
None
else
(Some {bgpAd= b.bgpAd; lp= b.lp; aslen= b.aslen; med= b.med;comms= b.comms;})))) x2
   | (0~17) ->
     let x1 =
     mapIf (fun p -> let (prefix, prefixLen) = p in
                   (((prefixLen = 24u5) && ((prefix >= 1174408960) && (prefix < 1174409216)))))
         (transferBgpPol (fun prot b ->
               (if b.comms[131074] then
(Some {bgpAd= b.bgpAd; lp= b.lp; aslen= b.aslen + 1; med= b.med;comms= b.comms[327682:= true];})
else
(Some {bgpAd= b.bgpAd; lp= b.lp; aslen= b.aslen + 1; med= b.med;comms= b.comms[131074:= true];})))) x0
     in
     let x2 =
     mapIf (fun p -> let (prefix, prefixLen) = p in
                   (!(((prefixLen = 24u5) && ((prefix >= 1174408960) && (prefix < 1174409216))))))
         (transferBgpPol (fun prot b ->
               (if (isProtocol prot 3u2) then
(if b.comms[131074] then
(Some {bgpAd= b.bgpAd; lp= b.lp; aslen= b.aslen + 1; med= b.med;comms= b.comms[327682:= true];})
else
(Some {bgpAd= b.bgpAd; lp= b.lp; aslen= b.aslen + 1; med= b.med;comms= b.comms[131074:= true];}))
else
None))) x1
     in
     map (transferBgpImpPol (fun prot b ->
           (if b.comms[262146] then
None
else
(Some {bgpAd= b.bgpAd; lp= b.lp; aslen= b.aslen; med= b.med;comms= b.comms;})))) x2
   | (1~18) ->
     let x0 = map (transferBgpPol (fun prot b ->
           (if (isProtocol prot 3u2) then
(if b.comms[196608] then
(Some {bgpAd= b.bgpAd; lp= b.lp; aslen= b.aslen + 1; med= b.med;comms= b.comms[393216:= true];})
else
(Some {bgpAd= b.bgpAd; lp= b.lp; aslen= b.aslen + 1; med= b.med;comms= b.comms[196608:= true];}))
else
None))) x0
     in
     map (transferBgpImpPol (fun prot b ->
           (if b.comms[262146] then
None
else
(Some {bgpAd= b.bgpAd; lp= b.lp; aslen= b.aslen; med= b.med;comms= b.comms;})))) x0
   | (1~16) ->
     let x0 = map (transferBgpPol (fun prot b ->
           (if (isProtocol prot 3u2) then
(if b.comms[196608] then
(Some {bgpAd= b.bgpAd; lp= b.lp; aslen= b.aslen + 1; med= b.med;comms= b.comms[393216:= true];})
else
(Some {bgpAd= b.bgpAd; lp= b.lp; aslen= b.aslen + 1; med= b.med;comms= b.comms[196608:= true];}))
else
None))) x0
     in
     map (transferBgpImpPol (fun prot b ->
           (if b.comms[262145] then
None
else
(Some {bgpAd= b.bgpAd; lp= b.lp; aslen= b.aslen; med= b.med;comms= b.comms;})))) x0
   | (1~14) ->
     let x0 = map (transferBgpPol (fun prot b ->
           (if (isProtocol prot 3u2) then
(if b.comms[196608] then
(Some {bgpAd= b.bgpAd; lp= b.lp; aslen= b.aslen + 1; med= b.med;comms= b.comms[393216:= true];})
else
(Some {bgpAd= b.bgpAd; lp= b.lp; aslen= b.aslen + 1; med= b.med;comms= b.comms[196608:= true];}))
else
None))) x0
     in
     map (transferBgpImpPol (fun prot b ->
           (if b.comms[262144] then
None
else
(Some {bgpAd= b.bgpAd; lp= b.lp; aslen= b.aslen; med= b.med;comms= b.comms;})))) x0
   | (1~8) ->
     let x0 = map (transferBgpPol (fun prot b ->
           (if (isProtocol prot 3u2) then
(if b.comms[196608] then
(Some {bgpAd= b.bgpAd; lp= b.lp; aslen= b.aslen + 1; med= b.med;comms= b.comms[393216:= true];})
else
(Some {bgpAd= b.bgpAd; lp= b.lp; aslen= b.aslen + 1; med= b.med;comms= b.comms[196608:= true];}))
else
None))) x0
     in
     map (transferBgpImpPol (fun prot b ->
           (if b.comms[262147] then
None
else
(Some {bgpAd= b.bgpAd; lp= b.lp; aslen= b.aslen; med= b.med;comms= b.comms;})))) x0
   | (2~6) ->
     let x1 =
     mapIf (fun p -> let (prefix, prefixLen) = p in
                   (((prefixLen = 24u5) && ((prefix >= 1174409728) && (prefix < 1174409984)))))
         (transferBgpPol (fun prot b ->
               (if b.comms[131075] then
(Some {bgpAd= b.bgpAd; lp= b.lp; aslen= b.aslen + 1; med= b.med;comms= b.comms[327683:= true];})
else
(Some {bgpAd= b.bgpAd; lp= b.lp; aslen= b.aslen + 1; med= b.med;comms= b.comms[131075:= true];})))) x0
     in
     let x2 =
     mapIf (fun p -> let (prefix, prefixLen) = p in
                   (!(((prefixLen = 24u5) && ((prefix >= 1174409728) && (prefix < 1174409984))))))
         (transferBgpPol (fun prot b ->
               (if (isProtocol prot 3u2) then
(if b.comms[131075] then
(Some {bgpAd= b.bgpAd; lp= b.lp; aslen= b.aslen + 1; med= b.med;comms= b.comms[327683:= true];})
else
(Some {bgpAd= b.bgpAd; lp= b.lp; aslen= b.aslen + 1; med= b.med;comms= b.comms[131075:= true];}))
else
None))) x1
     in
     map (transferBgpImpPol (fun prot b ->
           (if b.comms[262147] then
None
else
(Some {bgpAd= b.bgpAd; lp= b.lp; aslen= b.aslen; med= b.med;comms= b.comms;})))) x2
   | (2~8) ->
     let x1 =
     mapIf (fun p -> let (prefix, prefixLen) = p in
                   (((prefixLen = 24u5) && ((prefix >= 1174409728) && (prefix < 1174409984)))))
         (transferBgpPol (fun prot b ->
               (if b.comms[131075] then
(Some {bgpAd= b.bgpAd; lp= b.lp; aslen= b.aslen + 1; med= b.med;comms= b.comms[327683:= true];})
else
(Some {bgpAd= b.bgpAd; lp= b.lp; aslen= b.aslen + 1; med= b.med;comms= b.comms[131075:= true];})))) x0
     in
     let x2 =
     mapIf (fun p -> let (prefix, prefixLen) = p in
                   (!(((prefixLen = 24u5) && ((prefix >= 1174409728) && (prefix < 1174409984))))))
         (transferBgpPol (fun prot b ->
               (if (isProtocol prot 3u2) then
(if b.comms[131075] then
(Some {bgpAd= b.bgpAd; lp= b.lp; aslen= b.aslen + 1; med= b.med;comms= b.comms[327683:= true];})
else
(Some {bgpAd= b.bgpAd; lp= b.lp; aslen= b.aslen + 1; med= b.med;comms= b.comms[131075:= true];}))
else
None))) x1
     in
     map (transferBgpImpPol (fun prot b ->
           (if b.comms[262147] then
None
else
(Some {bgpAd= b.bgpAd; lp= b.lp; aslen= b.aslen; med= b.med;comms= b.comms;})))) x2
   | (3~16) ->
     let x0 = map (transferBgpPol (fun prot b ->
           (if (isProtocol prot 3u2) then
(if b.comms[196608] then
(Some {bgpAd= b.bgpAd; lp= b.lp; aslen= b.aslen + 1; med= b.med;comms= b.comms[393216:= true];})
else
(Some {bgpAd= b.bgpAd; lp= b.lp; aslen= b.aslen + 1; med= b.med;comms= b.comms[196608:= true];}))
else
None))) x0
     in
     map (transferBgpImpPol (fun prot b ->
           (if b.comms[262145] then
None
else
(Some {bgpAd= b.bgpAd; lp= b.lp; aslen= b.aslen; med= b.med;comms= b.comms;})))) x0
   | (3~18) ->
     let x0 = map (transferBgpPol (fun prot b ->
           (if (isProtocol prot 3u2) then
(if b.comms[196608] then
(Some {bgpAd= b.bgpAd; lp= b.lp; aslen= b.aslen + 1; med= b.med;comms= b.comms[393216:= true];})
else
(Some {bgpAd= b.bgpAd; lp= b.lp; aslen= b.aslen + 1; med= b.med;comms= b.comms[196608:= true];}))
else
None))) x0
     in
     map (transferBgpImpPol (fun prot b ->
           (if b.comms[262146] then
None
else
(Some {bgpAd= b.bgpAd; lp= b.lp; aslen= b.aslen; med= b.med;comms= b.comms;})))) x0
   | (3~14) ->
     let x0 = map (transferBgpPol (fun prot b ->
           (if (isProtocol prot 3u2) then
(if b.comms[196608] then
(Some {bgpAd= b.bgpAd; lp= b.lp; aslen= b.aslen + 1; med= b.med;comms= b.comms[393216:= true];})
else
(Some {bgpAd= b.bgpAd; lp= b.lp; aslen= b.aslen + 1; med= b.med;comms= b.comms[196608:= true];}))
else
None))) x0
     in
     map (transferBgpImpPol (fun prot b ->
           (if b.comms[262144] then
None
else
(Some {bgpAd= b.bgpAd; lp= b.lp; aslen= b.aslen; med= b.med;comms= b.comms;})))) x0
   | (3~8) ->
     let x0 = map (transferBgpPol (fun prot b ->
           (if (isProtocol prot 3u2) then
(if b.comms[196608] then
(Some {bgpAd= b.bgpAd; lp= b.lp; aslen= b.aslen + 1; med= b.med;comms= b.comms[393216:= true];})
else
(Some {bgpAd= b.bgpAd; lp= b.lp; aslen= b.aslen + 1; med= b.med;comms= b.comms[196608:= true];}))
else
None))) x0
     in
     map (transferBgpImpPol (fun prot b ->
           (if b.comms[262147] then
None
else
(Some {bgpAd= b.bgpAd; lp= b.lp; aslen= b.aslen; med= b.med;comms= b.comms;})))) x0
   | (4~15) ->
     let x0 = map (transferBgpPol (fun prot b ->
           (if (isProtocol prot 3u2) then
(if b.comms[196608] then
(Some {bgpAd= b.bgpAd; lp= b.lp; aslen= b.aslen + 1; med= b.med;comms= b.comms[393216:= true];})
else
(Some {bgpAd= b.bgpAd; lp= b.lp; aslen= b.aslen + 1; med= b.med;comms= b.comms[196608:= true];}))
else
None))) x0
     in
     map (transferBgpImpPol (fun prot b ->
           (if b.comms[262145] then
None
else
(Some {bgpAd= b.bgpAd; lp= b.lp; aslen= b.aslen; med= b.med;comms= b.comms;})))) x0
   | (4~17) ->
     let x0 = map (transferBgpPol (fun prot b ->
           (if (isProtocol prot 3u2) then
(if b.comms[196608] then
(Some {bgpAd= b.bgpAd; lp= b.lp; aslen= b.aslen + 1; med= b.med;comms= b.comms[393216:= true];})
else
(Some {bgpAd= b.bgpAd; lp= b.lp; aslen= b.aslen + 1; med= b.med;comms= b.comms[196608:= true];}))
else
None))) x0
     in
     map (transferBgpImpPol (fun prot b ->
           (if b.comms[262146] then
None
else
(Some {bgpAd= b.bgpAd; lp= b.lp; aslen= b.aslen; med= b.med;comms= b.comms;})))) x0
   | (4~13) ->
     let x0 = map (transferBgpPol (fun prot b ->
           (if (isProtocol prot 3u2) then
(if b.comms[196608] then
(Some {bgpAd= b.bgpAd; lp= b.lp; aslen= b.aslen + 1; med= b.med;comms= b.comms[393216:= true];})
else
(Some {bgpAd= b.bgpAd; lp= b.lp; aslen= b.aslen + 1; med= b.med;comms= b.comms[196608:= true];}))
else
None))) x0
     in
     map (transferBgpImpPol (fun prot b ->
           (if b.comms[262144] then
None
else
(Some {bgpAd= b.bgpAd; lp= b.lp; aslen= b.aslen; med= b.med;comms= b.comms;})))) x0
   | (4~6) ->
     let x0 = map (transferBgpPol (fun prot b ->
           (if (isProtocol prot 3u2) then
(if b.comms[196608] then
(Some {bgpAd= b.bgpAd; lp= b.lp; aslen= b.aslen + 1; med= b.med;comms= b.comms[393216:= true];})
else
(Some {bgpAd= b.bgpAd; lp= b.lp; aslen= b.aslen + 1; med= b.med;comms= b.comms[196608:= true];}))
else
None))) x0
     in
     map (transferBgpImpPol (fun prot b ->
           (if b.comms[262147] then
None
else
(Some {bgpAd= b.bgpAd; lp= b.lp; aslen= b.aslen; med= b.med;comms= b.comms;})))) x0
   | (5~16) ->
     let x1 =
     mapIf (fun p -> let (prefix, prefixLen) = p in
                   (((prefixLen = 24u5) && ((prefix >= 1174407936) && (prefix < 1174408192)))))
         (transferBgpPol (fun prot b ->
               (if b.comms[131073] then
(Some {bgpAd= b.bgpAd; lp= b.lp; aslen= b.aslen + 1; med= b.med;comms= b.comms[327681:= true];})
else
(Some {bgpAd= b.bgpAd; lp= b.lp; aslen= b.aslen + 1; med= b.med;comms= b.comms[131073:= true];})))) x0
     in
     let x2 =
     mapIf (fun p -> let (prefix, prefixLen) = p in
                   (!(((prefixLen = 24u5) && ((prefix >= 1174407936) && (prefix < 1174408192))))))
         (transferBgpPol (fun prot b ->
               (if (isProtocol prot 3u2) then
(if b.comms[131073] then
(Some {bgpAd= b.bgpAd; lp= b.lp; aslen= b.aslen + 1; med= b.med;comms= b.comms[327681:= true];})
else
(Some {bgpAd= b.bgpAd; lp= b.lp; aslen= b.aslen + 1; med= b.med;comms= b.comms[131073:= true];}))
else
None))) x1
     in
     map (transferBgpImpPol (fun prot b ->
           (if b.comms[262145] then
None
else
(Some {bgpAd= b.bgpAd; lp= b.lp; aslen= b.aslen; med= b.med;comms= b.comms;})))) x2
   | (5~15) ->
     let x1 =
     mapIf (fun p -> let (prefix, prefixLen) = p in
                   (((prefixLen = 24u5) && ((prefix >= 1174407936) && (prefix < 1174408192)))))
         (transferBgpPol (fun prot b ->
               (if b.comms[131073] then
(Some {bgpAd= b.bgpAd; lp= b.lp; aslen= b.aslen + 1; med= b.med;comms= b.comms[327681:= true];})
else
(Some {bgpAd= b.bgpAd; lp= b.lp; aslen= b.aslen + 1; med= b.med;comms= b.comms[131073:= true];})))) x0
     in
     let x2 =
     mapIf (fun p -> let (prefix, prefixLen) = p in
                   (!(((prefixLen = 24u5) && ((prefix >= 1174407936) && (prefix < 1174408192))))))
         (transferBgpPol (fun prot b ->
               (if (isProtocol prot 3u2) then
(if b.comms[131073] then
(Some {bgpAd= b.bgpAd; lp= b.lp; aslen= b.aslen + 1; med= b.med;comms= b.comms[327681:= true];})
else
(Some {bgpAd= b.bgpAd; lp= b.lp; aslen= b.aslen + 1; med= b.med;comms= b.comms[131073:= true];}))
else
None))) x1
     in
     map (transferBgpImpPol (fun prot b ->
           (if b.comms[262145] then
None
else
(Some {bgpAd= b.bgpAd; lp= b.lp; aslen= b.aslen; med= b.med;comms= b.comms;})))) x2
   | (6~7) ->
     let x0 = map (transferBgpPol (fun prot b ->
           (if (isProtocol prot 3u2) then
(if b.comms[65539] then
(Some {bgpAd= b.bgpAd; lp= b.lp; aslen= b.aslen + 1; med= b.med;comms= b.comms[262147:= true];})
else
(Some {bgpAd= b.bgpAd; lp= b.lp; aslen= b.aslen + 1; med= b.med;comms= b.comms[65539:= true];}))
else
None))) x0
     in
     map (transferBgpImpPol (fun prot b ->
           (if b.comms[393216] then
None
else
(Some {bgpAd= b.bgpAd; lp= b.lp; aslen= b.aslen; med= b.med;comms= b.comms;})))) x0
   | (6~2) ->
     let x0 = map (transferBgpPol (fun prot b ->
           (if (isProtocol prot 3u2) then
(if b.comms[65539] then
(Some {bgpAd= b.bgpAd; lp= b.lp; aslen= b.aslen + 1; med= b.med;comms= b.comms[262147:= true];})
else
(Some {bgpAd= b.bgpAd; lp= b.lp; aslen= b.aslen + 1; med= b.med;comms= b.comms[65539:= true];}))
else
None))) x0
     in
     map (transferBgpImpPol (fun prot b ->
           (if b.comms[327683] then
None
else
(Some {bgpAd= b.bgpAd; lp= b.lp; aslen= b.aslen; med= b.med;comms= b.comms;})))) x0
   | (6~4) ->
     let x0 = map (transferBgpPol (fun prot b ->
           (if (isProtocol prot 3u2) then
(if b.comms[65539] then
(Some {bgpAd= b.bgpAd; lp= b.lp; aslen= b.aslen + 1; med= b.med;comms= b.comms[262147:= true];})
else
(Some {bgpAd= b.bgpAd; lp= b.lp; aslen= b.aslen + 1; med= b.med;comms= b.comms[65539:= true];}))
else
None))) x0
     in
     map (transferBgpImpPol (fun prot b ->
           (if b.comms[393216] then
None
else
(Some {bgpAd= b.bgpAd; lp= b.lp; aslen= b.aslen; med= b.med;comms= b.comms;})))) x0
   | (6~10) ->
     let x0 = map (transferBgpPol (fun prot b ->
           (if (isProtocol prot 3u2) then
(if b.comms[65539] then
(Some {bgpAd= b.bgpAd; lp= b.lp; aslen= b.aslen + 1; med= b.med;comms= b.comms[262147:= true];})
else
(Some {bgpAd= b.bgpAd; lp= b.lp; aslen= b.aslen + 1; med= b.med;comms= b.comms[65539:= true];}))
else
None))) x0
     in
     map (transferBgpImpPol (fun prot b ->
           (if b.comms[327683] then
None
else
(Some {bgpAd= b.bgpAd; lp= b.lp; aslen= b.aslen; med= b.med;comms= b.comms;})))) x0
   | (7~13) ->
     let x0 = map (transferBgpPol (fun prot b ->
           (if (isProtocol prot 3u2) then
(if b.comms[196608] then
(Some {bgpAd= b.bgpAd; lp= b.lp; aslen= b.aslen + 1; med= b.med;comms= b.comms[393216:= true];})
else
(Some {bgpAd= b.bgpAd; lp= b.lp; aslen= b.aslen + 1; med= b.med;comms= b.comms[196608:= true];}))
else
None))) x0
     in
     map (transferBgpImpPol (fun prot b ->
           (if b.comms[262144] then
None
else
(Some {bgpAd= b.bgpAd; lp= b.lp; aslen= b.aslen; med= b.med;comms= b.comms;})))) x0
   | (7~17) ->
     let x0 = map (transferBgpPol (fun prot b ->
           (if (isProtocol prot 3u2) then
(if b.comms[196608] then
(Some {bgpAd= b.bgpAd; lp= b.lp; aslen= b.aslen + 1; med= b.med;comms= b.comms[393216:= true];})
else
(Some {bgpAd= b.bgpAd; lp= b.lp; aslen= b.aslen + 1; med= b.med;comms= b.comms[196608:= true];}))
else
None))) x0
     in
     map (transferBgpImpPol (fun prot b ->
           (if b.comms[262146] then
None
else
(Some {bgpAd= b.bgpAd; lp= b.lp; aslen= b.aslen; med= b.med;comms= b.comms;})))) x0
   | (7~15) ->
     let x0 = map (transferBgpPol (fun prot b ->
           (if (isProtocol prot 3u2) then
(if b.comms[196608] then
(Some {bgpAd= b.bgpAd; lp= b.lp; aslen= b.aslen + 1; med= b.med;comms= b.comms[393216:= true];})
else
(Some {bgpAd= b.bgpAd; lp= b.lp; aslen= b.aslen + 1; med= b.med;comms= b.comms[196608:= true];}))
else
None))) x0
     in
     map (transferBgpImpPol (fun prot b ->
           (if b.comms[262145] then
None
else
(Some {bgpAd= b.bgpAd; lp= b.lp; aslen= b.aslen; med= b.med;comms= b.comms;})))) x0
   | (7~6) ->
     let x0 = map (transferBgpPol (fun prot b ->
           (if (isProtocol prot 3u2) then
(if b.comms[196608] then
(Some {bgpAd= b.bgpAd; lp= b.lp; aslen= b.aslen + 1; med= b.med;comms= b.comms[393216:= true];})
else
(Some {bgpAd= b.bgpAd; lp= b.lp; aslen= b.aslen + 1; med= b.med;comms= b.comms[196608:= true];}))
else
None))) x0
     in
     map (transferBgpImpPol (fun prot b ->
           (if b.comms[262147] then
None
else
(Some {bgpAd= b.bgpAd; lp= b.lp; aslen= b.aslen; med= b.med;comms= b.comms;})))) x0
   | (8~1) ->
     let x0 = map (transferBgpPol (fun prot b ->
           (if (isProtocol prot 3u2) then
(if b.comms[65539] then
(Some {bgpAd= b.bgpAd; lp= b.lp; aslen= b.aslen + 1; med= b.med;comms= b.comms[262147:= true];})
else
(Some {bgpAd= b.bgpAd; lp= b.lp; aslen= b.aslen + 1; med= b.med;comms= b.comms[65539:= true];}))
else
None))) x0
     in
     map (transferBgpImpPol (fun prot b ->
           (if b.comms[393216] then
None
else
(Some {bgpAd= b.bgpAd; lp= b.lp; aslen= b.aslen; med= b.med;comms= b.comms;})))) x0
   | (8~10) ->
     let x0 = map (transferBgpPol (fun prot b ->
           (if (isProtocol prot 3u2) then
(if b.comms[65539] then
(Some {bgpAd= b.bgpAd; lp= b.lp; aslen= b.aslen + 1; med= b.med;comms= b.comms[262147:= true];})
else
(Some {bgpAd= b.bgpAd; lp= b.lp; aslen= b.aslen + 1; med= b.med;comms= b.comms[65539:= true];}))
else
None))) x0
     in
     map (transferBgpImpPol (fun prot b ->
           (if b.comms[327683] then
None
else
(Some {bgpAd= b.bgpAd; lp= b.lp; aslen= b.aslen; med= b.med;comms= b.comms;})))) x0
   | (8~3) ->
     let x0 = map (transferBgpPol (fun prot b ->
           (if (isProtocol prot 3u2) then
(if b.comms[65539] then
(Some {bgpAd= b.bgpAd; lp= b.lp; aslen= b.aslen + 1; med= b.med;comms= b.comms[262147:= true];})
else
(Some {bgpAd= b.bgpAd; lp= b.lp; aslen= b.aslen + 1; med= b.med;comms= b.comms[65539:= true];}))
else
None))) x0
     in
     map (transferBgpImpPol (fun prot b ->
           (if b.comms[393216] then
None
else
(Some {bgpAd= b.bgpAd; lp= b.lp; aslen= b.aslen; med= b.med;comms= b.comms;})))) x0
   | (8~2) ->
     let x0 = map (transferBgpPol (fun prot b ->
           (if (isProtocol prot 3u2) then
(if b.comms[65539] then
(Some {bgpAd= b.bgpAd; lp= b.lp; aslen= b.aslen + 1; med= b.med;comms= b.comms[262147:= true];})
else
(Some {bgpAd= b.bgpAd; lp= b.lp; aslen= b.aslen + 1; med= b.med;comms= b.comms[65539:= true];}))
else
None))) x0
     in
     map (transferBgpImpPol (fun prot b ->
           (if b.comms[327683] then
None
else
(Some {bgpAd= b.bgpAd; lp= b.lp; aslen= b.aslen; med= b.med;comms= b.comms;})))) x0
   | (9~18) ->
     let x1 =
     mapIf (fun p -> let (prefix, prefixLen) = p in
                   (((prefixLen = 24u5) && ((prefix >= 1174408704) && (prefix < 1174408960)))))
         (transferBgpPol (fun prot b ->
               (if b.comms[131074] then
(Some {bgpAd= b.bgpAd; lp= b.lp; aslen= b.aslen + 1; med= b.med;comms= b.comms[327682:= true];})
else
(Some {bgpAd= b.bgpAd; lp= b.lp; aslen= b.aslen + 1; med= b.med;comms= b.comms[131074:= true];})))) x0
     in
     let x2 =
     mapIf (fun p -> let (prefix, prefixLen) = p in
                   (!(((prefixLen = 24u5) && ((prefix >= 1174408704) && (prefix < 1174408960))))))
         (transferBgpPol (fun prot b ->
               (if (isProtocol prot 3u2) then
(if b.comms[131074] then
(Some {bgpAd= b.bgpAd; lp= b.lp; aslen= b.aslen + 1; med= b.med;comms= b.comms[327682:= true];})
else
(Some {bgpAd= b.bgpAd; lp= b.lp; aslen= b.aslen + 1; med= b.med;comms= b.comms[131074:= true];}))
else
None))) x1
     in
     map (transferBgpImpPol (fun prot b ->
           (if b.comms[262146] then
None
else
(Some {bgpAd= b.bgpAd; lp= b.lp; aslen= b.aslen; med= b.med;comms= b.comms;})))) x2
   | (9~17) ->
     let x1 =
     mapIf (fun p -> let (prefix, prefixLen) = p in
                   (((prefixLen = 24u5) && ((prefix >= 1174408704) && (prefix < 1174408960)))))
         (transferBgpPol (fun prot b ->
               (if b.comms[131074] then
(Some {bgpAd= b.bgpAd; lp= b.lp; aslen= b.aslen + 1; med= b.med;comms= b.comms[327682:= true];})
else
(Some {bgpAd= b.bgpAd; lp= b.lp; aslen= b.aslen + 1; med= b.med;comms= b.comms[131074:= true];})))) x0
     in
     let x2 =
     mapIf (fun p -> let (prefix, prefixLen) = p in
                   (!(((prefixLen = 24u5) && ((prefix >= 1174408704) && (prefix < 1174408960))))))
         (transferBgpPol (fun prot b ->
               (if (isProtocol prot 3u2) then
(if b.comms[131074] then
(Some {bgpAd= b.bgpAd; lp= b.lp; aslen= b.aslen + 1; med= b.med;comms= b.comms[327682:= true];})
else
(Some {bgpAd= b.bgpAd; lp= b.lp; aslen= b.aslen + 1; med= b.med;comms= b.comms[131074:= true];}))
else
None))) x1
     in
     map (transferBgpImpPol (fun prot b ->
           (if b.comms[262146] then
None
else
(Some {bgpAd= b.bgpAd; lp= b.lp; aslen= b.aslen; med= b.med;comms= b.comms;})))) x2
   | (10~8) ->
     let x1 =
     mapIf (fun p -> let (prefix, prefixLen) = p in
                   (((prefixLen = 24u5) && ((prefix >= 1174409984) && (prefix < 1174410240)))))
         (transferBgpPol (fun prot b ->
               (if b.comms[131075] then
(Some {bgpAd= b.bgpAd; lp= b.lp; aslen= b.aslen + 1; med= b.med;comms= b.comms[327683:= true];})
else
(Some {bgpAd= b.bgpAd; lp= b.lp; aslen= b.aslen + 1; med= b.med;comms= b.comms[131075:= true];})))) x0
     in
     let x2 =
     mapIf (fun p -> let (prefix, prefixLen) = p in
                   (!(((prefixLen = 24u5) && ((prefix >= 1174409984) && (prefix < 1174410240))))))
         (transferBgpPol (fun prot b ->
               (if (isProtocol prot 3u2) then
(if b.comms[131075] then
(Some {bgpAd= b.bgpAd; lp= b.lp; aslen= b.aslen + 1; med= b.med;comms= b.comms[327683:= true];})
else
(Some {bgpAd= b.bgpAd; lp= b.lp; aslen= b.aslen + 1; med= b.med;comms= b.comms[131075:= true];}))
else
None))) x1
     in
     map (transferBgpImpPol (fun prot b ->
           (if b.comms[262147] then
None
else
(Some {bgpAd= b.bgpAd; lp= b.lp; aslen= b.aslen; med= b.med;comms= b.comms;})))) x2
   | (10~6) ->
     let x1 =
     mapIf (fun p -> let (prefix, prefixLen) = p in
                   (((prefixLen = 24u5) && ((prefix >= 1174409984) && (prefix < 1174410240)))))
         (transferBgpPol (fun prot b ->
               (if b.comms[131075] then
(Some {bgpAd= b.bgpAd; lp= b.lp; aslen= b.aslen + 1; med= b.med;comms= b.comms[327683:= true];})
else
(Some {bgpAd= b.bgpAd; lp= b.lp; aslen= b.aslen + 1; med= b.med;comms= b.comms[131075:= true];})))) x0
     in
     let x2 =
     mapIf (fun p -> let (prefix, prefixLen) = p in
                   (!(((prefixLen = 24u5) && ((prefix >= 1174409984) && (prefix < 1174410240))))))
         (transferBgpPol (fun prot b ->
               (if (isProtocol prot 3u2) then
(if b.comms[131075] then
(Some {bgpAd= b.bgpAd; lp= b.lp; aslen= b.aslen + 1; med= b.med;comms= b.comms[327683:= true];})
else
(Some {bgpAd= b.bgpAd; lp= b.lp; aslen= b.aslen + 1; med= b.med;comms= b.comms[131075:= true];}))
else
None))) x1
     in
     map (transferBgpImpPol (fun prot b ->
           (if b.comms[262147] then
None
else
(Some {bgpAd= b.bgpAd; lp= b.lp; aslen= b.aslen; med= b.med;comms= b.comms;})))) x2
   | (11~13) ->
     let x1 =
     mapIf (fun p -> let (prefix, prefixLen) = p in
                   (((prefixLen = 24u5) && ((prefix >= 1174406656) && (prefix < 1174406912)))))
         (transferBgpPol (fun prot b ->
               (if b.comms[131072] then
(Some {bgpAd= b.bgpAd; lp= b.lp; aslen= b.aslen + 1; med= b.med;comms= b.comms[327680:= true];})
else
(Some {bgpAd= b.bgpAd; lp= b.lp; aslen= b.aslen + 1; med= b.med;comms= b.comms[131072:= true];})))) x0
     in
     let x2 =
     mapIf (fun p -> let (prefix, prefixLen) = p in
                   (!(((prefixLen = 24u5) && ((prefix >= 1174406656) && (prefix < 1174406912))))))
         (transferBgpPol (fun prot b ->
               (if (isProtocol prot 3u2) then
(if b.comms[131072] then
(Some {bgpAd= b.bgpAd; lp= b.lp; aslen= b.aslen + 1; med= b.med;comms= b.comms[327680:= true];})
else
(Some {bgpAd= b.bgpAd; lp= b.lp; aslen= b.aslen + 1; med= b.med;comms= b.comms[131072:= true];}))
else
None))) x1
     in
     map (transferBgpImpPol (fun prot b ->
           (if b.comms[262144] then
None
else
(Some {bgpAd= b.bgpAd; lp= b.lp; aslen= b.aslen; med= b.med;comms= b.comms;})))) x2
   | (11~14) ->
     let x1 =
     mapIf (fun p -> let (prefix, prefixLen) = p in
                   (((prefixLen = 24u5) && ((prefix >= 1174406656) && (prefix < 1174406912)))))
         (transferBgpPol (fun prot b ->
               (if b.comms[131072] then
(Some {bgpAd= b.bgpAd; lp= b.lp; aslen= b.aslen + 1; med= b.med;comms= b.comms[327680:= true];})
else
(Some {bgpAd= b.bgpAd; lp= b.lp; aslen= b.aslen + 1; med= b.med;comms= b.comms[131072:= true];})))) x0
     in
     let x2 =
     mapIf (fun p -> let (prefix, prefixLen) = p in
                   (!(((prefixLen = 24u5) && ((prefix >= 1174406656) && (prefix < 1174406912))))))
         (transferBgpPol (fun prot b ->
               (if (isProtocol prot 3u2) then
(if b.comms[131072] then
(Some {bgpAd= b.bgpAd; lp= b.lp; aslen= b.aslen + 1; med= b.med;comms= b.comms[327680:= true];})
else
(Some {bgpAd= b.bgpAd; lp= b.lp; aslen= b.aslen + 1; med= b.med;comms= b.comms[131072:= true];}))
else
None))) x1
     in
     map (transferBgpImpPol (fun prot b ->
           (if b.comms[262144] then
None
else
(Some {bgpAd= b.bgpAd; lp= b.lp; aslen= b.aslen; med= b.med;comms= b.comms;})))) x2
   | (12~13) ->
     let x1 =
     mapIf (fun p -> let (prefix, prefixLen) = p in
                   (((prefixLen = 24u5) && ((prefix >= 1174406912) && (prefix < 1174407168)))))
         (transferBgpPol (fun prot b ->
               (if b.comms[131072] then
(Some {bgpAd= b.bgpAd; lp= b.lp; aslen= b.aslen + 1; med= b.med;comms= b.comms[327680:= true];})
else
(Some {bgpAd= b.bgpAd; lp= b.lp; aslen= b.aslen + 1; med= b.med;comms= b.comms[131072:= true];})))) x0
     in
     let x2 =
     mapIf (fun p -> let (prefix, prefixLen) = p in
                   (!(((prefixLen = 24u5) && ((prefix >= 1174406912) && (prefix < 1174407168))))))
         (transferBgpPol (fun prot b ->
               (if (isProtocol prot 3u2) then
(if b.comms[131072] then
(Some {bgpAd= b.bgpAd; lp= b.lp; aslen= b.aslen + 1; med= b.med;comms= b.comms[327680:= true];})
else
(Some {bgpAd= b.bgpAd; lp= b.lp; aslen= b.aslen + 1; med= b.med;comms= b.comms[131072:= true];}))
else
None))) x1
     in
     map (transferBgpImpPol (fun prot b ->
           (if b.comms[262144] then
None
else
(Some {bgpAd= b.bgpAd; lp= b.lp; aslen= b.aslen; med= b.med;comms= b.comms;})))) x2
   | (12~14) ->
     let x1 =
     mapIf (fun p -> let (prefix, prefixLen) = p in
                   (((prefixLen = 24u5) && ((prefix >= 1174406912) && (prefix < 1174407168)))))
         (transferBgpPol (fun prot b ->
               (if b.comms[131072] then
(Some {bgpAd= b.bgpAd; lp= b.lp; aslen= b.aslen + 1; med= b.med;comms= b.comms[327680:= true];})
else
(Some {bgpAd= b.bgpAd; lp= b.lp; aslen= b.aslen + 1; med= b.med;comms= b.comms[131072:= true];})))) x0
     in
     let x2 =
     mapIf (fun p -> let (prefix, prefixLen) = p in
                   (!(((prefixLen = 24u5) && ((prefix >= 1174406912) && (prefix < 1174407168))))))
         (transferBgpPol (fun prot b ->
               (if (isProtocol prot 3u2) then
(if b.comms[131072] then
(Some {bgpAd= b.bgpAd; lp= b.lp; aslen= b.aslen + 1; med= b.med;comms= b.comms[327680:= true];})
else
(Some {bgpAd= b.bgpAd; lp= b.lp; aslen= b.aslen + 1; med= b.med;comms= b.comms[131072:= true];}))
else
None))) x1
     in
     map (transferBgpImpPol (fun prot b ->
           (if b.comms[262144] then
None
else
(Some {bgpAd= b.bgpAd; lp= b.lp; aslen= b.aslen; med= b.med;comms= b.comms;})))) x2
   | (13~7) ->
     let x0 = map (transferBgpPol (fun prot b ->
           (if (isProtocol prot 3u2) then
(if b.comms[65536] then
(Some {bgpAd= b.bgpAd; lp= b.lp; aslen= b.aslen + 1; med= b.med;comms= b.comms[262144:= true];})
else
(Some {bgpAd= b.bgpAd; lp= b.lp; aslen= b.aslen + 1; med= b.med;comms= b.comms[65536:= true];}))
else
None))) x0
     in
     map (transferBgpImpPol (fun prot b ->
           (if b.comms[393216] then
None
else
(Some {bgpAd= b.bgpAd; lp= b.lp; aslen= b.aslen; med= b.med;comms= b.comms;})))) x0
   | (13~12) ->
     let x0 = map (transferBgpPol (fun prot b ->
           (if (isProtocol prot 3u2) then
(if b.comms[65536] then
(Some {bgpAd= b.bgpAd; lp= b.lp; aslen= b.aslen + 1; med= b.med;comms= b.comms[262144:= true];})
else
(Some {bgpAd= b.bgpAd; lp= b.lp; aslen= b.aslen + 1; med= b.med;comms= b.comms[65536:= true];}))
else
None))) x0
     in
     map (transferBgpImpPol (fun prot b ->
           (if b.comms[327680] then
None
else
(Some {bgpAd= b.bgpAd; lp= b.lp; aslen= b.aslen; med= b.med;comms= b.comms;})))) x0
   | (13~11) ->
     let x0 = map (transferBgpPol (fun prot b ->
           (if (isProtocol prot 3u2) then
(if b.comms[65536] then
(Some {bgpAd= b.bgpAd; lp= b.lp; aslen= b.aslen + 1; med= b.med;comms= b.comms[262144:= true];})
else
(Some {bgpAd= b.bgpAd; lp= b.lp; aslen= b.aslen + 1; med= b.med;comms= b.comms[65536:= true];}))
else
None))) x0
     in
     map (transferBgpImpPol (fun prot b ->
           (if b.comms[327680] then
None
else
(Some {bgpAd= b.bgpAd; lp= b.lp; aslen= b.aslen; med= b.med;comms= b.comms;})))) x0
   | (13~4) ->
     let x0 = map (transferBgpPol (fun prot b ->
           (if (isProtocol prot 3u2) then
(if b.comms[65536] then
(Some {bgpAd= b.bgpAd; lp= b.lp; aslen= b.aslen + 1; med= b.med;comms= b.comms[262144:= true];})
else
(Some {bgpAd= b.bgpAd; lp= b.lp; aslen= b.aslen + 1; med= b.med;comms= b.comms[65536:= true];}))
else
None))) x0
     in
     map (transferBgpImpPol (fun prot b ->
           (if b.comms[393216] then
None
else
(Some {bgpAd= b.bgpAd; lp= b.lp; aslen= b.aslen; med= b.med;comms= b.comms;})))) x0
   | (14~12) ->
     let x0 = map (transferBgpPol (fun prot b ->
           (if (isProtocol prot 3u2) then
(if b.comms[65536] then
(Some {bgpAd= b.bgpAd; lp= b.lp; aslen= b.aslen + 1; med= b.med;comms= b.comms[262144:= true];})
else
(Some {bgpAd= b.bgpAd; lp= b.lp; aslen= b.aslen + 1; med= b.med;comms= b.comms[65536:= true];}))
else
None))) x0
     in
     map (transferBgpImpPol (fun prot b ->
           (if b.comms[327680] then
None
else
(Some {bgpAd= b.bgpAd; lp= b.lp; aslen= b.aslen; med= b.med;comms= b.comms;})))) x0
   | (14~3) ->
     let x0 = map (transferBgpPol (fun prot b ->
           (if (isProtocol prot 3u2) then
(if b.comms[65536] then
(Some {bgpAd= b.bgpAd; lp= b.lp; aslen= b.aslen + 1; med= b.med;comms= b.comms[262144:= true];})
else
(Some {bgpAd= b.bgpAd; lp= b.lp; aslen= b.aslen + 1; med= b.med;comms= b.comms[65536:= true];}))
else
None))) x0
     in
     map (transferBgpImpPol (fun prot b ->
           (if b.comms[393216] then
None
else
(Some {bgpAd= b.bgpAd; lp= b.lp; aslen= b.aslen; med= b.med;comms= b.comms;})))) x0
   | (14~1) ->
     let x0 = map (transferBgpPol (fun prot b ->
           (if (isProtocol prot 3u2) then
(if b.comms[65536] then
(Some {bgpAd= b.bgpAd; lp= b.lp; aslen= b.aslen + 1; med= b.med;comms= b.comms[262144:= true];})
else
(Some {bgpAd= b.bgpAd; lp= b.lp; aslen= b.aslen + 1; med= b.med;comms= b.comms[65536:= true];}))
else
None))) x0
     in
     map (transferBgpImpPol (fun prot b ->
           (if b.comms[393216] then
None
else
(Some {bgpAd= b.bgpAd; lp= b.lp; aslen= b.aslen; med= b.med;comms= b.comms;})))) x0
   | (14~11) ->
     let x0 = map (transferBgpPol (fun prot b ->
           (if (isProtocol prot 3u2) then
(if b.comms[65536] then
(Some {bgpAd= b.bgpAd; lp= b.lp; aslen= b.aslen + 1; med= b.med;comms= b.comms[262144:= true];})
else
(Some {bgpAd= b.bgpAd; lp= b.lp; aslen= b.aslen + 1; med= b.med;comms= b.comms[65536:= true];}))
else
None))) x0
     in
     map (transferBgpImpPol (fun prot b ->
           (if b.comms[327680] then
None
else
(Some {bgpAd= b.bgpAd; lp= b.lp; aslen= b.aslen; med= b.med;comms= b.comms;})))) x0
   | (15~7) ->
     let x0 = map (transferBgpPol (fun prot b ->
           (if (isProtocol prot 3u2) then
(if b.comms[65537] then
(Some {bgpAd= b.bgpAd; lp= b.lp; aslen= b.aslen + 1; med= b.med;comms= b.comms[262145:= true];})
else
(Some {bgpAd= b.bgpAd; lp= b.lp; aslen= b.aslen + 1; med= b.med;comms= b.comms[65537:= true];}))
else
None))) x0
     in
     map (transferBgpImpPol (fun prot b ->
           (if b.comms[393216] then
None
else
(Some {bgpAd= b.bgpAd; lp= b.lp; aslen= b.aslen; med= b.med;comms= b.comms;})))) x0
   | (15~4) ->
     let x0 = map (transferBgpPol (fun prot b ->
           (if (isProtocol prot 3u2) then
(if b.comms[65537] then
(Some {bgpAd= b.bgpAd; lp= b.lp; aslen= b.aslen + 1; med= b.med;comms= b.comms[262145:= true];})
else
(Some {bgpAd= b.bgpAd; lp= b.lp; aslen= b.aslen + 1; med= b.med;comms= b.comms[65537:= true];}))
else
None))) x0
     in
     map (transferBgpImpPol (fun prot b ->
           (if b.comms[393216] then
None
else
(Some {bgpAd= b.bgpAd; lp= b.lp; aslen= b.aslen; med= b.med;comms= b.comms;})))) x0
   | (15~19) ->
     let x0 = map (transferBgpPol (fun prot b ->
           (if (isProtocol prot 3u2) then
(if b.comms[65537] then
(Some {bgpAd= b.bgpAd; lp= b.lp; aslen= b.aslen + 1; med= b.med;comms= b.comms[262145:= true];})
else
(Some {bgpAd= b.bgpAd; lp= b.lp; aslen= b.aslen + 1; med= b.med;comms= b.comms[65537:= true];}))
else
None))) x0
     in
     map (transferBgpImpPol (fun prot b ->
           (if b.comms[327681] then
None
else
(Some {bgpAd= b.bgpAd; lp= b.lp; aslen= b.aslen; med= b.med;comms= b.comms;})))) x0
   | (15~5) ->
     let x0 = map (transferBgpPol (fun prot b ->
           (if (isProtocol prot 3u2) then
(if b.comms[65537] then
(Some {bgpAd= b.bgpAd; lp= b.lp; aslen= b.aslen + 1; med= b.med;comms= b.comms[262145:= true];})
else
(Some {bgpAd= b.bgpAd; lp= b.lp; aslen= b.aslen + 1; med= b.med;comms= b.comms[65537:= true];}))
else
None))) x0
     in
     map (transferBgpImpPol (fun prot b ->
           (if b.comms[327681] then
None
else
(Some {bgpAd= b.bgpAd; lp= b.lp; aslen= b.aslen; med= b.med;comms= b.comms;})))) x0
   | (16~3) ->
     let x0 = map (transferBgpPol (fun prot b ->
           (if (isProtocol prot 3u2) then
(if b.comms[65537] then
(Some {bgpAd= b.bgpAd; lp= b.lp; aslen= b.aslen + 1; med= b.med;comms= b.comms[262145:= true];})
else
(Some {bgpAd= b.bgpAd; lp= b.lp; aslen= b.aslen + 1; med= b.med;comms= b.comms[65537:= true];}))
else
None))) x0
     in
     map (transferBgpImpPol (fun prot b ->
           (if b.comms[393216] then
None
else
(Some {bgpAd= b.bgpAd; lp= b.lp; aslen= b.aslen; med= b.med;comms= b.comms;})))) x0
   | (16~19) ->
     let x0 = map (transferBgpPol (fun prot b ->
           (if (isProtocol prot 3u2) then
(if b.comms[65537] then
(Some {bgpAd= b.bgpAd; lp= b.lp; aslen= b.aslen + 1; med= b.med;comms= b.comms[262145:= true];})
else
(Some {bgpAd= b.bgpAd; lp= b.lp; aslen= b.aslen + 1; med= b.med;comms= b.comms[65537:= true];}))
else
None))) x0
     in
     map (transferBgpImpPol (fun prot b ->
           (if b.comms[327681] then
None
else
(Some {bgpAd= b.bgpAd; lp= b.lp; aslen= b.aslen; med= b.med;comms= b.comms;})))) x0
   | (16~1) ->
     let x0 = map (transferBgpPol (fun prot b ->
           (if (isProtocol prot 3u2) then
(if b.comms[65537] then
(Some {bgpAd= b.bgpAd; lp= b.lp; aslen= b.aslen + 1; med= b.med;comms= b.comms[262145:= true];})
else
(Some {bgpAd= b.bgpAd; lp= b.lp; aslen= b.aslen + 1; med= b.med;comms= b.comms[65537:= true];}))
else
None))) x0
     in
     map (transferBgpImpPol (fun prot b ->
           (if b.comms[393216] then
None
else
(Some {bgpAd= b.bgpAd; lp= b.lp; aslen= b.aslen; med= b.med;comms= b.comms;})))) x0
   | (16~5) ->
     let x0 = map (transferBgpPol (fun prot b ->
           (if (isProtocol prot 3u2) then
(if b.comms[65537] then
(Some {bgpAd= b.bgpAd; lp= b.lp; aslen= b.aslen + 1; med= b.med;comms= b.comms[262145:= true];})
else
(Some {bgpAd= b.bgpAd; lp= b.lp; aslen= b.aslen + 1; med= b.med;comms= b.comms[65537:= true];}))
else
None))) x0
     in
     map (transferBgpImpPol (fun prot b ->
           (if b.comms[327681] then
None
else
(Some {bgpAd= b.bgpAd; lp= b.lp; aslen= b.aslen; med= b.med;comms= b.comms;})))) x0
   | (17~9) ->
     let x0 = map (transferBgpPol (fun prot b ->
           (if (isProtocol prot 3u2) then
(if b.comms[65538] then
(Some {bgpAd= b.bgpAd; lp= b.lp; aslen= b.aslen + 1; med= b.med;comms= b.comms[262146:= true];})
else
(Some {bgpAd= b.bgpAd; lp= b.lp; aslen= b.aslen + 1; med= b.med;comms= b.comms[65538:= true];}))
else
None))) x0
     in
     map (transferBgpImpPol (fun prot b ->
           (if b.comms[327682] then
None
else
(Some {bgpAd= b.bgpAd; lp= b.lp; aslen= b.aslen; med= b.med;comms= b.comms;})))) x0
   | (17~7) ->
     let x0 = map (transferBgpPol (fun prot b ->
           (if (isProtocol prot 3u2) then
(if b.comms[65538] then
(Some {bgpAd= b.bgpAd; lp= b.lp; aslen= b.aslen + 1; med= b.med;comms= b.comms[262146:= true];})
else
(Some {bgpAd= b.bgpAd; lp= b.lp; aslen= b.aslen + 1; med= b.med;comms= b.comms[65538:= true];}))
else
None))) x0
     in
     map (transferBgpImpPol (fun prot b ->
           (if b.comms[393216] then
None
else
(Some {bgpAd= b.bgpAd; lp= b.lp; aslen= b.aslen; med= b.med;comms= b.comms;})))) x0
   | (17~4) ->
     let x0 = map (transferBgpPol (fun prot b ->
           (if (isProtocol prot 3u2) then
(if b.comms[65538] then
(Some {bgpAd= b.bgpAd; lp= b.lp; aslen= b.aslen + 1; med= b.med;comms= b.comms[262146:= true];})
else
(Some {bgpAd= b.bgpAd; lp= b.lp; aslen= b.aslen + 1; med= b.med;comms= b.comms[65538:= true];}))
else
None))) x0
     in
     map (transferBgpImpPol (fun prot b ->
           (if b.comms[393216] then
None
else
(Some {bgpAd= b.bgpAd; lp= b.lp; aslen= b.aslen; med= b.med;comms= b.comms;})))) x0
   | (17~0) ->
     let x0 = map (transferBgpPol (fun prot b ->
           (if (isProtocol prot 3u2) then
(if b.comms[65538] then
(Some {bgpAd= b.bgpAd; lp= b.lp; aslen= b.aslen + 1; med= b.med;comms= b.comms[262146:= true];})
else
(Some {bgpAd= b.bgpAd; lp= b.lp; aslen= b.aslen + 1; med= b.med;comms= b.comms[65538:= true];}))
else
None))) x0
     in
     map (transferBgpImpPol (fun prot b ->
           (if b.comms[327682] then
None
else
(Some {bgpAd= b.bgpAd; lp= b.lp; aslen= b.aslen; med= b.med;comms= b.comms;})))) x0
   | (18~1) ->
     let x0 = map (transferBgpPol (fun prot b ->
           (if (isProtocol prot 3u2) then
(if b.comms[65538] then
(Some {bgpAd= b.bgpAd; lp= b.lp; aslen= b.aslen + 1; med= b.med;comms= b.comms[262146:= true];})
else
(Some {bgpAd= b.bgpAd; lp= b.lp; aslen= b.aslen + 1; med= b.med;comms= b.comms[65538:= true];}))
else
None))) x0
     in
     map (transferBgpImpPol (fun prot b ->
           (if b.comms[393216] then
None
else
(Some {bgpAd= b.bgpAd; lp= b.lp; aslen= b.aslen; med= b.med;comms= b.comms;})))) x0
   | (18~3) ->
     let x0 = map (transferBgpPol (fun prot b ->
           (if (isProtocol prot 3u2) then
(if b.comms[65538] then
(Some {bgpAd= b.bgpAd; lp= b.lp; aslen= b.aslen + 1; med= b.med;comms= b.comms[262146:= true];})
else
(Some {bgpAd= b.bgpAd; lp= b.lp; aslen= b.aslen + 1; med= b.med;comms= b.comms[65538:= true];}))
else
None))) x0
     in
     map (transferBgpImpPol (fun prot b ->
           (if b.comms[393216] then
None
else
(Some {bgpAd= b.bgpAd; lp= b.lp; aslen= b.aslen; med= b.med;comms= b.comms;})))) x0
   | (18~0) ->
     let x0 = map (transferBgpPol (fun prot b ->
           (if (isProtocol prot 3u2) then
(if b.comms[65538] then
(Some {bgpAd= b.bgpAd; lp= b.lp; aslen= b.aslen + 1; med= b.med;comms= b.comms[262146:= true];})
else
(Some {bgpAd= b.bgpAd; lp= b.lp; aslen= b.aslen + 1; med= b.med;comms= b.comms[65538:= true];}))
else
None))) x0
     in
     map (transferBgpImpPol (fun prot b ->
           (if b.comms[327682] then
None
else
(Some {bgpAd= b.bgpAd; lp= b.lp; aslen= b.aslen; med= b.med;comms= b.comms;})))) x0
   | (18~9) ->
     let x0 = map (transferBgpPol (fun prot b ->
           (if (isProtocol prot 3u2) then
(if b.comms[65538] then
(Some {bgpAd= b.bgpAd; lp= b.lp; aslen= b.aslen + 1; med= b.med;comms= b.comms[262146:= true];})
else
(Some {bgpAd= b.bgpAd; lp= b.lp; aslen= b.aslen + 1; med= b.med;comms= b.comms[65538:= true];}))
else
None))) x0
     in
     map (transferBgpImpPol (fun prot b ->
           (if b.comms[327682] then
None
else
(Some {bgpAd= b.bgpAd; lp= b.lp; aslen= b.aslen; med= b.med;comms= b.comms;})))) x0
   | (19~16) ->
     let x1 =
     mapIf (fun p -> let (prefix, prefixLen) = p in
                   (((prefixLen = 24u5) && ((prefix >= 1174407680) && (prefix < 1174407936)))))
         (transferBgpPol (fun prot b ->
               (if b.comms[131073] then
(Some {bgpAd= b.bgpAd; lp= b.lp; aslen= b.aslen + 1; med= b.med;comms= b.comms[327681:= true];})
else
(Some {bgpAd= b.bgpAd; lp= b.lp; aslen= b.aslen + 1; med= b.med;comms= b.comms[131073:= true];})))) x0
     in
     let x2 =
     mapIf (fun p -> let (prefix, prefixLen) = p in
                   (!(((prefixLen = 24u5) && ((prefix >= 1174407680) && (prefix < 1174407936))))))
         (transferBgpPol (fun prot b ->
               (if (isProtocol prot 3u2) then
(if b.comms[131073] then
(Some {bgpAd= b.bgpAd; lp= b.lp; aslen= b.aslen + 1; med= b.med;comms= b.comms[327681:= true];})
else
(Some {bgpAd= b.bgpAd; lp= b.lp; aslen= b.aslen + 1; med= b.med;comms= b.comms[131073:= true];}))
else
None))) x1
     in
     map (transferBgpImpPol (fun prot b ->
           (if b.comms[262145] then
None
else
(Some {bgpAd= b.bgpAd; lp= b.lp; aslen= b.aslen; med= b.med;comms= b.comms;})))) x2
   | (19~15) ->
     let x1 =
     mapIf (fun p -> let (prefix, prefixLen) = p in
                   (((prefixLen = 24u5) && ((prefix >= 1174407680) && (prefix < 1174407936)))))
         (transferBgpPol (fun prot b ->
               (if b.comms[131073] then
(Some {bgpAd= b.bgpAd; lp= b.lp; aslen= b.aslen + 1; med= b.med;comms= b.comms[327681:= true];})
else
(Some {bgpAd= b.bgpAd; lp= b.lp; aslen= b.aslen + 1; med= b.med;comms= b.comms[131073:= true];})))) x0
     in
     let x2 =
     mapIf (fun p -> let (prefix, prefixLen) = p in
                   (!(((prefixLen = 24u5) && ((prefix >= 1174407680) && (prefix < 1174407936))))))
         (transferBgpPol (fun prot b ->
               (if (isProtocol prot 3u2) then
(if b.comms[131073] then
(Some {bgpAd= b.bgpAd; lp= b.lp; aslen= b.aslen + 1; med= b.med;comms= b.comms[327681:= true];})
else
(Some {bgpAd= b.bgpAd; lp= b.lp; aslen= b.aslen + 1; med= b.med;comms= b.comms[131073:= true];}))
else
None))) x1
     in
     map (transferBgpImpPol (fun prot b ->
           (if b.comms[262145] then
None
else
(Some {bgpAd= b.bgpAd; lp= b.lp; aslen= b.aslen; med= b.med;comms= b.comms;})))) x2

let trans edge x =
  let x = transferBgp edge x in
  let x = map (fun x -> {x with ospf=transferOspf edge x.ospf; connected=None; static=None}) x in
  x

(* {edge-15=0, core-1=1, edge-18=2, core-0=3, core-3=4, edge-11=5,
aggregation-17=6, core-2=7, aggregation-16=8, edge-14=9, edge-19=10, edge-6=11,
edge-7=12, aggregation-5=13, aggregation-4=14, aggregation-9=15,
aggregation-8=16, aggregation-13=17, aggregation-12=18,
edge-10=19}*)
let sol = solution {init = init; trans = trans; merge = merge}
