type attribute = dict[tnode, option[set[tedge]]]

let nodes = 5

let edges = {
 0=2;
 1=3;
 2=4;
 3=4;
}

let min x y = if x < y then x else y

let mergeAux x y =
  match (x,y) with
  | (None, None) -> None
  | (None, Some _) -> y
  | (Some _, None) -> x
  | (Some ls1, Some ls2) -> Some (ls1 union ls2)

let merge node x y = combine mergeAux x y (Some None) None (Some None) None

let transAux edge v =
  match v with
  | None -> None
  | Some ls -> Some (ls[edge := true])

let trans edge x =
  map (transAux edge) x

let init node =
  let m = createDict None in
  m[node := Some {}]

let assert_node node x =
  match x[1n] with
  | None -> false
  | Some _ -> true

let sol = solution {init = init; trans = trans; merge = merge}

assert foldNodes (fun k v acc -> acc && assert_node k v) sol true
