type attribute = dict[int, option[int]]

let nodes = 40

let edges = {
 0=2;
 0=3;
 1=2;
 1=3;
 4=6;
 4=7;
 5=6;
 5=7;
 8=10;
 8=11;
 9=10;
 9=11;
 12=14;
 12=15;
 13=14;
 13=15;
 2=16;
 2=17;
 3=18;
 3=19;
 6=16;
 6=17;
 7=18;
 7=19;
 10=16;
 10=17;
 11=18;
 11=19;
 14=16;
 14=17;
 15=18;
 15=19;

 20=22;
 20=23;
 21=22;
 21=23;
 24=26;
 24=27;
 25=26;
 25=27;
 28=30;
 28=31;
 29=30;
 29=31;
 32=34;
 32=35;
 33=34;
 33=35;
 22=36;
 22=37;
 23=38;
 23=39;
 26=36;
 26=37;
 27=38;
 27=39;
 30=36;
 30=37;
 31=38;
 31=39;
 34=36;
 34=37;
 35=38;
 35=39;

 19=30;
}

let mapo f o =
  match o with
  | None -> None
  | Some x -> Some (f x)

let mapbetter f o1 o2 =
  match (o1, o2) with
  | (None, x) -> x
  | (x , None) -> x
  | (Some x, Some y) -> Some (f x y)

let merge node x y =
  combine (fun x y -> mapbetter (fun x y -> if x < y then x else y) x y) x y (Some None) None (Some None) None

let trans edge x =
  map (fun x -> mapo (fun x -> x + 1) x) x

let ip_of_node node = node

let init node =
  let m = createDict None in
  match node with
  | 0 -> m[0 := Some 0]
  | 1 -> m[1 := Some 0]
  | 2 -> m[2 := Some 0]
  | 3 -> m[3 := Some 0]
  | 4 -> m[4 := Some 0]
  | 5 -> m[5 := Some 0]
  | 6 -> m[6 := Some 0]
  | 7 -> m[7 := Some 0]
  | 8 -> m[8 := Some 0]
  | 9 -> m[9 := Some 0]
  | 10 -> m[10 := Some 0]
  | 11 -> m[11 := Some 0]
  | 12 -> m[12 := Some 0]
  | 13 -> m[13 := Some 0]
  | 14 -> m[14 := Some 0]
  | 15 -> m[15 := Some 0]
  | 16 -> m[16 := Some 0]
  | 17 -> m[17 := Some 0]
  | 18 -> m[18 := Some 0]
  | 19 -> m[19 := Some 0]
  | 20 -> m[20 := Some 0]
  | 21 -> m[21 := Some 0]
  | 22 -> m[22 := Some 0]
  | 23 -> m[23 := Some 0]
  | 24 -> m[24 := Some 0]
  | 25 -> m[25 := Some 0]
  | 26 -> m[26 := Some 0]
  | 27 -> m[27 := Some 0]
  | 28 -> m[28 := Some 0]
  | 29 -> m[29 := Some 0]
  | 30 -> m[30 := Some 0]
  | 31 -> m[31 := Some 0]
  | 32 -> m[32 := Some 0]
  | 33 -> m[33 := Some 0]
  | 34 -> m[34 := Some 0]
  | 35 -> m[35 := Some 0]
  | 36 -> m[36 := Some 0]
  | 37 -> m[37 := Some 0]
  | 38 -> m[38 := Some 0]
  | 39 -> m[39 := Some 0]

let assert node x =
  if node = 39 then
  match x[0] with
  | Some _ -> true
  | _ -> false
  else true
