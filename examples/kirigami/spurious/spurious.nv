(* vim: set syntax=ocaml: *)

(* An example showing how we can introduce spurious solutions 
 * using our hypotheses. *)

let mapo f o =
  match o with
  | None -> None
  | Some x -> Some (f x)

let mapbetter f o1 o2 =
  match (o1, o2) with
  | (None, x) -> x
  | (x, None) -> x
  | (Some x, Some y) -> Some (f x y)

let isSome o =
  match o with
  | Some _ -> true
  | None -> false

type attribute = option[int]

let nodes = 6

(* try commenting the first predicate and uncommenting
 * the second one *)
let pred x = isSome x
(* let pred x = true *)

symbolic h_0_1 : option[int]
symbolic h_1_0 : option[int]
require (pred h_0_1)
require (pred h_1_0)

let edges = {
  0-2;
  3-1;
  1-4;
  5-0;
}

let init node = match node with
  | 3n -> h_0_1
  | 5n -> h_1_0
  | _ -> None

let trans edge x = match edge with
  | 3~1 -> x
  | 5~0 -> x
  | _ -> mapo (fun x -> x + 1) x

let merge node x y = mapbetter (fun x y -> if x < y then x else y) x y

let assert node x = match node with
  | 2n -> pred x
  | 4n -> pred x
  | _ -> true
