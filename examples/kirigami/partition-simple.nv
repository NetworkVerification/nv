(* vim: set syntax=ocaml: *)
(* simple.nv:
   Implements shortest paths on a 2-node network
   with the destination at node 0. *)

type attribute = int

(* Number of nodes in network topology;
   nodes are numbered 0..nodes-1
 *)
let nodes = 2

(* list of edges in network topology;
   u=v is a bi-directional edge;
   u-v is a single-directional edge from u to v;
 *)
let edges = {
 0=1;
}

let partition node = match node with
  | 0n -> 0u8
  | 1n -> 1u8

let interface edge = match edge with
  | 0~1 -> Some (fun x -> x = 1)
  | 1~0 -> Some (fun x -> true)

(* The merge function;
   It must have type UInt32 -> A -> A -> A
   where A is the type of node attributes.
   The first argument is the name of the node where the merge is being applied
   so one can customize the merge to the node you want.
 *)
let merge node x y =
  if x < y then x else y

(* The trans function;
   It must have type  (UInt32 * UInt32) -> A -> A;
   The first argument is the edge (u,v) along which the transformation occurs.
 *)
let trans edge x = x + 1

(* The initial state of the network;
   A map from nodes to initial values with type A.
 *)
let init node =
  match node with
  | 0n -> 0
  | _ -> 10

let sol = solution {init = init; trans = trans; merge = merge; interface = interface}

assert foldNodes (fun u v acc -> acc && v < 2) sol true
