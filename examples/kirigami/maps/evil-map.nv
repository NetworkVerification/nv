include "../utils.nv"

type attribute = dict[tnode,option[int]]

let nodes = 4

let edges = {
  0=1;
  1=2;
  2=3;
}

let merge node x y =
  let f = mapbetter (fun x y -> if x < y then x else y) in
  combine f x y

let trans edge x =
  map (fun x -> mapo (fun x -> x + 1) x) x

let init node =
  let m = createDict None in m[node := Some 0]

let assert node m =
  match node with
  | 0n -> m[1n] = Some 1 && m[2n] = Some 2 && m[3n] = Some 3
  | _ -> true

let partition node = if node = 0n then 0u8 else 1u8

let interface edge = match edge with
  | 0~1 -> Some (fun m -> m[0n] = Some 1)
  | 1~0 -> Some (fun m -> m[1n] = Some 1 && m[2n] = Some 2 && m[3n] = Some 3)
