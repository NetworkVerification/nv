(* vim: set syntax=ocaml: *)

(* Another example showing how we can introduce spurious solutions 
 * using our hypotheses. *)
type attribute = option[option[int]]

let nodes = 6

let mapo f o =
  match o with
  | None -> None
  | Some x -> Some (f x)

let mapbetter f o1 o2 =
  match (o1, o2) with
  | (None, x) -> x
  | (x, None) -> x
  | (Some x, Some y) -> Some (f x y)

let isSome x = match x with
  | Some _ -> true
  | None -> false

let isSomeSome x = match x with
  | Some y -> isSome y
  | None -> false

let mapoo f x = match x with
  | Some y -> Some (mapo f y)
  | None -> x

let mapbetterbetter f x y = match (x, y) with
  | (None, _) -> y
  | (_, None) -> x
  | (Some a, Some b) -> Some (mapbetter f a b)

(* x can be either None or Some None *)
symbolic x : option[option[int]]
require !(isSomeSome x)
(* We want our hypotheses to be Some Some initially,
 * but this won't hold in a simulation of the full network.
 * Suppose simulation gives us "Some None":
 * then we amend our hypotheses to include this case,
 * but that still ignores the other simulation of "None"
 *)

let pred x = isSomeSome x
(* try commenting the above line and uncommenting the below line *)
(* let pred x = isSome x *)
(* you should still see no counterexamples, even though the real
 * network could produce a solution that does not satisfy pred
 *)

symbolic h_0_1 : option[option[int]]
symbolic h_1_0 : option[option[int]]
require (pred h_0_1)
require (pred h_1_0)

let edges = {
  0-2;
  3-1;
  1-4;
  5-0;
}

let init node = match node with
  | 3n -> h_0_1
  | 5n -> h_1_0
  | 0n -> x
  | _ -> None

let trans edge x = match edge with
  | 3~1 -> x
  | 5~0 -> x
  | _ -> mapoo (fun x -> x + 1) x

let merge node x y = mapbetterbetter (fun x y -> if x < y then x else y) x y

let assert node x = match node with
  | 2n -> pred x
  | 4n -> pred x
  | _ -> true

