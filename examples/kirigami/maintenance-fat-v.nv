(* vim: set syntax=ocaml: *)
(* Template example for encoding node maintenance in BGP networks. *)
(* Intended to be used as an include, where user provides topology. *)
type bgpType = {bgpAd: int; lp: int; aslen: int; med:int; comms:set[int];}
type attribute = option[bgpType]

(* symbolic down : option[tnode] *)
(* the down node cannot be the destination *)
(* require !(down = Some 0n) *)
let down = Some 1n

let node_to_int n = match n with
  | 0n -> 0
  | 1n -> 1
  | 2n -> 2
  | 3n -> 3
  | 4n -> 4
  | 5n -> 5
  | 6n -> 6
  | 7n -> 7
  | 8n -> 8
  | 9n -> 9
  | 10n -> 10
  | 11n -> 11

let maintenanceTag = 0

let init n =
  if n = 0n then Some { bgpAd = 0; lp = 100; aslen = 0; med = 0; comms = {} }
  else None

let pickOption f x y =
  match (x,y) with
  | (None, None) -> None
  | (None, Some _) -> y  | (Some _, None) -> x
  | (Some a, Some b) -> Some (f a b)

let betterBgp b1 b2 =
  if b1.lp > b2.lp then b1
  else if b2.lp > b1.lp then b2
  else if b1.aslen < b2.aslen then b1
  else if b2.aslen < b1.aslen then b2  else if b1.med >= b2.med then b1 else b2

let mergeBgp x y = pickOption betterBgp x y

let merge n x y = mergeBgp x y

let tagDown e b = match down with 
  | None -> b.comms
  | Some d -> (match e with
  | u~_ -> if u = d then b.comms[maintenanceTag := true] else b.comms)

let transferBgp e x =
  match x with
  | None -> None
  | Some b -> (
    let b = {b with comms = tagDown e b; aslen = b.aslen + 1; lp = b.lp} in
    Some b
)

let trans e x =
  let x = transferBgp e x in
  match x with
  | Some b -> if b.comms[maintenanceTag] then None else Some b
  | None -> None

(* Assert that no solution contains the maintenance tag. *)
let assert_node u v = match v with
  | None -> false
  | Some b -> !b.comms[maintenanceTag]

assert foldNodes (fun u v acc -> acc && assert_node u v) sol true

let nodes = 12

let edges = {
    (* pod 1: 0, 1, 2, 3 *)
    0=1;
    0=2;
    1=3;
    2=3;
    (* pod 2: 4, 5, 6, 7 *)
    4=5;
    4=6;
    5=7;
    6=7;
    (* spines: 8, 9, 10, 11 *)
    8=1;
    8=5;
    9=2;
    9=6;
    10=1;
    10=6;
    11=2;
    11=5;
    (* flipped 10 to connect to 6 and 11 to connect to 5 *)
}

let partition n = match n with
  | 0n | 1n | 2n | 3n | 8n | 9n -> 0
  | 4n | 5n | 6n | 7n | 10n | 11n -> 1

let interface e a = match e with
  | 1~10 -> a = Some { bgpAd = 0; lp = 100; aslen = 1; med = 0; comms = {} }
  | 2~11 -> a = Some { bgpAd = 0; lp = 100; aslen = 1; med = 0; comms = {} }
  | 5~8 -> a = Some { bgpAd = 0; lp = 100; aslen = 3; med = 0; comms = {} }
  | 6~9 -> a = Some { bgpAd = 0; lp = 100; aslen = 3; med = 0; comms = {} }
  | 8~5 -> a = Some { bgpAd = 0; lp = 100; aslen = 2; med = 0; comms = {} }
  | 9~6 -> a = Some { bgpAd = 0; lp = 100; aslen = 2; med = 0; comms = {} }
  | 10~1 -> a = Some { bgpAd = 0; lp = 100; aslen = if down = Some 1n then 4 else 2; med = 0; comms = {} }
  | 11~2 -> a = Some { bgpAd = 0; lp = 100; aslen = 2; med = 0; comms = {} }

let sol = solution { init = init; trans = trans; merge = merge; interface = interface; rtrans = trans }
