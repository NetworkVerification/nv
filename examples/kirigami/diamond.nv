(* vim: set syntax=ocaml: *)
let mapo f o =
  match o with
  | None -> None
  | Some x -> Some (f x)

let mapbetter f o1 o2 =
  match (o1, o2) with
  | (None, x) -> x
  | (x, None) -> x
  | (Some x, Some y) -> Some (f x y)

let isSome o =
  match o with
  | Some _ -> true
  | None -> false

type attribute = option[int]

let nodes = 4

(* Diamond partial mesh network *)
let edges = {
 0=1;
 0=2;
 1=2;
 1=3;
 2=3;
}

let partition node = if node = 3n then 1 else 0

let interface edge = match edge with
  | 1~3 -> Some 4
  | 3~1 -> Some 7
  | 2~3 -> Some 2
  | 3~2 -> Some 3
  | _ -> None

let merge node x y =
  mapbetter (fun x y -> if x < y then x else y) x y

let weight edge =
  match edge with
  | 0~1 -> 1
  | 1~2 -> 1
  | 2~3 -> 1
  | _ -> 3

let trans edge x =
  mapo (fun x -> x + (weight edge)) x

let init node =
  match node with
  | 0n -> Some 0
  | _ -> None
