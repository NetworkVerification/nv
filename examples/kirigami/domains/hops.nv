(* A network where we want to ensure that the 
   total number of hops is beneath some threshold. *)

type attribute = (int, bool)


let pred_t x = true
let pred_a x = let (i, b) = x in i < 3 && b
let pred_b x = let (i, b) = x in i < 3 || b
let pred_c x = let (i, b) = x in i < 4 && b
let pred_d x = let (i, b) = x in b
let pred_e x = let (i, b) = x in i < 4

                                   symbolic ext : (int, bool)
                                     require (pred_t ext)

let nodes = 6

let edges = {
  0=1;
  1=2;
  2=3;
  0=2;
  3=4;
  1=4;
  5-3;
}

let init node = match node with
  | 0n -> (0, false)
  | 1n -> (16, false)
  | 2n -> (16, true)
  | 3n -> (16, false)
  | 4n -> (16, false)
  | 5n -> ext

let cost edge = match edge with
  | 0~1 -> 1
  | 1~0 -> 1
  | 1~2 -> 3
  | 2~1 -> 3
  | 0~2 -> 2
  | 2~0 -> 2
  | 2~3 -> 3
  | 3~2 -> 3
  | 3~4 -> 1
  | 4~3 -> 1
  | 1~4 -> 1
  | 4~1 -> 1
  | 5~3 -> 0

let trans edge x = let (i, b) = x in (i + (cost edge), b)

let merge node x y =
  let (ix, bx) = x in
  let (iy, by) = y in
  (if ix < iy then ix else iy, bx || by)

let assert node x = pred_a x
