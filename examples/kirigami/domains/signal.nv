(* A network where we send signals from each node which "decay" as they travel. *)

type attribute = dict[int, int]

symbolic ext : dict[int, int]

let nodes = 6

let edges = {
    0=1;
    1=2;
    2=3;
    0=2;
    3=4;
    1=4;
    5-3;
}

let init node =
    let m = createDict 16 in
    match node with
    | 0n -> m[0 := 0]
    | 1n -> m[1 := 0]
    | 2n -> m[2 := 0]
    | 3n -> m[3 := 0]
    | 4n -> m[4 := 0]
    | 5n -> ext

let cost edge = match edge with
  | 0~1 -> 1
  | 1~0 -> 1
  | 1~2 -> 3
  | 2~1 -> 3
  | 0~2 -> 2
  | 2~0 -> 2
  | 2~3 -> 3
  | 3~2 -> 3
  | 3~4 -> 1
  | 4~3 -> 1
  | 1~4 -> 1
  | 4~1 -> 1
  | 5~3 -> 0

(* Measures the increase in decay as the signal travels. *)
let trans edge x = map (fun decay -> decay + (cost edge)) x

let merge node x y = combine (fun a b -> if a < b then a else b) x y

(* Check that every internal node's signal decay is not above a certain value. *)
(* We say that if this is true then the node is "reachable". *)
let assert node m = match node with
  (* dummy external node *)
  | 5n -> true
  | _ -> m[0] < 4 && m[1] < 4 && m[2] < 5 && m[3] < 4
