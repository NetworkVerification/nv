include "utils.nv"

type prefix = (int,int)

type bgp = { nexthop: option[tedge];
             bgpad : int;
             lp : int;
             cost : int; }
type ribEntry = option[bgp]

type packet = { srcIp: int; dstIp: int; }
type packets = set[packet]

type attr = {dataplane:packets; controlplane:dict[prefix,ribEntry];}
type attribute = attr

let nodes = 4

let edges = {
  0=1;
  0=2;
  1=3;
  2=3;
 }

(* Data Plane functions *)
let mergePackets node x y = x union y

(* longestMatchingPrefix, should check whether p's headers match an
   entry in the rib and whether edge is the forwarding edge on that rib *)
let longestMatchingPrefix edge p rib =
  let dst = p.dstIp in
  match rib[(dst,32)] with
  | None -> false
  | Some route ->
    (match route.nexthop with
    | None -> false
    | Some fwd ->
     fwd = edge)

(* filter the set of packets *)
let transPackets edge rib ps =
  mapIf (fun p -> !(longestMatchingPrefix edge p rib)) (fun b -> false) ps

let initPackets node =
  match node with
  | 3n -> {{ srcIp = 1; dstIp=0; }}
  | _ -> {}

let transRoute edge b =
    match b with
    | None -> None
    | Some b ->
         Some ({nexthop= flipEdge edge; cost = b.cost + 1; bgpad=b.bgpad; lp=b.lp})

(* bgp attributes comparison *)
let betterBgp o1 o2 =
  if o1.lp > o2.lp then true
  else if o2.lp > o1.lp then false
  else if o1.cost < o2.cost then true
  else false

let pickOption f x y =
  match (x,y) with
  | (None, None) -> None
  | (None, Some _) -> y  | (Some _, None) -> x
  | (Some a, Some b) ->
    Some (if f a b then a else b)

let mergeRoute lab1 lab2 =
  pickOption (fun x y -> betterBgp x y) lab1 lab2

let initRoute node =
  let d = createDict None in
  match node with
  | 0n ->
     let b0 = {nexthop=None; bgpad=20; lp=100; cost=0;} in
     d[(0,32) := Some b0]
  | _ -> d

(* Combined functions *)

let merge node x y =
  let psx = x.dataplane in
  let psy = y.dataplane in
  let labx = x.controlplane in
  let laby = y.controlplane in
  {dataplane=mergePackets node psx psy;
   controlplane=combine mergeRoute labx laby}

let trans edge x =
  let ps = x.dataplane in
  let rib = x.controlplane in
  {dataplane = transPackets edge rib ps;
   controlplane = map (transRoute edge) rib}

let init node =
  {dataplane = initPackets node;
   controlplane = initRoute node}

let assert_node node x =
  match node with
  | 1n ->
     (
       let ps = x.dataplane in
       match ps[{ srcIp = 1; dstIp=0; }] with
       | true ->
          true
       | false -> false)
  | _ -> true

let sol = solution {init = init; trans = trans; merge = merge}

assert foldNodes (fun k v acc -> acc && assert_node k v) sol true
