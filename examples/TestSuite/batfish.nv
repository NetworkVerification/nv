type attribute = dict[(int,int),
  (option[int],
   option[int],
   option[(int, int, int, int)],
   option[(int,int,int,int,set[int])],
   option[int])]

let edges = {
  0-4;
  3-2;
  3-1;
  1-3;
  2-5;
  1-6;
  3-7;
  4-8;
  4-9;
  0-10;
  2-11;
  4-0;
  2-3;
  4-12;
  2-13;
  0-1;
  1-0;
  2-14;
  4-15;
}

let nodes = 16

let ospfIntraArea = 0
let ospfInterArea = 1
let ospfE1 = 2
let ospfE2 = 3

let protoConn = 0
let protoStatic = 1
let protoOspf = 2
let protoBgp = 3

let min x y = if x < y then x else y

let max x y = if x < y then y else x

let pickOption f x y =
  match (x,y) with
  | (None, None) -> None
  | (None, Some _) -> y  | (Some _, None) -> x
  | (Some a, Some b) -> Some (f a b)

let betterOspf o1 o2 =
  let (_,cost1,areaType1,_) = o1 in
  let (_,cost2,areaType2,_) = o2 in
  if areaType1 > areaType2 then o1
  else if areaType2 > areaType1 then o2
  else if cost1 <= cost2 then o1 else o2

let betterBgp o1 o2 =
  let (_,lp1,cost1,med1,_) = o1 in
  let (_,lp2,cost2,med2,_) = o2 in
  if lp1 > lp2 then o1
  else if lp2 > lp1 then o2
  else if cost1 < cost2 then o1
  else if cost2 < cost1 then o2  else if med1 >= med2 then o1 else o2

let betterEqOption o1 o2 =
  match (o1,o2) with
  | (None, None) -> true
  | (Some _, None) -> true
  | (None, Some _) -> false
  | (Some a, Some b) -> a <= b

let best c s o b =
  match (c,s,o,b) with
  | (None,None,None,None) -> None
  | _ ->
      let o = match o with | None -> None | Some (ad,_,_,_) -> Some ad in
      let b = match b with | None -> None | Some (ad,_,_,_,_) -> Some ad in
      let (x,p1) = if betterEqOption c s then (c,0) else (s,1) in
      let (y,p2) = if betterEqOption o b then (o,2) else (b,3) in
      Some (if betterEqOption x y then p1 else p2)

let mergeValues x y =
  let (cx,sx,ox,bx,_) = x in
  let (cy,sy,oy,by,_) = y in
  let c = pickOption min cx cy in
  let s = pickOption min sx sy in
  let o = pickOption betterOspf ox oy in
  let b = pickOption betterBgp bx by in
  (c,s,o,b, best c s o b)

let merge node x y = combine mergeValues x y

let init node =
  let d = (createDict (None,None,None,None,None) : dict[(int,int),
                                                        (option[int],
                                                         option[int],
                                                         option[(int, int, int, int)],
                                                         option[(int,int,int,int,set[int])],
                                                         option[int])]) in
  match node with
  | 0n ->
      let c = Some 0 in
      let s = None in
      let o = None in
      let b = None in
      let fib = best c s o b in
      let d = d[(167772928,31) := (c,s,o,b,fib)] in
      let c = Some 0 in
      let s = None in
      let o = None in
      let b = None in
      let fib = best c s o b in
      let d = d[(167772416,31) := (c,s,o,b,fib)] in
      let c = Some 0 in
      let s = None in
      let o = None in
      let b = None in
      let fib = best c s o b in
      let d = d[(1174405888,32) := (c,s,o,b,fib)] in
      d
  | 1n ->
      let c = Some 0 in
      let s = None in
      let o = None in
      let b = None in
      let fib = best c s o b in
      let d = d[(167772672,31) := (c,s,o,b,fib)] in
      let c = Some 0 in
      let s = None in
      let o = None in
      let b = None in
      let fib = best c s o b in
      let d = d[(167772928,31) := (c,s,o,b,fib)] in
      let c = Some 0 in
      let s = None in
      let o = None in
      let b = None in
      let fib = best c s o b in
      let d = d[(1174405120,32) := (c,s,o,b,fib)] in
      d
  | 2n ->
      let c = Some 0 in
      let s = None in
      let o = None in
      let b = None in
      let fib = best c s o b in
      let d = d[(1174405632,31) := (c,s,o,b,fib)] in
      let c = Some 0 in
      let s = None in
      let o = None in
      let b = None in
      let fib = best c s o b in
      let d = d[(167772160,31) := (c,s,o,b,fib)] in
      let c = Some 0 in
      let s = None in
      let o = None in
      let b = None in
      let fib = best c s o b in
      let d = d[(1174405632,32) := (c,s,o,b,fib)] in
      let c = None in
      let s = Some 1 in
      let o = None in
      let b = Some (20, 100, 0, 80, ({} : set[int])) in
      let fib = best c s o b in
      let d = d[(1174405632,24) := (c,s,o,b,fib)] in
      let c = Some 0 in
      let s = None in
      let o = None in
      let b = None in
      let fib = best c s o b in
      let d = d[(1174405634,31) := (c,s,o,b,fib)] in
      d
  | 3n ->
      let c = Some 0 in
      let s = None in
      let o = None in
      let b = None in
      let fib = best c s o b in
      let d = d[(167772672,31) := (c,s,o,b,fib)] in
      let c = Some 0 in
      let s = None in
      let o = None in
      let b = None in
      let fib = best c s o b in
      let d = d[(167772160,31) := (c,s,o,b,fib)] in
      let c = Some 0 in
      let s = None in
      let o = None in
      let b = None in
      let fib = best c s o b in
      let d = d[(1174405376,32) := (c,s,o,b,fib)] in
      d
  | 4n ->
      let c = Some 0 in
      let s = None in
      let o = None in
      let b = None in
      let fib = best c s o b in
      let d = d[(1174406144,31) := (c,s,o,b,fib)] in
      let c = Some 0 in
      let s = None in
      let o = None in
      let b = None in
      let fib = best c s o b in
      let d = d[(167772416,31) := (c,s,o,b,fib)] in
      let c = Some 0 in
      let s = None in
      let o = None in
      let b = None in
      let fib = best c s o b in
      let d = d[(1174406144,32) := (c,s,o,b,fib)] in
      let c = None in
      let s = Some 1 in
      let o = None in
      let b = Some (20, 100, 0, 80, {}) in
      let fib = best c s o b in
      let d = d[(1174406144,24) := (c,s,o,b,fib)] in
      let c = Some 0 in
      let s = None in
      let o = None in
      let b = None in
      let fib = best c s o b in
      let d = d[(1174406146,31) := (c,s,o,b,fib)] in
      d
  | _ -> d

let transferOspf edge o =
   match o with
   | None -> None
   | Some (ad,cost,areaType,areaId) -> (
   match edge with
   | 0~4 -> None
   | 3~2 -> None
   | 3~1 -> None
   | 1~3 -> None
   | 2~5 -> None
   | 1~6 -> None
   | 3~7 -> None
   | 4~8 -> None
   | 4~9 -> None
   | 0~10 -> None
   | 2~11 -> None
   | 4~0 -> None
   | 2~3 -> None
   | 4~12 -> None
   | 2~13 -> None
   | 0~1 -> None
   | 1~0 -> None
   | 2~14 -> None
   | 4~15 -> None
)
 let transferBgp edge b =
   match b with
   | None -> None
   | Some (ad,lp,cost,med,comms) -> (
   match edge with
   | 0~4 -> Some (ad, lp, cost + 1, med, comms)
   | 3~2 -> Some (ad, lp, cost + 1, med, comms)
   | 3~1 -> Some (ad, lp, cost + 1, med, comms)
   | 1~3 -> Some (ad, lp, cost + 1, med, comms)
   | 2~5 -> None
   | 1~6 -> None
   | 3~7 -> None
   | 4~8 -> None
   | 4~9 -> None
   | 0~10 -> None
   | 2~11 -> None
   | 4~0 -> Some (ad, lp, cost + 1, med, comms)
   | 2~3 -> Some (ad, lp, cost + 1, med, comms)
   | 4~12 -> None
   | 2~13 -> None
   | 0~1 -> Some (ad, lp, cost + 1, med, comms)
   | 1~0 -> Some (ad, lp, cost + 1, med, comms)
   | 2~14 -> None
   | 4~15 -> None
)

let transferRoute edge x =
  let (c,s,o,b,fib) = x in
  let o = transferOspf edge o in
  let b = transferBgp edge b in
  (None, None, o, b, fib)

let trans edge x =
  map (transferRoute edge) x

let assert_node node x =
 match node with
 | 0n ->
     (match x[(1174405888,32)] with
     | (None, None, None, None, None) -> false
     | _ -> false)
 | _ -> true

let sol = solution {init = init; trans = trans; merge = merge}

assert foldNodes (fun k v acc -> acc && assert_node k v) sol true
