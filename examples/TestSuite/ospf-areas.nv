include "../utils.nv"

type attribute = dict[int, dict[int, option[int]]]

(* nodes 0-1 are in area 1
   nodes 1-2 are in area 0 (backbone)
 *)

let nodes = 3
let edges = {
  0=1;
  1=2;
}

let area edge = match edge with
  | 0~1 -> 1
  | 1~0 -> 1
  | 1~2 -> 0
  | 2~1 -> 0

let merge node x y =
  let f = mapbetter (fun x y -> if x < y then x else y) in
    combine (fun a b -> combine f a b) x y

let trans edge x =
  let area = area edge in
  match area with
  | 0 ->
    let m = (createDict (createDict None) : dict[int, dict[int, option[int]]]) in
      let db = x[0] in
        m[0 := map (fun o -> mapo (fun c -> c + 1) o) db]
  | 1 ->
    let m = createDict (createDict None) in
      let db = x[1] in
        m[1 := map (fun o -> mapo (fun c -> c + 1) o) db]

let init node =
  let m = (createDict (createDict None) : dict[int, dict[int, option[int]]]) in
  match node with
  | 0n -> let n = createDict None in
    m[1 := n[3 := Some 0]]
  | 1n -> m
  | 2n -> let n = createDict None in
    m[0 := n[5 := Some 0]]

let sol = solution {init = init; trans = trans; merge = merge}
