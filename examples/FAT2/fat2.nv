type ospfType = {ospfAd: int; weight: int; areaType:int; areaId: int;}
type bgpType = {bgpAd: int; lp: int; aslen: int; med:int; comms:set[int];}
type rib = {
    connected:option[int];
    static:option[int];
    ospf:option[ospfType];
    bgp:option[bgpType];
    selected:option[int]; }
type attribute = rib

symbolic d : (int, int)

let edges = {
  0-4;
  3-2;
  3-1;
  1-3;
  4-0;
  2-3;
  0-1;
  1-0;
}

let nodes = 5

let ospfIntraArea = 0
let ospfInterArea = 1
let ospfE1 = 2
let ospfE2 = 3

let protoConn = 0
let protoStatic = 1
let protoOspf = 2
let protoBgp = 3

let isProtocol fib x =
  match fib with
  | None -> false
  | Some y -> x = y

let min x y = if x < y then x else y

let max x y = if x < y then y else x

let pickOption f x y =
  match (x,y) with
  | (None, None) -> None
  | (None, Some _) -> y  | (Some _, None) -> x
  | (Some a, Some b) -> Some (f a b)

let betterOspf o1 o2 =
  if o1.areaType > o2.areaType then o1
  else if o2.areaType > o1.areaType then o2
  else if o1.weight <= o2.weight then o1 else o2

let betterBgp b1 b2 =
  if b1.lp > b2.lp then b1
  else if b2.lp > b1.lp then b2
  else if b1.aslen < b2.aslen then b1
  else if b2.aslen < b1.aslen then b2  else if b1.med >= b2.med then b1 else b2

let betterEqOption o1 o2 =
  match (o1,o2) with
  | (None, None) -> true
  | (Some _, None) -> true
  | (None, Some _) -> false
  | (Some a, Some b) -> a <= b

let best c s o b =
  match (c,s,o,b) with
  | (None,None,None,None) -> None
  | _ -> 
      let o = match o with | None -> None | Some o -> Some o.ospfAd in
      let b = match b with | None -> None | Some b -> Some b.bgpAd in
      let (x,p1) = if betterEqOption c s then (c,0) else (s,1) in
      let (y,p2) = if betterEqOption o b then (o,2) else (b,3) in
      Some (if betterEqOption x y then p1 else p2)

let mergeValues x y =
  let c = pickOption min (x.connected) (y.connected) in
  let s = pickOption min (x.static) (y.static) in
  let o = pickOption betterOspf (x.ospf) (y.ospf) in
  let b = pickOption betterBgp (x.bgp) (y.bgp) in
  { connected = c;
    static = s;
    ospf = o;
    bgp = b;
    selected = best c s o b}

let merge node x y = mergeValues x y

let init node =
  match node with
  | 0 -> 
     if (d = (167772416, 31)) || (d = (167772928, 31)) || (d = (1174405888, 32)) then
       let c = Some 0 in
       let s = None in
       let o = None in
       let b = None in
       let fib = best c s o b in
        {connected=c; static=s; ospf=o; bgp=b; selected=fib;}
     else {connected=None; static=None; ospf=None; bgp=None; selected=None;}
  | 1 -> 
     if (d = (167772928, 31)) || (d = (167772672, 31)) || (d = (1174405120, 32)) then
       let c = Some 0 in
       let s = None in
       let o = None in
       let b = None in
       let fib = best c s o b in
        {connected=c; static=s; ospf=o; bgp=b; selected=fib;}
     else {connected=None; static=None; ospf=None; bgp=None; selected=None;}
  | 2 -> 
     if (d = (167772160, 31)) || (d = (1174405632, 31)) || (d = (1174405632, 32)) || (d = (1174405634, 31)) then
       let c = Some 0 in
       let s = None in
       let o = None in
       let b = None in
       let fib = best c s o b in
        {connected=c; static=s; ospf=o; bgp=b; selected=fib;}
     else if (d = (1174405632, 24)) then
       let c = None in
       let s = Some 1 in
       let o = None in
       let b = Some {bgpAd=20; lp=100; aslen=0; med=80; comms={};} in
       let fib = best c s o b in
        {connected=c; static=s; ospf=o; bgp=b; selected=fib;}
     else {connected=None; static=None; ospf=None; bgp=None; selected=None;}
  | 3 -> 
     if (d = (167772160, 31)) || (d = (167772672, 31)) || (d = (1174405376, 32)) then
       let c = Some 0 in
       let s = None in
       let o = None in
       let b = None in
       let fib = best c s o b in
        {connected=c; static=s; ospf=o; bgp=b; selected=fib;}
     else {connected=None; static=None; ospf=None; bgp=None; selected=None;}
  | 4 -> 
     if (d = (167772416, 31)) || (d = (1174406144, 31)) || (d = (1174406144, 32)) || (d = (1174406146, 31)) then
       let c = Some 0 in
       let s = None in
       let o = None in
       let b = None in
       let fib = best c s o b in
        {connected=c; static=s; ospf=o; bgp=b; selected=fib;}
     else if (d = (1174406144, 24)) then
       let c = None in
       let s = Some 1 in
       let o = None in
       let b = Some {bgpAd=20; lp=100; aslen=0; med=80; comms={};} in
       let fib = best c s o b in
        {connected=c; static=s; ospf=o; bgp=b; selected=fib;}
     else {connected=None; static=None; ospf=None; bgp=None; selected=None;}
  | _ -> {connected=None; static=None; ospf=None; bgp=None; selected=None;}

 let transferOspf edge o =
   match o with
   | None -> None
   | Some o -> (
   match edge with
   | _ -> None
)
 let transferBgp edge x =
  let (prefix, prefixLen) = d in
  let b = match x.selected with
           | None -> None
           | Some 0 -> Some {bgpAd = 0; lp = 100; aslen = 0; med = 80; comms = {}}
           | Some 1 -> Some {bgpAd = 1; lp = 100; aslen = 0; med = 80; comms = {}}
           | Some 2 -> Some {bgpAd = 110; lp = 100; aslen = 0; med = 80; comms = {}}
           | Some 3 -> x.bgp
  in
  match b with
  | None -> None
  | Some b -> (
   match edge with
   | (0,4) -> 
    let b = (if ((isProtocol (x.selected) 3)) then
(Some {bgpAd= (b.bgpAd); lp= (b.lp); aslen= (b.aslen) + 1; med= (b.med);comms= (b.comms);})
else
None)
    in
      b
   | (0,1) -> 
    let b = (if ((isProtocol (x.selected) 3)) then
(Some {bgpAd= (b.bgpAd); lp= (b.lp); aslen= (b.aslen) + 1; med= (b.med);comms= (b.comms);})
else
None)
    in
      b
   | (1,0) -> 
    let b = (if ((isProtocol (x.selected) 3)) then
(Some {bgpAd= (b.bgpAd); lp= (b.lp); aslen= (b.aslen) + 1; med= (b.med);comms= (b.comms);})
else
None)
    in
      b
   | (1,3) -> 
    let b = (if ((isProtocol (x.selected) 3)) then
(Some {bgpAd= (b.bgpAd); lp= (b.lp); aslen= (b.aslen) + 1; med= (b.med);comms= (b.comms);})
else
None)
    in
      b
   | (2,3) -> 
    let b = (if (((((((prefixLen = 24) && ((prefix >= 1174405632) && (prefix < 1174405632256)))) && (!(isProtocol (x.selected) 3)))) || (isProtocol (x.selected) 3))) then
(Some {bgpAd= (b.bgpAd); lp= (b.lp); aslen= (b.aslen) + 1; med= (b.med);comms= (b.comms);})
else
None)
    in
      b
   | (3,2) -> 
    let b = (if ((isProtocol (x.selected) 3)) then
(Some {bgpAd= (b.bgpAd); lp= (b.lp); aslen= (b.aslen) + 1; med= (b.med);comms= (b.comms);})
else
None)
    in
      b
   | (3,1) -> 
    let b = (if ((isProtocol (x.selected) 3)) then
(Some {bgpAd= (b.bgpAd); lp= (b.lp); aslen= (b.aslen) + 1; med= (b.med);comms= (b.comms);})
else
None)
    in
      b
   | (4,0) -> 
    let b = (if (((((((prefixLen = 24) && ((prefix >= 1174406144) && (prefix < 1174406144256)))) && (!(isProtocol (x.selected) 3)))) || (isProtocol (x.selected) 3))) then
(Some {bgpAd= (b.bgpAd); lp= (b.lp); aslen= (b.aslen) + 1; med= (b.med);comms= (b.comms);})
else
None)
    in
      b
  | _ -> None)

let transferRoute edge x = 
  let o = transferOspf edge (x.ospf) in
  let b = transferBgp edge x in
  {connected=None; static=None; ospf=o; bgp=b; selected=None}

let trans edge x =
   transferRoute edge x

(*
{aggregation-3=0, core-0=1, edge-2=2, aggregation-1=3, edge-4=4}*)