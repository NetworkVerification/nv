type attribute = option[int]

let mapo f o =
  match o with
  | None -> None
  | Some x -> Some (f x)

let mapbetter f o1 o2 =
  match (o1, o2) with
  | (None, x) -> x
  | (x, None) -> x
  | (Some x, Some y) -> Some (f x y)

let trans e x = mapo (fun n -> n + 1) x

let merge n x1 x2 = mapbetter (fun n1 n2 -> if n1 < n2 then n1 else n2) x1 x2

let init n =
  match n with
  | 0n -> Some 0
  | _ -> None

let sol = solution {init = init; trans = trans; merge = merge}

let assert_node u x = !(x = None)

assert foldNodes (fun u x acc -> acc && assert_node u x) sol true
