(* vim: set syntax=ocaml: *)
type attribute = option[int]

(* Triangle of nodes
   We want to see that when we consider a series of dummy disconnected trees, that the results still
   are the same between all the nodes given some hypothetical input values.
 *)

(* Node 0: original node.
   Node 1: input from original node 1.
   Node 2: input from original node 2.
   Node 3: output from node 0 to node 1.
   Node 4: output from node 0 to node 2.
*)

(* Transfer equivalence function:
   mapo (fun x -> x + 1) x
*)

let nodes = 5
(* Three open cases to consider, where we remove one of each edge and adjust the init method accordingly,
   treating the remaining nodes as dummies *)
let edges = {
  1-0;
  2-0;
  0-3;
  0-4;
}

let mapo f o =
  match o with
  | None -> None
  | Some x -> Some (f x)

let mapbetter f o1 o2 =
  match (o1, o2) with
  | (None, x) -> x
  | (x , None) -> x
  | (Some x, Some y) -> Some (f x y)

let min x y = if x < y then x else y

let merge node x y =
  mapbetter min x y

let trans edge x = x

let init node =
  match node with
  | 0 -> None
  | 1 -> Some 1
  | 2 -> Some 2
  | _ -> None

let assert node x =
  match x with
  | None -> false
  | _ -> true
