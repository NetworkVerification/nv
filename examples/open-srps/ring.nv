(* vim: set syntax=ocaml: *)
type attribute = option[int]

(* Ring of nodes
   We want to see that when we consider a series of dummy disconnected trees, that the results still
   are the same between all the nodes given some hypothetical input values.
 *)

(*
    Broken version.
    *-- 0 --- 1 --- 2 --- 3 --- 4 --- 5 --*
 *)

(* Node 0: original node.
   Node 1: original node.
   Node 2: original node.
   Node 3: original node.
   Node 4: original node.
   Node 5: original node.
   Node 6: input from node 5 to 0.
   Node 7: input from node 0 to 5.
   Node 8: output from node 0.
   Node 9: output from node 5.
*)

(* Transfer equivalence function:
   mapo (fun x -> x + 1) x
*)
let nodes = 10
let edges = {
  0=1;
  1=2;
  2=3;
  3=4;
  4=5;
  6-0;
  7-5;
  0-8;
  5-9;
}

let mapo f o =
  match o with
  | None -> None
  | Some x -> Some (f x)

let mapbetter f o1 o2 =
  match (o1, o2) with
  | (None, x) -> x
  | (x , None) -> x
  | (Some x, Some y) -> Some (f x y)

let min x y = if x < y then x else y

let merge node x y =
  mapbetter min x y

let trans edge x = 
  match edge with
  | (6,0) -> x
  | (7,5) -> x
  | (0,8) -> x
  | (5,9) -> x
  | _ -> mapo (fun x -> x + 1) x

let init node =
  match node with
  | 0 -> Some 0
  | 3 -> Some 4
  | 6 -> Some 2
  | 7 -> Some 1
  | _ -> None

let assert node x =
  match x with
  | None -> false
  | Some y -> y < 4



