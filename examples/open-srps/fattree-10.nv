(* vim: set syntax=ocaml: *)
include "../utils.nv"

(* Each node keeps track of who its next hop is to and how long the total route is. *)
type route = { len: int; nexthop: tnode }
type attribute = option[route]

let test_route maybe_route min_len = match maybe_route with
  | Some r -> r.len >= min_len
  | None -> false

(* predicate that a route r exactly has length l and nexthop n *)
let exact_route r l n = match r with
  | Some r -> r.len = l && r.nexthop = n
  | None -> false

(* 10 node fattree, partitioned along the 4 bidirectional spine-pod edges *)
(* base_nodes = 10; input_nodes = 8; output_nodes = 8 *)
let nodes = 26

(* chosen destination: an arbitrary base node *)
let dest = 9n
(* require (0n <=n dest) && (dest <=n 9n) *)


(* node hypotheses *)
symbolic h0_2 : option[route]
symbolic h2_0 : option[route]
symbolic h0_6 : option[route]
symbolic h6_0 : option[route]
symbolic h1_3 : option[route]
symbolic h3_1 : option[route]
symbolic h1_7 : option[route]
symbolic h7_1 : option[route]

(* requirements on the hypotheses *)
require (exact_route h0_2 3 0n)
require (exact_route h2_0 4 2n)
require (exact_route h0_6 3 0n)
require (exact_route h6_0 2 6n)
require (exact_route h1_3 3 1n)
require (exact_route h3_1 4 3n)
require (exact_route h1_7 3 1n)
require (exact_route h7_1 2 7n)

(*
  Edge arrangement:
  0 to 2 and 6
  1 to 3 and 7

   0  1
  | \/ \
  | /\  \
  2 3 6 7
  |X| |X|
  6 7 8 9
*)
let edges = {
  (* cut 0=2 edge *)
  0-10;
  11-2;
  2-12;
  13-0;
  (* cut 0=6 edge *)
  0-14;
  15-6;
  6-16;
  17-0;
  (* cut 1=3 edge *)
  1-18;
  19-3;
  3-20;
  21-1;
  (* cut 1=7 edge *)
  1-22;
  23-7;
  7-24;
  25-1;
  (* uncut pod edges: left pod *)
  2=4;
  2=5;
  3=4;
  3=5;
  (* uncut pod edges: right pod *)
  6=8;
  6=9;
  7=8;
  7=9;
}

(* between two routes, pick the shorter one;
 * if the routes have the same length, pick the one with the lower node number
 *)
let compare_routes r1 r2 =
  if (r1.len < r2.len) then r1 else if (r1.len = r2.len && r1.nexthop <n r2.nexthop) then r1 else r2

(* merge picks the shortest of two routes, or the one with the lowest AS number if they are the same *)
let merge node x y = match node with
  (* accept whatever is sent to the output node *)
  (* | 10n -> y
  | 12n -> y
  | 14n -> y
  | 16n -> y
  | 18n -> y
  | 20n -> y
  | 22n -> y
  | 24n -> y *)
  (* perform merge for other nodes *)
  | _ -> mapbetter compare_routes x y

(* update a route to increase in size by one and give the specified node as the next hop *)
let update_route node r =
  let new_len = r.len + 1 in
  { len = new_len; nexthop = node }

(* the original trans broadcasts the updated route if a route exists, otherwise no route *)
let original_trans edge x = 
  (* get the source of the edge *)
  match edge with
  | src~_ -> mapo (fun r -> update_route src r) x

(* the final trans function in the partitioned SRP uses the original trans for all non-input edges
 * and the identity function for the others *)
let trans edge x = match edge with
  (* use identity for all input~base edges *)
  | 11~2 -> x
  | 13~0 -> x
  | 15~6 -> x
  | 17~0 -> x
  | 19~3 -> x
  | 21~1 -> x
  | 23~7 -> x
  | 25~1 -> x
  (* use original edge transfer for base~output edges *)
  | 0~10 -> (* original_trans 0~2 x *) mapo (fun r -> update_route 0n r) x
  | 2~12 -> (* original_trans 2~0 x *) mapo (fun r -> update_route 2n r) x
  | 0~14 -> (*original_trans 0~6 x*) mapo (fun r -> update_route 0n r) x
  | 6~16 -> (*original_trans 6~0 x*) mapo (fun r -> update_route 6n r) x
  | 1~18 -> (*original_trans 1~3 x*) mapo (fun r -> update_route 1n r) x
  | 3~20 -> (*original_trans 3~1 x*) mapo (fun r -> update_route 3n r) x
  | 1~22 -> (*original_trans 1~7 x*) mapo (fun r -> update_route 1n r) x
  | 7~24 -> (*original_trans 7~1 x*) mapo (fun r -> update_route 7n r) x
  (* otherwise use original transfer *)
  | _ -> original_trans edge x

let init node = if node = dest then
  Some { len = 0; nexthop = node } else 
  match node with
  | 11n -> h0_2
  | 13n -> h2_0
  | 15n -> h0_6
  | 17n -> h6_0
  | 19n -> h1_3
  | 21n -> h3_1
  | 23n -> h1_7
  | 25n -> h7_1
  | _ -> None

let assert node x = 
  match node with
  (* Check that the outputs satisfy the inputs *)
  | 10n -> exact_route x 3 0n
  | 12n -> exact_route x 4 2n
  | 14n -> exact_route x 3 0n
  | 16n -> exact_route x 2 6n
  | 18n -> exact_route x 3 1n
  | 20n -> exact_route x 4 3n
  | 22n -> exact_route x 3 1n
  | 24n -> exact_route x 2 7n
  (* Check that everyone can reach the destination *)
  | _ -> isSome x
