(* vim: set syntax=ocaml: *)
type attribute = option[int]

let nodes = 8

(* Diamond partial mesh network *)
(* broken in half *)
(*
   Other side:
    *
     \
  * * 0
   \|/
    1
 *)
 (*
  0: original node 3.
  1: original node 2.
  2: input to 3 from original node 1.
  3: input to 2 from original node 1.
  4: input to 2 from original node 0.
  5: output to 1 from 3.
  6: output to 3 from 2.
  7: output to 1 from 2.
 *)
let edges = {
 0=1;
 2-0;
 3-1;
 4-1;
 0-5;
 1-6;
 1-7;
}

let mapo f o =
  match o with
  | None -> None
  | Some x -> Some (f x)

let mapbetter f o1 o2 =
  match (o1, o2) with
  | (None, x) -> x
  | (x , None) -> x
  | (Some x, Some y) -> Some (f x y)
      
let merge node x y =
  mapbetter (fun x y -> if x < y then x else y) x y

let weight edge = 
  match edge with 
  | (1,7) -> 1
  | _ -> 3

let trans edge x =
  match edge with
  | (0,1) -> mapo (fun x -> x + (weight edge)) x
  | (1,0) -> mapo (fun x -> x + (weight edge)) x
  | _ -> x

let init node =
  match node with
  | 2 -> Some 4
  | 3 -> Some 2
  | 4 -> Some 3
  | _ -> None

let assert node x =
  match x with
  | None -> false
  | Some _ -> true


