(* vim: set syntax=ocaml: *)
type attribute = option[int]

let nodes = 21

(* Hexagon mesh network *)
(* broken in half *)
(* Case where hypotheses overapproximate *)
(*
  Original:
      0
    //|\\
   1--2--3
    \\|//
     4-5

      0
    //|\\
   1--2-**
    ****
*)
let edges = {
 0=1;
 0=2;
 1=2;
 0-3; (* 0 output to 3 *)
 0-4; (* 0 output to 4 *)
 0-5; (* 0 output to 5 *)
 1-6; (* 1 output to 3 *)
 1-7; (* 1 output to 4 *)
 1-8; (* 1 output to 5 *)
 2-9; (* 2 output to 3 *)
 2-10; (* 2 output to 4 *)
 2-11; (* 2 output to 5 *)
 12-0; (* 3 input to 0 *)
 13-0; (* 4 input to 0 *)
 14-0; (* 5 input to 0 *)
 15-1; (* 3 input to 1 *)
 16-1; (* 4 input to 1 *)
 17-1; (* 5 input to 1 *)
 18-2; (* 3 input to 2 *)
 19-2; (* 4 input to 2 *)
 20-2; (* 5 input to 2 *)
}

let mapo f o =
  match o with
  | None -> None
  | Some x -> Some (f x)

let mapbetter f o1 o2 =
  match (o1, o2) with
  | (None, x) -> x
  | (x , None) -> x
  | (Some x, Some y) -> Some (f x y)

let merge node x y =
  mapbetter (fun x y -> if x < y then x else y) x y

let trans edge x =
  match edge with
  | (0,1) -> mapo (fun x -> x + 1) x
  | (1,2) -> mapo (fun x -> x + 1) x
  | (0,2) -> mapo (fun x -> x + 1) x
  | _ -> x

let init node =
  match node with
  | 0 -> Some 0
  | 12 -> Some 4
  | 13 -> Some 4
  | 14 -> Some 4
  | 15 -> Some 4
  | 16 -> Some 4
  | 17 -> Some 4
  | 18 -> Some 4
  | 19 -> Some 4
  | 20 -> Some 4
  | _ -> None

let assert node x =
  match x with
  | None -> false
  | Some y -> if node > 11 then y = 4 else y <= 1
