type option_as_record = { val : int; isNone : bool }

type attribute = dict[int,option_as_record]

let nodes = 2

let edges = {
  0=1;
}

let mapo f o =
  match o with
  | { val = _; isNone = true } -> o
  | { val = x; isNone = false } -> { val = f x; isNone = false }

let mapbetter f o1 o2 =
  if o1.isNone then o2 else
  if o2.isNone then o1 else
  let newval = f (o1.val) (o2.val) in
  { isNone = false; val = newval }

let merge node x y =
  let f = mapbetter (fun x y -> if x < y then x else y) in
  combine f x y

let trans edge x =
  map (fun x -> mapo (fun x -> x + 1) x) x

let init node =
  let m = createDict ({ val = 0; isNone = true }) in
  match node with
  | 0 -> m[3 := { val = 2; isNone = false }]
  | 1 -> m[5 := { val = 7; isNone = false }]
