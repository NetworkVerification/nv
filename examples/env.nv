type attribute = (set[int], set[int])

let nodes = 3

let edges = {
  0=1;
  0=2;
}

let merge node x y =
  let (a,b) = x in
  let (c,d) = y in
  let env = a union c in
  let internal = b union d in
  (env, internal minus env)

let trans edge x =
  let (a,b) = x in
  if edge = 1n-0n then (a, filter (fun k -> k = 4) b) else x

let init node =
  match node with
  | 0n -> ({}, {5})
  | 1n -> ({}, {1,2,3,4})
  | 2n -> ({3},{})
