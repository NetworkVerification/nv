type attribute = option[int]

let nodes = 3

let edges = {
 0=1;
 1=2;
}

symbolic n : int
symbolic s : option[int]

let mapo f o =
  match o with
  | None -> None
  | Some x -> Some (f x)

let map2 f o1 o2 =
  match (o1, o2) with
  | (None, x) -> x
  | (x, None) -> x
  | (Some x, Some y) -> Some (f x y)

let merge node x y =
  match node with
  | 2 -> Some n
  | _ -> map2 (fun x y -> if x < y then x else y) x y

let weight edge =
  match edge with
  | _ -> 1

let trans edge x =
  mapo (fun x -> x + (weight edge)) x

let init node =
  match node with
  | 0 -> Some 0
  | 1 -> None
  | 2 -> Some n
