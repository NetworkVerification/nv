include "SRPSig.nv"

module type HijackArg =
sig
  include SRP

  val connectionPoint : tnode
  val newTrans : attribute -> attribute
end

module Hijack (S: HijackArg) =
struct
  type attribute = S.attribute

      symbolic attr : attribute

  (* The new node is node number S.nodes *)
  let nodes = S.nodes + 1
  let edges = S.edges[S.nodes~S.connectionPoint := true]

  (* We need to be able to cast between nodes and ints for this, unless we
     say S.nodes has type node and is the value of the highest-valued node
     (minus 1) *)
  let init n =
    if n = S.nodes then attr else S.init n

  let trans e x =
    if e = S.newEdge then S.newTrans x else S.trans e x

  let merge n x y =
    if n = S.nodes then attr else S.merge n x y

let assert_node n x =
    if n = S.nodes then ??? else assert
end

module Compose (S1 : SRP) (S2 : SRP) =
struct
  type attribute = (S1.attribute, S2.attribute)
  type node = S1.node + S2.node

  let init n =
    (S1.init n, S2.init (n - S1.nodes))

let assert_node (sol : dict[tnode, attr]) =

let sol = solution {init = init; trans = trans; merge = merge}

assert foldNodes (fun k v acc -> acc && assert_node k v) sol true
