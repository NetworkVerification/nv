include "../utils.nv"

(* I don't want to think about e.g. prefixes and lpms, So I'm defining a
   destination to be either a node in the network (presumably a loopback address),
   or an external address *)
(* Pretend NV has finite variants. We could implement this using e.g. a record *)
type dest =
  | DNode of node
  | DExternal of int

module RIPSingle = struct
  type attribute = int option

  let trans edge x =
    match x with
    | None -> None
    | Some d ->
      (* RIP caps routes at 15 hops *)
      if d >= 15 then None else Some (d+1)

  let merge n x y =
    mapbetter (fun x y -> if x < y then x else y) x y
end

module RIPMulti = struct
  type attribute = dict[dest, RIP.attribute]

  let init n =
    let m = createDict None in
    m[n := Some 0]

  let trans edge x =
    map (RIPSingle.trans edge) x

  let merge n x y = combine (RIPSingle.merge n) x y
end

(* Okay, this didn't actually end up being a functor *)
module RIP = struct
  include RIPMulti (* Re-exports all the definitions in RIPMulti *)

  let nodes = 2 (* User-defined *)
  let edges = {0~1;} (* User-defined *)
end
