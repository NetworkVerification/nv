include "utils.nv"
include "SRPSig.nv"

(* Implements our fault tolerance analysis by wrapping the attribute in
   an option type. If your attribute type already has some "default" value
   that behaves like None, you can use the other functor below. I'd recommend
   looking at that one first because it's simple *)
module FaultToleranceOpt (S : SRP) : SRP =
struct
  type attribute = dict[tedge, option[S.attribute]]

  let nodes = S.nodes
  let edges = S.edges

  let init n = createDict (Some (S.init n))

  let trans e x =
    mapIf
      (fun e' -> e' = e)
      (fun _ -> None)
      (fun attr -> mapo (S.trans e) attr)
      x

  let merge e x1 x2 =
    combine (mapbetter S.merge) x1 x2

  let assert =
    mapo
      (fun f -> fun n x ->
         foldEdge
           (* Having the && outside the match makes this more amenable to slicing *)
           (fun k v acc -> acc && match v with | None -> false | Some v -> f n v)
           true
           x
      )
      S.assert
end

(* An SRP with a designated "default" attribute type, which should basically
   be an identity for the merge function (i.e. indicates no route). *)
module type SRPWithDefault =
sig
  include SRP

  val default: attribute
end

module FaultTolerance (S : SRPWithDefault) : SRP =
struct
  type attribute = dict[tedge, S.attribute]

  let nodes = S.nodes
  let edges = S.edges

  let init n = createDict (S.init n)

  let trans e x =
    mapIf
      (fun e' -> e' = e)
      (fun _ -> S.default)
      (fun attr -> S.trans e attr)
      x

  let merge e x1 x2 =
    combine (S.merge) x1 x2

  let assert n x =
    mapo
      (fun f -> fun n x ->
         foldEdge
           (fun k v acc -> acc && f n v)
           true
           x)
      S.assert
end
