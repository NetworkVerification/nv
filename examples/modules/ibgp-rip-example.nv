include "../utils.nv"
include "SRPSig.nv"
include "rip.nv"
include "bgp.nv"

module type IBGPArg =
sig
  include SRP

  (* Can the node reach the dest in the given solution? *)
  val reachable : dict[tnode, attribute] -> tnode -> dest -> bool
  (* Administrative distance, i.e. a "ranking" of the path *)

  val admin_dist : attribute
end

module RIPArg =
struct
  include RIPMulti

  let reachable sol n d = match sol[n][d] with | None -> false | _ -> true
end

(*** Definition of IBGP using eBGP and RIP ***)
(* When we're running multiple routing algorithms in parallel, we use a value
   called administrative distance to select between them. I'm not clear on how
   it's typically computed, but the details aren't important for how iBGP works.
*)

(* In practice we'd have one function for each attribute type *)
let admin_dist attr = (* ... *)

module IBGP =
type annotated_bgp = {attr: bgp_attr; ibgp: bool;}
type annotated_rip = {attr: RIP.attribute;}

(* These are options so that we can return None from the transfer function *)
type ibgp_attr = {bgp: annotated_bgp option; rip: annotated_rip option; best_route: int}

type attribute = ibgp_attr

let pick_best bgp_attr rip_attr =
  match bgp_attr, rip_attr with
  | _, None -> 0
  | None, _ -> 1
  | Some bgp_attr, Some rip_attr ->
    if admin_dist bgp_attr < admin_dist rip_attr
    then 0 (* BGP is better *)
    else 1 (* RIP is better *)

let init n =
  let bgp_0 = BGP.init n in
  let rip_0 = RIP.init n in
  {
    bgp = Some {attr = bgp_0; ibgp = false;};
    rip = Some {attr = rip_0;};
    best_route = pick_best bgp_0 rip_0;
  }

(* Return true iff we have a route to dest via some IGP. Here, the only IGP is RIP. *)
let has_route ibgp_attr dest =
  match ibgp_attr.rip[dest] with
  | None -> false
  | _ -> true

let trans edge x =
  let (u,v) = edge in
  let trans_rip =
    if not (is_physical edge) then None (* RIP only operates over physical links, not logical iBGP links *)
    else mapo (RIP.trans edge) x
  in
  let trans_bgp =
    if not (is_logical edge)          then None (* Don't transfer if these nodes aren't iBGP neighbors *)
    else if x.bgp.ibgp                then None (* Don't redistribute routes that were learned via iBGP *)
    else if not (has_route x v)       then None (* The logical link doesn't work if we can't reach the other side *)
    else if not (has_route v.attr u)  then None (* Magic: We need the link to work in both directions *)
    else mapo (BGP.trans edge) x                 (* If none of the above are true, call be BGP trans function *)
  in
  {
    bgp = {attr = trans_bgp; ibgp = true};
    rip = {attr = rip};
    best_route = 0; (* Will be computed after merge *)
  }

let merge n x y =
  let merged_bgp = mapbetter (BGP.merge n) x.bgp y.bgp in
  let merged_rip = mapbetter (RIP.merge n) x.rip y.rip in
  {
    bgp = Some {attr = merged_bgp; ibgp = x.bgp.ibgp || y.bgp.ibgp};
    rip = Some {attr = rip};
    best_route = pick_best merged_bgp merged_rip;
  }
end

solution IBGP = n

  assert (...n...)
