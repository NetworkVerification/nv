let nodes = 9

(* fast schedule *)
(*
let edges = { 
    0=2;
    0=1;
    2=1;
    1=3;
    1=4;
    3=5;
    3=6;
    4=5;
    4=6;
    5=7;
    5=8;
    6=7;
    6=8;
}*)

(*slow schedule, 1 and 2 are swapped *)
let edges = { 
    0=1;
    0=2;
    1=2;
    2=3;
    2=4;
    3=5;
    3=6;
    4=5;
    4=6;
    5=7;
    5=8;
    6=7;
    6=8;
}

let trans e x = 
  match x with
  | None -> None
  | Some x -> Some (x+1)

let merge u x y =
  match (x,y) with
  | (_, None) -> x
  | (None, _) -> y
  | (Some x, Some y) -> if x <= y then Some x else Some y

let init u = if (u = 0n) then Some 0 else None

let transFail e x = 
  mapIte (fun e1 -> e = e1) (fun v -> None) (fun v -> trans e v) x

let transFail2 e x = 
  mapIte (fun k -> let (e1, e2) = k in e = e1 || e = e2) (fun v -> None) (fun v -> trans e v) x

let mergeFail u x y = combine (merge u) x y

let initFail u = createDict (init u)

let sol = solution {init = initFail; trans = transFail2; merge = mergeFail;}