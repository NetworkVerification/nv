(* Experimenting with simulator schedules *)

(* Defining something like a Fat Tree *)
let nodes = 12

let edges = { 
  (* first pod *)
   0=2;
   0=3;
   1=2;
   1=3;

   (* second pod *)
   4=6;
   4=7;
   5=6;
   5=7;

   (* spines *)
   2=8;
   2=9;
   3=10;
   3=11;
   6=8;
   6=9;
   7=10;
   7=11;
}


let trans e x = 
  match x with
  | None -> None
  | Some x -> Some (x+1)

let merge u x y =
  match (x,y) with
  | (_, None) -> x
  | (None, _) -> y
  | (Some x, Some y) -> if x <= y then Some x else Some y

let init u = if (u = 0n) then Some 0 else None

let transFail e x = 
  mapIte (fun e1 -> e = e1) (fun v -> None) (fun v -> trans e v) x

let mergeFail u x y = combine (merge u) x y

let initFail u = createDict (init u)

let sol = solution {init = initFail; trans = transFail; merge = mergeFail;}