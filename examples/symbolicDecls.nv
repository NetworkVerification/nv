type attribute = option[int]

let nodes = 3

let edges = {
 0=1;
 0=2;
}

symbolic fail1 = false
symbolic fail2 : bool

let merge node x y =
  match (x,y) with
  | (None, _) -> y
  | (_, None) -> x
  | (Some x, Some y) -> Some (if x < y then x else y)

let trans edge x =
  if
    ((edge = 0n-1n || edge = 1n-0n) && fail1) ||
    ((edge = 0n-2n || edge = 2n-0n) && fail2)
  then
    None
  else
    match x with
    | None -> None
    | Some x -> Some (x + 1)

let init node =
  match node with
  | 0n -> Some 0
  | _ -> None

let assert n x =
  match x with
  | None -> false
  | _ -> true
