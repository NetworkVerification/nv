type attribute = option[int]

let nodes = 4

let edges = {
 0=1;
 0=2;
 1=2;
 1=3;
 2=3;
}

symbolic d : int

require d >= 1 && d <= 6

symbolic fail01 : bool
symbolic fail02 : bool
symbolic fail12 : bool
symbolic fail13 : bool
symbolic fail23 : bool

let bool2int b = if b then 1 else 0

require
  let bool2int b = if b then 1 else 0 in 
  let numFails = (bool2int fail01) +
                 (bool2int fail02) +
		 (bool2int fail12) +
		 (bool2int fail13) +
		 (bool2int fail23)
  in 
  numFails <= 1

let mapo f o =
  match o with
  | None -> None
  | Some x -> Some (f x)

let mapbetter f o1 o2 =
  match (o1, o2) with
  | (None, x) -> x
  | (x , None) -> x
  | (Some x, Some y) -> Some (f x y)
      
let merge node x y =
  mapbetter (fun x y -> if x < y then x else y) x y

let edge_failed edge = 
  match edge with 
  | (0,1) -> fail01
  | (1,0) -> fail01
  | (0,2) -> fail02
  | (2,0) -> fail02
  | (1,2) -> fail12
  | (2,1) -> fail12
  | (1,3) -> fail13
  | (3,1) -> fail13
  | (2,3) -> fail23
  | (3,2) -> fail23

let trans edge x =
  if edge_failed edge then None
  else 
    let (a,b) = edge in 
    if a = 0 && d < 3 then None
    else mapo (fun x -> x + 1) x

let init node =
  match node with
  | 0 -> if (d = 1) || (d = 2) then Some 0 else None
  | 1 -> if d = 3 || d = 4 then Some 0 else None
  | 2 -> if d = 5 then Some 0 else None 
  | _ -> if d = 6 then Some 0 else None

let assert n x = 
  match x with
  | None -> false
  | _ -> true
