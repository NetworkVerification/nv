#!/usr/bin/env python3
"""
gen_part_nv.py [spfile]
A module for generating spX-part.nv fileoutput from spX.nv files.
"""
import sys
import os
import re

def find_edges(text):
    """Return the cross-partition edges."""
    prog = re.compile(r"(\d*)-(\d*); "\
            r"\(\*(core|aggregation)-\d*,Serial\d* --> (core|aggregation)-\d*,Serial\d*\*\)")
    matches = prog.finditer(text)
    return [match.group(1, 2) for match in matches].sort()

def find_nodes(text):
    """Return the spine nodes."""
    prog = re.compile(r"core-\d*=(\d*)")
    # find all core nodes
    matches = prog.finditer(text)
    # return the (\d*) match
    return [match.group(1) for match in matches].sort()

def write_preamble(spname):
    """
    Return the string representation of the preamble.
    """
    vim_modeline = "(* vim: set syntax=ocaml: *)"
    file_info = "(* Partitioned version of {} *)".format(spname)
    generated_by = "(* Automatically generated by gen_part.nv.py *)"
    include_utils = 'include "../../../examples/utils.nv"'
    include_sp = 'include "{}"'.format(spname)
    return "\n".join([vim_modeline, file_info, generated_by, include_utils, include_sp])

def write_partition_str(spine_nodes):
    """
    Return the string representation of the partition function.
    """
    output = "let partition node = match node with\n"
    for spine_node in spine_nodes:
        output += "  | {}n -> 0u8\n".format(spine_node)
    output += "  | _ -> 1u8\n"
    return output

def write_interface_str(cross_edges):
    """
    Return the string representation of the interface function.
    """
    output = "let interface edge =\n"
    common_block = """match x with
      | { connected = c; static = s; ospf = o; bgp = b; _ } ->
        c = None && s = None && o = None"""
    nbb = """let nothingButBgp x =
      {}
    in
    """.format(common_block)
    hob = """let hasOnlyBgp x =
      {} && isSome b
    in
    """.format(common_block)
    output += nbb + hob
    output += "match edge with\n"
    for (start, end) in cross_edges:
        output += "  | {}~{} -> Some nothingButBgp\n".format(start, end)
    output += "  | _ -> None\n"
    return output

def get_part_fname(spfile):
    """Return the name of the partition file for the corresponding spX.nv file."""
    spdir, spname = os.path.split(spfile)
    root, nvext = os.path.splitext(spname)
    partfile = os.path.join(spdir, root + "-part" + nvext)
    return partfile

def gen_part_nv(spfile):
    """Generate the partition file."""
    part = get_part_fname(spfile)
    with open(spfile, "r") as inputfile:
        sptext = inputfile.read()
    # get the three parts
    preamble = write_preamble(os.path.basename(spfile))
    cross_edges = find_edges(sptext)
    spine_nodes = find_nodes(sptext)
    partition = write_partition_str(spine_nodes)
    interface = write_interface_str(cross_edges)
    # put 'em all together
    output = "\n".join([preamble, partition, interface])
    with open(part, "w") as outfile:
        outfile.write(output)

if __name__ == "__main__":
    INPUT = sys.argv[1]
    gen_part_nv(INPUT)
